<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miro&#39;s Blog</title>
  
  <subtitle>「碎碎念」</subtitle>
  <link href="/Blog/atom.xml" rel="self"/>
  
  <link href="https://mirokaku.github.io/Blog/"/>
  <updated>2019-05-25T10:14:23.522Z</updated>
  <id>https://mirokaku.github.io/Blog/</id>
  
  <author>
    <name>Miro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>INF Template</title>
    <link href="https://mirokaku.github.io/Blog/2019/INF-Template/"/>
    <id>https://mirokaku.github.io/Blog/2019/INF-Template/</id>
    <published>2019-05-25T08:53:18.000Z</published>
    <updated>2019-05-25T10:14:23.522Z</updated>
    
    <content type="html"><![CDATA[<p>基本上, 大家写完驱动都是通过一个加载器来加载驱动, 我自己觉得太麻烦了…不如直接右键安装更方便.</p><p>下面是我自己使用的驱动 INF 文件模板, 直接替换里面部分文件信息就可以直接使用.</p><h2 id="INF-安装和卸载驱动"><a href="#INF-安装和卸载驱动" class="headerlink" title="INF 安装和卸载驱动"></a>INF 安装和卸载驱动</h2><h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><ol><li><p>可以直接右键 INF 文件, 选择 “安装”</p></li><li><p>通过命令安装</p></li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUNDLL32.EXE SETUPAPI.DLL,InstallHinfSection DefaultInstall 128 C:\WINDOWS\INF\SHELL.INF</span><br></pre></td></tr></table></figure></div><h3 id="卸载驱动"><a href="#卸载驱动" class="headerlink" title="卸载驱动"></a>卸载驱动</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUNDLL32.EXE SETUPAPI.DLL,InstallHinfSection DefaultUninstall 128 C:\WINDOWS\INF\SHELL.INF</span><br></pre></td></tr></table></figure></div><a id="more"></a><h2 id="NT-驱动-INF-模板"><a href="#NT-驱动-INF-模板" class="headerlink" title="NT 驱动 INF 模板"></a>NT 驱动 INF 模板</h2><p>有几个地方需要自行替换内容</p><pre><code>1. Version 里面的 Class, ClassGuid, DriverVer2. SourceDisksFiles 里面的文件名3. Strings 里面的所有信息, 根据自己的需求来填写</code></pre><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><figcaption><span>NT</span><a href="/Blog/downloads/code/NT.inf">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">; Template.inf</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; INF-MSDN:</span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/roadmap-for-device-and-driver-installation--windows-vista-and-later-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Class 填写驱动对应的类名</span></span><br><span class="line"><span class="comment">; ClassGuid 填写类名对应的 GUID</span></span><br><span class="line"><span class="comment">; MSDN: </span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/file-system-filter-driver-classes-and-class-guids</span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors</span></span><br><span class="line"><span class="comment">; DriverVer 填写编译日期</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Version]</span></span><br><span class="line"><span class="attr">Signature</span>   = <span class="string">"$WINDOWS NT$"</span></span><br><span class="line"><span class="attr">Class</span>       = AntiVirus</span><br><span class="line"><span class="attr">ClassGuid</span>   = {b1d1a169-c54f-<span class="number">4379</span>-<span class="number">81</span>db-bee7d88d7454}</span><br><span class="line"><span class="attr">Provider</span>    = %ManufacturerName%</span><br><span class="line"><span class="attr">CatalogFile</span> = %DriverName%.cat</span><br><span class="line"><span class="attr">DriverVer</span>   = <span class="number">08</span>/<span class="number">02</span>/<span class="number">2018</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;*************************************</span></span><br><span class="line"></span><br><span class="line"><span class="section">[DestinationDirs]</span></span><br><span class="line"><span class="attr">DefaultDestDir</span> = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="section">[SourceDisksNames]</span></span><br><span class="line"><span class="attr">1</span> = %DiskId%,,,<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 这里文件名不能用 %% 宏来替换</span></span><br><span class="line"><span class="comment">; 这里指定的文件一定要和生成的文件名一致</span></span><br><span class="line"><span class="comment">; 如果没有多个版本请自行删除不存在的文件</span></span><br><span class="line"><span class="comment">; MSDN:</span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-sourcedisksfiles-section</span></span><br><span class="line"><span class="section">[SourceDisksFiles]</span></span><br><span class="line"><span class="attr">Template.sys</span>     = <span class="number">1</span>,,</span><br><span class="line"><span class="attr">Template.x86.sys</span> = <span class="number">1</span>,,</span><br><span class="line"><span class="attr">Template.x64.sys</span> = <span class="number">1</span>,,</span><br><span class="line"></span><br><span class="line"><span class="comment">; CopyFiles MSDN: </span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-copyfiles-directive</span></span><br><span class="line"><span class="section">[Files.Copy.NTx86]</span></span><br><span class="line">%DriverName%.sys,%DriverName%.x86.sys,,0x00004020 ; COPYFLG_IN_USE_RENAME | COPYFLG_NO_VERSION_DIALOG</span><br><span class="line"></span><br><span class="line"><span class="section">[Files.Copy.NTamd64]</span></span><br><span class="line">%DriverName%.sys,%DriverName%.x64.sys,,0x00004020</span><br><span class="line"></span><br><span class="line"><span class="comment">; DelFiles MSDN:</span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-delfiles-directive</span></span><br><span class="line"><span class="section">[Files.Del]</span></span><br><span class="line">%DriverName%.sys</span><br><span class="line"></span><br><span class="line"><span class="comment">;*************************************</span></span><br><span class="line"></span><br><span class="line"><span class="section">[DefaultInstall.NTx86]</span></span><br><span class="line"><span class="attr">CopyFiles</span>=Files.Copy.NTx86</span><br><span class="line"></span><br><span class="line"><span class="section">[DefaultInstall.NTamd64]</span></span><br><span class="line"><span class="attr">CopyFiles</span>=Files.Copy.NTamd64</span><br><span class="line"></span><br><span class="line"><span class="comment">; AddService MSDN:</span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-addservice-directive</span></span><br><span class="line"><span class="section">[DefaultInstall.NTx86.Services]</span></span><br><span class="line"><span class="attr">AddService</span> = %ServiceName%,%ServicInstFlags%, ServiceInstall</span><br><span class="line"></span><br><span class="line"><span class="section">[DefaultInstall.NTamd64.Services]</span></span><br><span class="line"><span class="attr">AddService</span> = %ServiceName%,%ServicInstFlags%, ServiceInstall</span><br><span class="line"></span><br><span class="line"><span class="section">[DefaultUninstall.NTx86]</span></span><br><span class="line"><span class="attr">DelFiles</span>   = Files.Del</span><br><span class="line"></span><br><span class="line"><span class="section">[DefaultUninstall.NTamd64]</span></span><br><span class="line"><span class="attr">DelFiles</span>   = Files.Del</span><br><span class="line"></span><br><span class="line"><span class="comment">; DelService MSDN:</span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-delservice-directive</span></span><br><span class="line"><span class="section">[DefaultUninstall.NTx86.Services]</span></span><br><span class="line"><span class="attr">DelService</span> = %ServiceName%,<span class="number">0</span>x200</span><br><span class="line"></span><br><span class="line"><span class="section">[DefaultUninstall.NTamd64.Services]</span></span><br><span class="line"><span class="attr">DelService</span> = %ServiceName%,<span class="number">0</span>x200</span><br><span class="line"></span><br><span class="line"><span class="comment">;*************************************</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ServiceInstall]</span></span><br><span class="line"><span class="attr">DisplayName</span>    = %ServiceName%</span><br><span class="line"><span class="attr">Description</span>    = %ServiceDesc%</span><br><span class="line"><span class="attr">ServiceBinary</span>  = %<span class="number">12</span>%\%DriverName%.sys</span><br><span class="line"><span class="attr">ServiceType</span>    = <span class="number">1</span>                  ; SERVICE_KERNEL_DRIVER</span><br><span class="line"><span class="attr">StartType</span>      = <span class="number">3</span>                  ; <span class="number">0</span> = SERVICE_BOOT_START</span><br><span class="line">                                    <span class="comment">; 1 = SERVICE_SYSTEM_START</span></span><br><span class="line">                                    <span class="comment">; 2 = SERVICE_AUTO_START</span></span><br><span class="line">                                    <span class="comment">; 3 = SERVICE_DEMAND_START</span></span><br><span class="line">                                    <span class="comment">; 4 = SERVICE_DISABLED</span></span><br><span class="line"><span class="attr">ErrorControl</span>   = <span class="number">1</span>                  ; SERVICE_ERROR_NORMAL</span><br><span class="line"></span><br><span class="line"><span class="comment">;*************************************</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Strings]</span></span><br><span class="line"><span class="attr">ServicInstFlags</span>         = <span class="number">0</span>x00000000    ; https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-addservice-directive</span><br><span class="line">                                        <span class="comment">; 0x00000800 = SPSVCSINST_STARTSERVICE, 安装后立即启动服务</span></span><br><span class="line"><span class="attr">ManufacturerName</span>        = <span class="string">"Template"</span></span><br><span class="line"><span class="attr">DriverName</span>              = <span class="string">"Template"</span></span><br><span class="line"><span class="attr">ServiceDesc</span>             = <span class="string">"Template INF"</span></span><br><span class="line"><span class="attr">ServiceName</span>             = <span class="string">"Template"</span></span><br><span class="line"><span class="attr">DiskId</span>                  = <span class="string">"Template Device Installation Disk"</span></span><br></pre></td></tr></table></figure></div><h2 id="MiniFilter-驱动-INF-模板"><a href="#MiniFilter-驱动-INF-模板" class="headerlink" title="MiniFilter 驱动 INF 模板"></a>MiniFilter 驱动 INF 模板</h2><p>MiniFilter 的 INF 和 NT 基本差不多, 只是多了个 MiniFilter 的 Instance 注册表的补充.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><figcaption><span>MiniFilter</span><a href="/Blog/downloads/code/MiniFilter.inf">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">; Template.inf</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; INF-MSDN:</span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/roadmap-for-device-and-driver-installation--windows-vista-and-later-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Class 填写驱动对应的类名</span></span><br><span class="line"><span class="comment">; ClassGuid 填写类名对应的 GUID</span></span><br><span class="line"><span class="comment">; MSDN: </span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/file-system-filter-driver-classes-and-class-guids</span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors</span></span><br><span class="line"><span class="comment">; DriverVer 填写编译日期</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Version]</span></span><br><span class="line"><span class="attr">Signature</span>   = <span class="string">"$WINDOWS NT$"</span></span><br><span class="line"><span class="attr">Class</span>       = AntiVirus</span><br><span class="line"><span class="attr">ClassGuid</span>   = {b1d1a169-c54f-<span class="number">4379</span>-<span class="number">81</span>db-bee7d88d7454}</span><br><span class="line"><span class="attr">Provider</span>    = %ManufacturerName%</span><br><span class="line"><span class="attr">CatalogFile</span> = %DriverName%.cat</span><br><span class="line"><span class="attr">DriverVer</span>   = <span class="number">08</span>/<span class="number">02</span>/<span class="number">2018</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;*************************************</span></span><br><span class="line"></span><br><span class="line"><span class="section">[DestinationDirs]</span></span><br><span class="line"><span class="attr">DefaultDestDir</span> = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="section">[SourceDisksNames]</span></span><br><span class="line"><span class="attr">1</span> = %DiskId%,,,<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 这里文件名不能用 %% 宏来替换</span></span><br><span class="line"><span class="comment">; 这里指定的文件一定要和生成的文件名一致</span></span><br><span class="line"><span class="comment">; 如果没有多个版本请自行删除不存在的文件</span></span><br><span class="line"><span class="comment">; MSDN:</span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-sourcedisksfiles-section</span></span><br><span class="line"><span class="section">[SourceDisksFiles]</span></span><br><span class="line"><span class="attr">Template.sys</span>     = <span class="number">1</span>,,</span><br><span class="line"><span class="attr">Template.x86.sys</span> = <span class="number">1</span>,,</span><br><span class="line"><span class="attr">Template.x64.sys</span> = <span class="number">1</span>,,</span><br><span class="line"></span><br><span class="line"><span class="comment">; CopyFiles MSDN: </span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-copyfiles-directive</span></span><br><span class="line"><span class="section">[Files.Copy.NTx86]</span></span><br><span class="line">%DriverName%.sys,%DriverName%.x86.sys,,0x00004020 ; COPYFLG_IN_USE_RENAME | COPYFLG_NO_VERSION_DIALOG</span><br><span class="line"></span><br><span class="line"><span class="section">[Files.Copy.NTamd64]</span></span><br><span class="line">%DriverName%.sys,%DriverName%.x64.sys,,0x00004020</span><br><span class="line"></span><br><span class="line"><span class="comment">; DelFiles MSDN:</span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-delfiles-directive</span></span><br><span class="line"><span class="section">[Files.Del]</span></span><br><span class="line">%DriverName%.sys</span><br><span class="line"></span><br><span class="line"><span class="comment">;*************************************</span></span><br><span class="line"></span><br><span class="line"><span class="section">[DefaultInstall.NTx86]</span></span><br><span class="line"><span class="attr">CopyFiles</span>=Files.Copy.NTx86</span><br><span class="line"></span><br><span class="line"><span class="section">[DefaultInstall.NTamd64]</span></span><br><span class="line"><span class="attr">CopyFiles</span>=Files.Copy.NTamd64</span><br><span class="line"></span><br><span class="line"><span class="comment">; AddService MSDN:</span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-addservice-directive</span></span><br><span class="line"><span class="section">[DefaultInstall.NTx86.Services]</span></span><br><span class="line"><span class="attr">AddService</span> = %ServiceName%,%ServicInstFlags%, ServiceInstall</span><br><span class="line"></span><br><span class="line"><span class="section">[DefaultInstall.NTamd64.Services]</span></span><br><span class="line"><span class="attr">AddService</span> = %ServiceName%,%ServicInstFlags%, ServiceInstall</span><br><span class="line"></span><br><span class="line"><span class="section">[DefaultUninstall.NTx86]</span></span><br><span class="line"><span class="attr">DelFiles</span>   = Files.Del</span><br><span class="line"></span><br><span class="line"><span class="section">[DefaultUninstall.NTamd64]</span></span><br><span class="line"><span class="attr">DelFiles</span>   = Files.Del</span><br><span class="line"></span><br><span class="line"><span class="comment">; DelService MSDN:</span></span><br><span class="line"><span class="comment">;     https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-delservice-directive</span></span><br><span class="line"><span class="section">[DefaultUninstall.NTx86.Services]</span></span><br><span class="line"><span class="attr">DelService</span> = %ServiceName%,<span class="number">0</span>x200</span><br><span class="line"></span><br><span class="line"><span class="section">[DefaultUninstall.NTamd64.Services]</span></span><br><span class="line"><span class="attr">DelService</span> = %ServiceName%,<span class="number">0</span>x200</span><br><span class="line"></span><br><span class="line"><span class="comment">;*************************************</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ServiceInstall]</span></span><br><span class="line"><span class="attr">DisplayName</span>    = %ServiceName%</span><br><span class="line"><span class="attr">Description</span>    = %ServiceDesc%</span><br><span class="line"><span class="attr">ServiceBinary</span>  = %<span class="number">12</span>%\%DriverName%.sys</span><br><span class="line"><span class="attr">ServiceType</span>    = <span class="number">1</span>                  ; SERVICE_KERNEL_DRIVER</span><br><span class="line"><span class="attr">StartType</span>      = <span class="number">3</span>                  ; <span class="number">0</span> = SERVICE_BOOT_START</span><br><span class="line">                                    <span class="comment">; 1 = SERVICE_SYSTEM_START</span></span><br><span class="line">                                    <span class="comment">; 2 = SERVICE_AUTO_START</span></span><br><span class="line">                                    <span class="comment">; 3 = SERVICE_DEMAND_START</span></span><br><span class="line">                                    <span class="comment">; 4 = SERVICE_DISABLED</span></span><br><span class="line"><span class="attr">ErrorControl</span>   = <span class="number">1</span>                  ; SERVICE_ERROR_NORMAL</span><br><span class="line"><span class="attr">LoadOrderGroup</span> = FSFilter Anti-Virus; Reference Version.Class </span><br><span class="line"><span class="attr">Dependencies</span>   = FltMgr</span><br><span class="line"><span class="attr">AddReg</span>         = MiniFlt.AddInstance</span><br><span class="line"></span><br><span class="line"><span class="comment">; 主要就是补全 MiniFilter 需要的注册表</span></span><br><span class="line"><span class="section">[MiniFlt.AddInstance]</span></span><br><span class="line">HKR,%InstancesName%,%DefaultInstanceName%,0x00000000,%DefaultInstance%</span><br><span class="line">HKR,%InstancesName%"\"%Instance1.Name%,%AltitudeName%,0x00000000,%Instance1.Altitude%</span><br><span class="line">HKR,%InstancesName%"\"%Instance1.Name%,%FlagsName%,0x00010001,%Instance1.Flags%</span><br><span class="line"></span><br><span class="line"><span class="comment">;*************************************</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Strings]</span></span><br><span class="line"><span class="attr">ServicInstFlags</span>         = <span class="number">0</span>x00000000    ; https://docs.microsoft.com/en-us/windows-hardware/drivers/install/inf-addservice-directive</span><br><span class="line">                                        <span class="comment">; 0x00000800 = SPSVCSINST_STARTSERVICE, 安装后立即启动服务</span></span><br><span class="line"><span class="attr">ManufacturerName</span>        = <span class="string">"Template"</span></span><br><span class="line"><span class="attr">DriverName</span>              = <span class="string">"Template"</span></span><br><span class="line"><span class="attr">ServiceDesc</span>             = <span class="string">"Template INF"</span></span><br><span class="line"><span class="attr">ServiceName</span>             = <span class="string">"Template"</span></span><br><span class="line"><span class="attr">DiskId</span>                  = <span class="string">"Template Device Installation Disk"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">InstancesName</span>           = <span class="string">"Instances"</span></span><br><span class="line"><span class="attr">DefaultInstanceName</span>     = <span class="string">"DefaultInstance"</span></span><br><span class="line"><span class="attr">AltitudeName</span>            = <span class="string">"Altitude"</span></span><br><span class="line"><span class="attr">FlagsName</span>               = <span class="string">"Flags"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">DefaultInstance</span>         = <span class="string">"Template Instance"</span></span><br><span class="line"><span class="attr">Instance1.Name</span>          = <span class="string">"Template Instance"</span></span><br><span class="line"><span class="attr">Instance1.Altitude</span>      = <span class="string">"400000"</span>      ; https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/minifilter-altitude-request</span><br><span class="line"><span class="attr">Instance1.Flags</span>         = <span class="number">0</span>x0           ; <span class="number">0</span>x0 = Allow all attachments, 允许所有附加</span><br><span class="line">                                        <span class="comment">; 0x1 = Suppress automatic attachments, 禁止自动附加</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本上, 大家写完驱动都是通过一个加载器来加载驱动, 我自己觉得太麻烦了…不如直接右键安装更方便.&lt;/p&gt;
&lt;p&gt;下面是我自己使用的驱动 INF 文件模板, 直接替换里面部分文件信息就可以直接使用.&lt;/p&gt;
&lt;h2 id=&quot;INF-安装和卸载驱动&quot;&gt;&lt;a href=&quot;#INF-安装和卸载驱动&quot; class=&quot;headerlink&quot; title=&quot;INF 安装和卸载驱动&quot;&gt;&lt;/a&gt;INF 安装和卸载驱动&lt;/h2&gt;&lt;h3 id=&quot;安装驱动&quot;&gt;&lt;a href=&quot;#安装驱动&quot; class=&quot;headerlink&quot; title=&quot;安装驱动&quot;&gt;&lt;/a&gt;安装驱动&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;可以直接右键 INF 文件, 选择 “安装”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过命令安装&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RUNDLL32.EXE SETUPAPI.DLL,InstallHinfSection DefaultInstall 128 C:\WINDOWS\INF\SHELL.INF&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;卸载驱动&quot;&gt;&lt;a href=&quot;#卸载驱动&quot; class=&quot;headerlink&quot; title=&quot;卸载驱动&quot;&gt;&lt;/a&gt;卸载驱动&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RUNDLL32.EXE SETUPAPI.DLL,InstallHinfSection DefaultUninstall 128 C:\WINDOWS\INF\SHELL.INF&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/tags/Windows/"/>
    
      <category term="Kernel" scheme="https://mirokaku.github.io/Blog/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>About ProcessHollowing</title>
    <link href="https://mirokaku.github.io/Blog/2019/About-ProcessHollowing/"/>
    <id>https://mirokaku.github.io/Blog/2019/About-ProcessHollowing/</id>
    <published>2019-05-25T08:04:41.000Z</published>
    <updated>2019-05-25T10:16:54.504Z</updated>
    
    <content type="html"><![CDATA[<p><code>ProcessHollowing</code> (进程镂空) 也是出来很久了, 网上已经一大堆相关介绍的文章.<br>我就不再详细介绍, 详细介绍请看”<span class="exturl" data-url="aHR0cHM6Ly8zZ3N0dWRlbnQuZ2l0aHViLmlvLzNnc3R1ZGVudC5naXRodWIuaW8vJUU1JTgyJTgwJUU1JTg0JUExJUU4JUJGJTlCJUU3JUE4JThCJUU3JTlBJTg0JUU1JUFFJTlFJUU3JThFJUIwJUU0JUI4JThFJUU2JUEzJTgwJUU2JUI1JThCLw==" title="https://3gstudent.github.io/3gstudent.github.io/%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E6%A3%80%E6%B5%8B/">傀儡进程的实现与检测<i class="fa fa-external-link"></i></span>“, 这里就额外补充个小技巧.</p><a id="more"></a><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>假设我创建了一个 <code>svchost</code> 进程作为傀儡进程, 有一个问题就是: <code>svchost</code> 父进程不是 <code>services.exe</code>, 那么就能肉眼可见的发现这是个有问题的进程.</p><p>那么, 要怎么做才能做的更像 <code>&quot;svchost&quot;</code> 呢? 给 <code>svchost</code> 指定父进程为 <code>services.exe</code> 就行了.<br>下面是关键代码, 这个技巧还是我之前逆向 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01lZVNvbmcvUmV2ZXJzZS1FbmdpbmVlcmluZw==" title="https://github.com/MeeSong/Reverse-Engineering">CreateProcessInternalW<i class="fa fa-external-link"></i></span> 的时候发现的.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!InitializeProcThreadAttributeList(</span><br><span class="line">    vAttributeList,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    &amp;vAttributeListSize))</span><br><span class="line">&#123;</span><br><span class="line">    vDosError = GetLastError();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MSDN: https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-updateprocthreadattribute</span></span><br><span class="line"><span class="keyword">if</span> (!UpdateProcThreadAttribute(</span><br><span class="line">    vAttributeList,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, <span class="comment">// 指定父进程</span></span><br><span class="line">    &amp;vParentHandle,</span><br><span class="line">    <span class="keyword">sizeof</span>(vParentHandle),</span><br><span class="line">    <span class="literal">nullptr</span>,</span><br><span class="line">    <span class="literal">nullptr</span>))</span><br><span class="line">&#123;</span><br><span class="line">    vDosError = GetLastError();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> vStartup               = STARTUPINFOEXW();</span><br><span class="line">vStartup.StartupInfo.cb     = <span class="keyword">sizeof</span>(vStartup);</span><br><span class="line">vStartup.lpAttributeList    = vAttributeList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">vDosError = CreateProcessHollowed(</span><br><span class="line">    vNewToken,</span><br><span class="line">    <span class="literal">nullptr</span>,</span><br><span class="line">    <span class="string">LR"(C:\Windows\System32\notepad.exe)"</span>,</span><br><span class="line">    vRealApp,</span><br><span class="line">    vArgs,</span><br><span class="line">    <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, FALSE,</span><br><span class="line">    EXTENDED_STARTUPINFO_PRESENT | CREATE_NEW_CONSOLE, <span class="comment">// 这里有个 EXTENDED_STARTUPINFO_PRESENT</span></span><br><span class="line">    <span class="literal">nullptr</span>, vSysdir,</span><br><span class="line">    (LPSTARTUPINFOW)&amp; vStartup, &amp;vProcessInfo);</span><br><span class="line"><span class="keyword">if</span> (NOERROR != vDosError)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>怎么用 32 位进程创建 64 位的镂空进程?</p><p>可以借助 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J3ZnBsL3Jld29sZi13b3c2NGV4dA==" title="https://github.com/rwfpl/rewolf-wow64ext">wow64ext<i class="fa fa-external-link"></i></span> 这个库, 它可以让 <code>Wow64</code> 进程调用 <code>64</code> 位 <code>Ntdll.dll</code> 的系统调用.<br>把 <code>ProcessHollowing</code> 里面对目标进程操作相关的 <code>API</code> 都换成 <code>wow64ext</code> 扩展的 <code>API</code> 就可以了.</p><h2 id="例子代码"><a href="#例子代码" class="headerlink" title="例子代码"></a>例子代码</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pcm9LYWt1L0xlYXJuaW5nLUV4YW1wbGUvdHJlZS9tYXN0ZXIvUHJvY2Vzc0hvbGxvd2luZw==" title="https://github.com/MiroKaku/Learning-Example/tree/master/ProcessHollowing">MeeSong/ProcessHollowing<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;ProcessHollowing&lt;/code&gt; (进程镂空) 也是出来很久了, 网上已经一大堆相关介绍的文章.&lt;br&gt;我就不再详细介绍, 详细介绍请看”&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly8zZ3N0dWRlbnQuZ2l0aHViLmlvLzNnc3R1ZGVudC5naXRodWIuaW8vJUU1JTgyJTgwJUU1JTg0JUExJUU4JUJGJTlCJUU3JUE4JThCJUU3JTlBJTg0JUU1JUFFJTlFJUU3JThFJUIwJUU0JUI4JThFJUU2JUEzJTgwJUU2JUI1JThCLw==&quot; title=&quot;https://3gstudent.github.io/3gstudent.github.io/%E5%82%80%E5%84%A1%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E6%A3%80%E6%B5%8B/&quot;&gt;傀儡进程的实现与检测&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;“, 这里就额外补充个小技巧.&lt;/p&gt;
    
    </summary>
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>About InstrumentationCallback</title>
    <link href="https://mirokaku.github.io/Blog/2019/About-InstrumentationCallback/"/>
    <id>https://mirokaku.github.io/Blog/2019/About-InstrumentationCallback/</id>
    <published>2019-05-24T13:22:14.000Z</published>
    <updated>2019-05-24T14:59:32.062Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>分析环境为 x64 版本</p></blockquote><p><code>InstrumentationCallback</code> 回调的技术刚出来的时候就收藏了, 一直没有去研究学习它. 现在有时间来看一下这个东西.</p><p>这个回调存储在 <code>KPROCESS-&gt; InstrumentationCallback</code>.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: kd&gt; dtx nt!_KPROCESS</span><br><span class="line">    [+<span class="number">0x100</span>] InstrumentationCallback : <span class="number">0x7FF6FA0E11AE</span></span><br></pre></td></tr></table></figure></div><p>它很有意思, <em>当从内核返回到用户层的时候, 就会触发这个回调</em>.下面是一些触发点:</p><ul><li>LdrInitializeThunk</li><li>KiUserExceptionDispatcher</li><li>KiRaiseUserExceptionDispatcher</li><li>KiUserCallbackDispatcher</li><li>KiUserApcDispatcher</li><li>sysret (KeSystemServiceExit)</li></ul><a id="more"></a><h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用 ?"></a>怎么用 ?</h2><h3 id="安装回调"><a href="#安装回调" class="headerlink" title="安装回调"></a>安装回调</h3><p>既然这个回调存储在 <code>KPROCESS</code>, 那么我们就看一下设置进程相关的 <code>NtSetInformationProcess()</code></p><p>根据资料和分析可以知道传入参数的结构为:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PVOID Callback;</span><br><span class="line">&#125; PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION, * PPROCESS_INSTRUMENTATION_CALLBACK_INFORMATION;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Since Windows 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION_EX</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ULONG Version;</span><br><span class="line">    ULONG Reserved;</span><br><span class="line">    PVOID Callback;</span><br><span class="line">&#125; PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION_EX, * PPROCESS_INSTRUMENTATION_CALLBACK_INFORMATION_EX;</span><br></pre></td></tr></table></figure></div><p>下面代码是我对参数处理相关代码的还原:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">NtSetInformationProcess()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> ((aProcessInformationLength - <span class="number">8</span>) &amp; <span class="number">0xFFFFFFF7</span>)</span><br><span class="line">        <span class="keyword">return</span> STATUS_INFO_LENGTH_MISMATCH;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (aProcessInformationLength == <span class="number">8</span>)</span><br><span class="line">        InstrumentationCallbackInfo.Callback = *(PVOID *)aProcessInformation;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        InstrumentationCallbackInfo.Callback = *(PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION_EX *)aProcessInformation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (InstrumentationCallbackInfo.Reserved)</span><br><span class="line">        <span class="keyword">return</span> STATUS_INVALID_PARAMETER;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (InstrumentationCallbackInfo.Version != InstrumentationCallbackInfo.Reserved)</span><br><span class="line">        <span class="keyword">return</span> STATUS_UNKNOWN_REVISION;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (InstrumentationCallbackInfo.Callback != (<span class="keyword">void</span> *)((_QWORD)InstrumentationCallbackInfo.Callback &lt;&lt; <span class="number">16</span> &gt;&gt; <span class="number">16</span>))</span><br><span class="line">        <span class="keyword">return</span> STATUS_INVALID_PARAMETER;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>从代码中我们看到几个信息:</p><pre><code>1. 函数接受两种长度的参数. 8 和 162. Reserved 必须为 03. Reversed 必须等于 Version4. 回调地址必须是用户层回调地址</code></pre><p>经过调试发现, Windows 10 之前的系统只支持长度为 8 的参数.</p><p>那么 <code>NtSetInformationProcess()</code> 的调用方法就是:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NtSetInformationProcess(</span><br><span class="line">    GetCurrentProcess(),</span><br><span class="line">    sdkext::PROCESSINFOCLASS::ProcessInstrumentationCallback, <span class="comment">// 40</span></span><br><span class="line">    vInformation,        <span class="comment">// PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION[EX]</span></span><br><span class="line">    vInformationLength); <span class="comment">// 8 or 16</span></span><br></pre></td></tr></table></figure></div><p>接下来我们就要看下怎么构造这个回调, 也就是要看下这个回调能用的参数是什么?</p><h3 id="构造回调"><a href="#构造回调" class="headerlink" title="构造回调"></a>构造回调</h3><p>要想知道回调的参数是什么, 我们就要去看一下触发点.</p><p>我选了比较简单的 <code>KiDispatchException()</code> 函数来分析.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">KiDispatchException()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    _disable();</span><br><span class="line">    TrapFrame-&gt;SegCs = <span class="number">0x33</span>;</span><br><span class="line">    TrapFrame-&gt;Rip   = KeUserExceptionDispatcher;</span><br><span class="line">    InstrumentationCallback = KeGetCurrentThread()-&gt;ApcState.Process-&gt;InstrumentationCallback;</span><br><span class="line">    <span class="keyword">if</span> (InstrumentationCallback)</span><br><span class="line">    &#123;</span><br><span class="line">        v6-&gt;R10 = (<span class="keyword">unsigned</span> __int64)TrapFrame-&gt;Rip;  <span class="comment">// return address</span></span><br><span class="line">        v6-&gt;Rip = (<span class="keyword">unsigned</span> __int64)InstrumentationCallback;</span><br><span class="line">    &#125;</span><br><span class="line">    _enable();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>从代码中我们看到, <code>KiDispatchException()</code> 回到应用层是构造了一个 <code>TrapFrame</code>.其中有处关键的地方: <code>R10</code>, 如果存在 <code>InstrumentationCallback</code> 回调, 这个寄存器就用来存储本应该返回的地址. 其它就是正常展开 <code>TrapFrame</code>. 所以我们要自己构造一个垫片函数, 来正确处理参数.</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">include ksamd64.inc</span><br><span class="line"><span class="meta">EXTERN</span> InstrumentationCallback:<span class="built_in">NEAR</span></span><br><span class="line"></span><br><span class="line"><span class="meta">.CODE</span></span><br><span class="line"></span><br><span class="line">InstrumentationCallbackShim PROC</span><br><span class="line"></span><br><span class="line"><span class="comment">; https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">rax</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">rcx</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">RBX</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">RBP</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">RDI</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">RSI</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">RSP</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">R12</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">R13</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">R14</span></span><br><span class="line"><span class="keyword">push</span> <span class="built_in">R15</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">; homespace (rcx, rdx, r8, r9)</span></span><br><span class="line"><span class="keyword">sub</span> <span class="built_in">rsp</span>, <span class="number">20h</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">rdx</span>, <span class="built_in">rax</span> <span class="comment">; return value</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">rcx</span>, <span class="built_in">r10</span> <span class="comment">; return address</span></span><br><span class="line"><span class="keyword">call</span> InstrumentationCallback</span><br><span class="line"><span class="keyword">add</span> <span class="built_in">rsp</span>, <span class="number">20h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">R15</span> </span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">R14</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">R13</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">R12</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">RSP</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">RSI</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">RDI</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">RBP</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">RBX</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">rcx</span></span><br><span class="line"><span class="keyword">pop</span> <span class="built_in">rax</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">jmp</span> <span class="built_in">R10</span></span><br><span class="line">InstrumentationCallbackShim ENDP</span><br><span class="line"> </span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>根据资料和调试分析得知几个注意的问题:</p><ol><li>Windows 10 之前的系统必须提升 <code>Debug</code> 特权, 才能正常调用 <code>NtSetInformationProcess()</code></li><li>Windows 10 之前的系统只支持传入 <code>PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION</code></li></ol><h2 id="例子代码"><a href="#例子代码" class="headerlink" title="例子代码"></a>例子代码</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pcm9LYWt1L0xlYXJuaW5nLUV4YW1wbGUvdHJlZS9tYXN0ZXIvSW5zdHJ1bWVudGF0aW9uQ2FsbGJhY2s=" title="https://github.com/MiroKaku/Learning-Example/tree/master/InstrumentationCallback">MeeSong/InstrumentationCallback<i class="fa fa-external-link"></i></span></p><h2 id="引用参考"><a href="#引用参考" class="headerlink" title="引用参考"></a>引用参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9zZWNyYXJ5LmNvbS9SYW5kb20vSW5zdHJ1bWVudGF0aW9uQ2FsbGJhY2sv" title="https://secrary.com/Random/InstrumentationCallback/">Hooking via InstrumentationCallback<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29kZXByb2plY3QuY29tL0FydGljbGVzLzU0MzU0Mi9XaW5kb3dzLXgtc3lzdGVtLXNlcnZpY2UtaG9va3MtYW5kLWFkdmFuY2VkLWRlYnVn" title="https://www.codeproject.com/Articles/543542/Windows-x-system-service-hooks-and-advanced-debug">Windows x64 system service hooks and advanced debugging<i class="fa fa-external-link"></i></span></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分析环境为 x64 版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;InstrumentationCallback&lt;/code&gt; 回调的技术刚出来的时候就收藏了, 一直没有去研究学习它. 现在有时间来看一下这个东西.&lt;/p&gt;
&lt;p&gt;这个回调存储在 &lt;code&gt;KPROCESS-&amp;gt; InstrumentationCallback&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: kd&amp;gt; dtx nt!_KPROCESS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [+&lt;span class=&quot;number&quot;&gt;0x100&lt;/span&gt;] InstrumentationCallback : &lt;span class=&quot;number&quot;&gt;0x7FF6FA0E11AE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它很有意思, &lt;em&gt;当从内核返回到用户层的时候, 就会触发这个回调&lt;/em&gt;.
下面是一些触发点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LdrInitializeThunk&lt;/li&gt;
&lt;li&gt;KiUserExceptionDispatcher&lt;/li&gt;
&lt;li&gt;KiRaiseUserExceptionDispatcher&lt;/li&gt;
&lt;li&gt;KiUserCallbackDispatcher&lt;/li&gt;
&lt;li&gt;KiUserApcDispatcher&lt;/li&gt;
&lt;li&gt;sysret (KeSystemServiceExit)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/tags/Windows/"/>
    
      <category term="Kernel" scheme="https://mirokaku.github.io/Blog/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>配置 Windows 网络模式内核调试</title>
    <link href="https://mirokaku.github.io/Blog/2018/Windbg-Network/"/>
    <id>https://mirokaku.github.io/Blog/2018/Windbg-Network/</id>
    <published>2018-10-03T11:07:33.000Z</published>
    <updated>2019-05-16T11:28:30.675Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning">            <p>Windbg 版本要与被调试的 Windows 版本一致! 否则可能出现网络包不支持. </p>          </div><ol><li><p>配置虚拟机</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /copy &#123;current&#125; /d TestMode</span><br><span class="line">bcdedit /<span class="built_in">set</span> &#123;new&#125; testsigning on</span><br><span class="line">bcdedit /<span class="built_in">set</span> &#123;new&#125; debug on</span><br><span class="line">bcdedit /<span class="built_in">set</span> disabledynamictick yes <span class="comment"># 可选</span></span><br><span class="line"><span class="comment"># hostip, port, key 自行修改</span></span><br><span class="line">bcdedit /dbgsettings net hostip:192.168.0.1 port:54231 key:ms.dbg.1809.64</span><br></pre></td></tr></table></figure></div></li><li><p>打开 <code>Windbg-&gt;File-&gt;Kernel Debugging</code></p><p> 填入上面配置的 port 和 key</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note warning&quot;&gt;
            &lt;p&gt;Windbg 版本要与被调试的 Windows 版本一致! 否则可能出现网络包不支持. &lt;/p&gt;
          &lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;配置虚拟机&lt;/p&gt;
 &lt;div cla
      
    
    </summary>
    
    
      <category term="Kernel" scheme="https://mirokaku.github.io/Blog/tags/Kernel/"/>
    
      <category term="Debug" scheme="https://mirokaku.github.io/Blog/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>查看 VS 宏展开的代码</title>
    <link href="https://mirokaku.github.io/Blog/2017/vs-macro-to-expand/"/>
    <id>https://mirokaku.github.io/Blog/2017/vs-macro-to-expand/</id>
    <published>2017-07-17T10:56:58.000Z</published>
    <updated>2019-05-16T10:59:12.645Z</updated>
    
    <content type="html"><![CDATA[<p>打开到 <code>项目属性 -&gt; 配置属性 -&gt; C/C++ -&gt; 命令行 -&gt; 其他选项</code></p><p>在 <code>其他选项</code> 中添加 <code>/EP /P</code></p><p>右键要查看宏展开的 CPP 文件, 选择 编译, 之后会在 CPP 同目录下生成 <code>.i</code> 文件.</p><p>这个文件就是宏展开的代码.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打开到 &lt;code&gt;项目属性 -&amp;gt; 配置属性 -&amp;gt; C/C++ -&amp;gt; 命令行 -&amp;gt; 其他选项&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;其他选项&lt;/code&gt; 中添加 &lt;code&gt;/EP /P&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;右键要查看宏展开的 CPP
      
    
    </summary>
    
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/tags/Windows/"/>
    
      <category term="C++" scheme="https://mirokaku.github.io/Blog/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Windows kernel learning: 5. Process, Thread and Jobs</title>
    <link href="https://mirokaku.github.io/Blog/2017/5-Process-and-Thread/"/>
    <id>https://mirokaku.github.io/Blog/2017/5-Process-and-Thread/</id>
    <published>2017-05-29T02:47:32.000Z</published>
    <updated>2019-05-23T12:02:44.185Z</updated>
    
    <content type="html"><![CDATA[<p>从概念上来说, 进程是线程的容器, 进程提供了线程必要的地址空间, 上下文环境, 安全凭证等等..而线程是最基本的执行单位和调度单位. 作业呢? 作业可以看作是进程的容器, 使其可以对进程进行统一的管理.</p><p>从实际上来说, 内核就是各种各样的数据结构, 进程, 线程和作业也不例外.</p><a id="more"></a><p>每个 Windows 进程都是由一个执行体进程结构 <code>EPROCESS</code> 来表示的, 结构中包含了许多进程有关的属性和数据结构. <code>EPROCESS</code> 和相关的数据结构位域系统空间中, 不过进程环境块 <code>PEB</code> 是个例外, 它位于进程地址空间中.</p><p>Windows 线程是由一个执行体线程结构 <code>ETHREAD</code> 来表示的, 同样, 除了线程环境块 <code>TEB</code> 位于进程地址空间中, 其他都位于系统空间中.</p><p>对于每个执行了一个 Win32 程序的进程, Win32子系统进程 (Csrss) 为它维护了一个平行的结构 <code>CSR_PROCESS</code>. 同时也为每个线程维护了平行的结构 <code>CSR_THREAD</code>.</p><p>Windows 子系统的内核模式部分 (Win32k.sys) 有一个针对每个进程的数据结构, <code>W32PROCESS</code>. 每当一个线程第一次调用 Windows 的 USER/GDI 函数时, W32PROCESS 结构就会被创建.</p><img src="/Blog/2017/5-Process-and-Thread/P-T-Associated.jpg" title="Data structures associated with processes and threads"><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>我们先来看一下相关的数据结构</p><h3 id="进程相关结构"><a href="#进程相关结构" class="headerlink" title="进程相关结构"></a>进程相关结构</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><figcaption><span>EPROCESS</span><a href="/Blog/downloads/code/EPROCESS.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Windows 8.1 x64 Checked Build*/</span></span><br><span class="line">          <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EPROCESS</span>                                  // 161 <span class="title">elements</span>, 0<span class="title">x6B8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">          {</span></span><br><span class="line"><span class="comment">/*0x000*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">KPROCESS</span> <span class="title">Pcb</span>;</span>                                 <span class="comment">// 进程控制块, 因为是 EPROCESS 的第一个字段, 所以 KPROCESS 和 EPROCESS 的地址是一样的</span></span><br><span class="line"><span class="comment">/*0x2C8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span> <span class="title">ProcessLock</span>;</span>                     <span class="comment">// 与 KPROCESS 中的自旋锁同名, 但它们的类型不同, 保护的成员也不同. 这里的 ProcessLock 域是一个推锁 (push lock) 对象, 用于保护EPROCESS 中的数据成员</span></span><br><span class="line"><span class="comment">/*0x2D0*/</span>     <span class="keyword">union</span> _LARGE_INTEGER CreateTime;                      <span class="comment">// 进程创建时间</span></span><br><span class="line"><span class="comment">/*0x2D8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_RUNDOWN_REF</span> <span class="title">RundownProtect</span>;</span>                <span class="comment">// 进程的停止保护锁, 当一个进程到最后被销毁时, 它要等到所有其他进程和线程已经释放了此锁, 才可以继续进行</span></span><br><span class="line"><span class="comment">/*0x2E0*/</span>     HANDLE       UniqueProcessId;                         <span class="comment">// 进程id</span></span><br><span class="line"><span class="comment">/*0x2E8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ActiveProcessLinks</span>;</span>                <span class="comment">// 活动进程链表, 表头是全局变量PsActiveProcessHead</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x2F8*/</span>         ULONG32      Flags2;</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      JobNotReallyActive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      AccountingFolded : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      NewProcessReported : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      ExitProcessReported : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      ReportCommitChanges : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      LastReportMemory : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      ForceWakeCharge : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      CrossSessionCreate : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      NeedsHandleRundown : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      RefTraceEnabled : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      DisableDynamicCode : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      EmptyJobEvaluated : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      DefaultPagePriority : <span class="number">3</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      PrimaryTokenFrozen : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      ProcessVerifierTarget : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      StackRandomizationDisabled : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      AffinityPermanent : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      AffinityUpdateEnable : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      PropagateNode : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      ExplicitAffinity : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      ProcessExecutionState : <span class="number">2</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      DisallowStrippedImages : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      HighEntropyASLREnabled : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      ExtensionPointDisable : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      ForceRelocateImages : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      ProcessStateChangeRequest : <span class="number">2</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      ProcessStateChangeInProgress : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2F8*/</span>             ULONG32      DisallowWin32kSystemCalls : <span class="number">1</span>;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x2FC*/</span>         ULONG32      Flags;</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      CreateReported : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      NoDebugInherit : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      ProcessExiting : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      ProcessDelete : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      ControlFlowGuardEnabled : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      VmDeleted : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      OutswapEnabled : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      Outswapped : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      ForkFailed : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      Wow64VaSpace4Gb : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      AddressSpaceInitialized : <span class="number">2</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      SetTimerResolution : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      BreakOnTermination : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      DeprioritizeViews : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      WriteWatch : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      ProcessInSession : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      OverrideAddressSpace : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      HasAddressSpace : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      LaunchPrefetched : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      Background : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      VmTopDown : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      ImageNotifyDone : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      PdeUpdateNeeded : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      VdmAllowed : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      ProcessRundown : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      ProcessInserted : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      DefaultIoPriority : <span class="number">3</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      ProcessSelfDelete : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x2FC*/</span>             ULONG32      SetTimerResolutionLink : <span class="number">1</span>;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x300*/</span>     UINT64       ProcessQuotaUsage[<span class="number">2</span>];                    <span class="comment">// 指一个进程的内存使用量和尖峰使用量.</span></span><br><span class="line"><span class="comment">/*0x310*/</span>     UINT64       ProcessQuotaPeak[<span class="number">2</span>];                     <span class="comment">// 指一个进程的尖峰使用量.</span></span><br><span class="line">                                                                    <span class="comment">// 这两个域是数组, 其中的元素分别对应于非换页内存池, 换页内存池和交换文件中的内存使用情况.</span></span><br><span class="line">                                                                    <span class="comment">// 这两个数组是在 PspChargeQuota 函数中计算的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*0x320*/</span>     UINT64       PeakVirtualSize;                         <span class="comment">// 虚拟内存大小的尖峰值</span></span><br><span class="line"><span class="comment">/*0x328*/</span>     UINT64       VirtualSize;                             <span class="comment">// 进程的虚拟内存大小</span></span><br><span class="line"><span class="comment">/*0x330*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">SessionProcessLinks</span>;</span>               <span class="comment">// 会话进程链表, 当进程加入到一个系统会话中时, 其 SessionProcessLinks 域将作为一个节点加入到该会话的进程链表中</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x340*/</span>         VOID*        ExceptionPortData;                   <span class="comment">// 异常端口句柄, 当一个进程中的线程发生用户模式异常时,</span></span><br><span class="line">                                                                    <span class="comment">// 内核的异常处理例程在处理异常过程中, 将向该进程的异常端口或调试端口发送消息,</span></span><br><span class="line">                                                                    <span class="comment">// 从而使这些端口的接收方 (调试器或 Windows 子系统) 能够处理该异常</span></span><br><span class="line"><span class="comment">/*0x340*/</span>         UINT64       ExceptionPortValue;</span><br><span class="line"><span class="comment">/*0x340*/</span>         UINT64       ExceptionPortState : <span class="number">3</span>;</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x348*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_FAST_REF</span> <span class="title">Token</span>;</span>                            <span class="comment">// 快速引用, 指向该进程的访问令牌, 用于该进程的安全访问检查</span></span><br><span class="line"><span class="comment">/*0x350*/</span>     UINT64       WorkingSetPage;                          <span class="comment">// 包含进程工作集的页面</span></span><br><span class="line"><span class="comment">/*0x358*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span> <span class="title">AddressCreationLock</span>;</span>             <span class="comment">// 当内核代码需要对虚拟地址空间进行操作时, 它必须在 AddressCreationLock 上执行锁操作, 完成以后再解锁</span></span><br><span class="line"><span class="comment">/*0x360*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span> <span class="title">PageTableCommitmentLock</span>;</span>         <span class="comment">//</span></span><br><span class="line"><span class="comment">/*0x368*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">ETHREAD</span>* <span class="title">RotateInProgress</span>;</span></span><br><span class="line"><span class="comment">/*0x370*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">ETHREAD</span>* <span class="title">ForkInProgress</span>;</span>                      <span class="comment">// 正在复制地址空间的那个线程, 仅当在地址空间复制过程中, 此域才会被赋值, 在其他情况下为 NULL</span></span><br><span class="line"><span class="comment">/*0x378*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EJOB</span>* <span class="title">CommitChargeJob</span>;</span>                        <span class="comment">//</span></span><br><span class="line"><span class="comment">/*0x380*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">RTL_AVL_TREE</span> <span class="title">CloneRoot</span>;</span>                       <span class="comment">// 指向一个平衡树的根, 当进程地址空间复制时, 此树被创建, 创建出来以后, 一直到进程退出的时候才被销毁. 完全是为了支持 fork 语义而引入</span></span><br><span class="line"><span class="comment">/*0x388*/</span>     UINT64       NumberOfPrivatePages;                    <span class="comment">// 进程私有页面的数量</span></span><br><span class="line"><span class="comment">/*0x390*/</span>     UINT64       NumberOfLockedPages;                     <span class="comment">// 被锁住页面的数量</span></span><br><span class="line"><span class="comment">/*0x398*/</span>     VOID*        Win32Process;                            <span class="comment">// Win32k 进程结构体, 仅 GUI 进程有效</span></span><br><span class="line"><span class="comment">/*0x3A0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EJOB</span>* <span class="title">Job</span>;</span>                                    <span class="comment">// 只有当一个进程属于一个 Job (作业) 的时候, 它才会指向一个_EJOB 对象</span></span><br><span class="line"><span class="comment">/*0x3A8*/</span>     VOID*        SectionObject;                           <span class="comment">// 为可执行程序映像创建的文件映射区对象</span></span><br><span class="line"><span class="comment">/*0x3B0*/</span>     VOID*        SectionBaseAddress;                      <span class="comment">// 映射区对象基址</span></span><br><span class="line"><span class="comment">/*0x3B8*/</span>     ULONG32      Cookie;                                  <span class="comment">// 存放的是一个代表该进程的随机值, 当第一次通过 NtQueryInformationProcess 函数获取此 Cookie 值的时候, 系统会生成一个随机值, 以后就用该值代表此进程</span></span><br><span class="line"><span class="comment">/*0x3BC*/</span>     UINT8        _PADDING0_[<span class="number">0x4</span>];</span><br><span class="line"><span class="comment">/*0x3C0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">PAGEFAULT_HISTORY</span>* <span class="title">WorkingSetWatch</span>;</span>           <span class="comment">// 用于监视一个进程的页面错误, 一旦启用了页面错误监视功能 (由全局变量PsWatchEnabled 开关来控制),</span></span><br><span class="line">                                                                    <span class="comment">// 则每次发生页面错误都会将该页面错误记录到 WorkingSetWatch 域的WatchInfo 成员数组中,</span></span><br><span class="line">                                                                    <span class="comment">// 直至数组满为止 (参见 PsWatchWorkingSet 函数的代码)</span></span><br><span class="line"><span class="comment">/*0x3C8*/</span>     VOID*        Win32WindowStation;                      <span class="comment">// 一个进程所属的窗口站的句柄. 由于句柄的值是由每个进程的句柄表来决定的,</span></span><br><span class="line">                                                                    <span class="comment">// 所以两个进程即使同属于一个窗口站, 它们的 Win32WindowStation 值也可能不同, 但指向的窗口站对象是相同的.</span></span><br><span class="line">                                                                    <span class="comment">// 窗口站是由 Windows 子系统来管理和控制的</span></span><br><span class="line"><span class="comment">/*0x3D0*/</span>     VOID*        InheritedFromUniqueProcessId;            <span class="comment">// 父进程id</span></span><br><span class="line"><span class="comment">/*0x3D8*/</span>     VOID*        LdtInformation;                          <span class="comment">// LDT 局部描述符表</span></span><br><span class="line"><span class="comment">/*0x3E0*/</span>     UINT64       OwnerProcessId;                          <span class="comment">//</span></span><br><span class="line"><span class="comment">/*0x3E8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span>* <span class="title">Peb</span>;</span>                                     <span class="comment">// 进程环境块, 位于进程地址空间的内存块, 其中包含了有关进程地址空间中的堆和系统模块等信息</span></span><br><span class="line"><span class="comment">/*0x3F0*/</span>     VOID*        Session;                                 <span class="comment">// 向进程所在的系统会话, 实际上它是一个指向 MM_SESSION_SPACE 的指针, 每个进程在初始创建地址空间时会加入到当前的系统会话中</span></span><br><span class="line"><span class="comment">/*0x3F8*/</span>     VOID*        AweInfo;                                 <span class="comment">// 指向 AWEINFO 结构的指针, 其目的是支持 AWE (Address Windowing Extension, 地址窗口扩展)</span></span><br><span class="line"><span class="comment">/*0x400*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EPROCESS_QUOTA_BLOCK</span>* <span class="title">QuotaBlock</span>;</span>             <span class="comment">// 配额块</span></span><br><span class="line">                                                                    <span class="comment">// Windows 系统中的配额块相互串起来构成了一个双链表, 每个配额块都可以被多个进程共享,                                // 所以有一个引用计数值用来说明当前有多少个进程在使用这一配额块.</span></span><br><span class="line">                                                                    <span class="comment">// 配额块中主要定义了非换页内存池, 换页内存池和交换文件中的内存配额限制.</span></span><br><span class="line">                                                                    <span class="comment">// 系统的默认配额块为 PspDefaultQuotaBlock, 所有配额块构成的双链表的表头为 PspQuotaBlockList</span></span><br><span class="line"><span class="comment">/*0x408*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">HANDLE_TABLE</span>* <span class="title">ObjectTable</span>;</span>                    <span class="comment">// 进程句柄表</span></span><br><span class="line"><span class="comment">/*0x410*/</span>     VOID*        DebugPort;                               <span class="comment">// 调试端口</span></span><br><span class="line"><span class="comment">/*0x418*/</span>     VOID*        Wow64Process;                            <span class="comment">// Wow64Process 指向 32 位的 PEB32 的指针. 在 Wow64 程序中, 进程有两个 PEB, 一个是 64 位的, 一个是 32 位的.</span></span><br><span class="line"><span class="comment">/*0x420*/</span>     VOID*        DeviceMap;                               <span class="comment">// 指向进程使用的设备表, 通常情况下同一个会话中的进程共享同样的设备表</span></span><br><span class="line"><span class="comment">/*0x428*/</span>     VOID*        EtwDataSource;</span><br><span class="line"><span class="comment">/*0x430*/</span>     UINT64       PageDirectoryPte;                        <span class="comment">// 顶级页目录页面的页表项</span></span><br><span class="line"><span class="comment">/*0x438*/</span>     UINT8        ImageFileName[<span class="number">15</span>];                       <span class="comment">// 进程的映像文件名, 仅包含最后一个路径分隔符之后的字符串, 不超过 16 个字符 (含最后的结尾空字符)</span></span><br><span class="line"><span class="comment">/*0x447*/</span>     UINT8        PriorityClass;                           <span class="comment">// 进程优先级类别, 在 WRK 中包含以下类别:</span></span><br><span class="line">                                                                    <span class="comment">// 0: 未知, 1: 空闲, 2: 普通, 3: 高, 4: 实时, 5: 普通之下, 6: 普通之上</span></span><br><span class="line"><span class="comment">/*0x448*/</span>     VOID*        SecurityPort;                            <span class="comment">// 安全端口, 指向该进程与 lsass 进程之间的跨进程通信端口</span></span><br><span class="line"><span class="comment">/*0x450*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">SE_AUDIT_PROCESS_CREATION_INFO</span> <span class="title">SeAuditProcessCreationInfo</span>;</span> <span class="comment">// 包含了创建进程时指定的进程映像全路径名</span></span><br><span class="line"><span class="comment">/*0x458*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">JobLinks</span>;</span>                          <span class="comment">// 通过此节点, 一个 Job 中的所有进程构成了一个链表. 在 Windows 中, 所有的 Job 构成了一个双链表, 其链表头为全局变量 PspJobList; 每个 Job 中的进程又构成了一个双链表。</span></span><br><span class="line"><span class="comment">/*0x468*/</span>     VOID*        HighestUserAddress;                      <span class="comment">// 最高用户空间地址</span></span><br><span class="line"><span class="comment">/*0x470*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ThreadListHead</span>;</span>                    <span class="comment">// 双链表的头节点, 该链表包含了一个进程中的所有线程.</span></span><br><span class="line">                                                                    <span class="comment">// KPROCESS 结构中也有一个 ThreadListHead 域, 它所指的链表包含了各个子线程的 KTHREAD 结构中的 ThreadListEntry 节点</span></span><br><span class="line"><span class="comment">/*0x480*/</span>     ULONG32      ActiveThreads;                           <span class="comment">// 记录了当前进程有多少个活动线程. 当该值减为0 时, 所有的线程都将退出, 于是进程也退出</span></span><br><span class="line"><span class="comment">/*0x484*/</span>     ULONG32      ImagePathHash;</span><br><span class="line"><span class="comment">/*0x488*/</span>     ULONG32      DefaultHardErrorProcessing;              <span class="comment">// 指定了默认的硬件错误处理</span></span><br><span class="line"><span class="comment">/*0x48C*/</span>     LONG32       LastThreadExitStatus;                    <span class="comment">// 最后一个线程的退出状态</span></span><br><span class="line"><span class="comment">/*0x490*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_FAST_REF</span> <span class="title">PrefetchTrace</span>;</span>                    <span class="comment">// 指向与该进程关联的一个预取痕迹结构, 以支持该进程的预取</span></span><br><span class="line"><span class="comment">/*0x498*/</span>     VOID*        LockedPagesList;                         <span class="comment">// 一个指向LOCK_HEADER 结构的指针, 该结构包含了一个链表头, Windows 通过此链表来记录哪些页面已被锁住.</span></span><br><span class="line">                                                                    <span class="comment">// base\ntos\mm\iosup.c 中有一组函数用于管理此链表, 例如 MiAddMdlTracker, MiFreeMdlTracker 和 MiUpdateMdlTracker 等</span></span><br><span class="line"><span class="comment">/*0x4A0*/</span>     <span class="keyword">union</span> _LARGE_INTEGER ReadOperationCount;              <span class="comment">// 记录了当前进程 NtReadFile  系统服务被调用的次数</span></span><br><span class="line"><span class="comment">/*0x4A8*/</span>     <span class="keyword">union</span> _LARGE_INTEGER WriteOperationCount;             <span class="comment">// 记录了当前进程 NtWriteFile  系统服务被调用的次数</span></span><br><span class="line"><span class="comment">/*0x4B0*/</span>     <span class="keyword">union</span> _LARGE_INTEGER OtherOperationCount;             <span class="comment">// 记录了除读和写操作以外的其他 I/O 服务的次数</span></span><br><span class="line"><span class="comment">/*0x4B8*/</span>     <span class="keyword">union</span> _LARGE_INTEGER ReadTransferCount;               <span class="comment">// 记录了 I/O 读操作完成的次数</span></span><br><span class="line"><span class="comment">/*0x4C0*/</span>     <span class="keyword">union</span> _LARGE_INTEGER WriteTransferCount;              <span class="comment">// 记录了 I/O 写操作完成的次数</span></span><br><span class="line"><span class="comment">/*0x4C8*/</span>     <span class="keyword">union</span> _LARGE_INTEGER OtherTransferCount;              <span class="comment">// 记录了 I/O 非读写操作完成的次数</span></span><br><span class="line"><span class="comment">/*0x4D0*/</span>     UINT64       CommitChargeLimit;                       <span class="comment">// 已提交页面数量的限制值, 如果是0 则表示没有限制. 在WRK中, 默认的限制值为0</span></span><br><span class="line"><span class="comment">/*0x4D8*/</span>     UINT64       CommitCharge;                            <span class="comment">// 包含了一个进程的虚拟内存已提交的页面数量</span></span><br><span class="line"><span class="comment">/*0x4E0*/</span>     UINT64       CommitChargePeak;                        <span class="comment">// 尖峰时刻的已提交页面数量</span></span><br><span class="line"><span class="comment">/*0x4E8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">MMSUPPORT</span> <span class="title">Vm</span>;</span>                                 <span class="comment">// Windows 为每个进程管理虚拟内存的重要数据结构成员</span></span><br><span class="line"><span class="comment">/*0x5C0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">MmProcessLinks</span>;</span>                    <span class="comment">// 所有拥有自己地址空间的进程都将加入到一个双链表中, 链表头是全局变量 MmProcessList</span></span><br><span class="line">                                                                    <span class="comment">// 当进程地址空间被初始创建时, MmProcessLinks 节点被加入到此全局链表中</span></span><br><span class="line">                                                                    <span class="comment">// 当进程地址空间被销毁时, 该节点脱离此链表.</span></span><br><span class="line">                                                                    <span class="comment">// 此全局链表的存在使得 Windows 系统可以方便地执行一些全局的内存管理任务。</span></span><br><span class="line"><span class="comment">/*0x5D0*/</span>     ULONG32      ModifiedPageCount;                       <span class="comment">// 记录了该进程中已修改页面的数量</span></span><br><span class="line"><span class="comment">/*0x5D4*/</span>     LONG32       ExitStatus;                              <span class="comment">// 进程的退出状态</span></span><br><span class="line"><span class="comment">/*0x5D8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">RTL_AVL_TREE</span> <span class="title">VadRoot</span>;</span>                         <span class="comment">// 指向一个平衡二叉树的根, 用于管理该进程的虚拟地址空间</span></span><br><span class="line"><span class="comment">/*0x5E0*/</span>     VOID*        VadHint;</span><br><span class="line"><span class="comment">/*0x5E8*/</span>     UINT64       VadCount;</span><br><span class="line"><span class="comment">/*0x5F0*/</span>     UINT64       VadPhysicalPages;</span><br><span class="line"><span class="comment">/*0x5F8*/</span>     UINT64       VadPhysicalPagesLimit;</span><br><span class="line"><span class="comment">/*0x600*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">ALPC_PROCESS_CONTEXT</span> <span class="title">AlpcContext</span>;</span></span><br><span class="line"><span class="comment">/*0x620*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">TimerResolutionLink</span>;</span></span><br><span class="line"><span class="comment">/*0x630*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">PO_DIAG_STACK_RECORD</span>* <span class="title">TimerResolutionStackRecord</span>;</span></span><br><span class="line"><span class="comment">/*0x638*/</span>     ULONG32      RequestedTimerResolution;</span><br><span class="line"><span class="comment">/*0x63C*/</span>     ULONG32      SmallestTimerResolution;</span><br><span class="line"><span class="comment">/*0x640*/</span>     <span class="keyword">union</span> _LARGE_INTEGER ExitTime;                        <span class="comment">// 进程退出时间</span></span><br><span class="line"><span class="comment">/*0x648*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">INVERTED_FUNCTION_TABLE</span>* <span class="title">InvertedFunctionTable</span>;</span></span><br><span class="line"><span class="comment">/*0x650*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span> <span class="title">InvertedFunctionTableLock</span>;</span></span><br><span class="line"><span class="comment">/*0x658*/</span>     ULONG32      ActiveThreadsHighWatermark;</span><br><span class="line"><span class="comment">/*0x65C*/</span>     ULONG32      LargePrivateVadCount;</span><br><span class="line"><span class="comment">/*0x660*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span> <span class="title">ThreadListLock</span>;</span></span><br><span class="line"><span class="comment">/*0x668*/</span>     VOID*        WnfContext;</span><br><span class="line"><span class="comment">/*0x670*/</span>     UINT64       Spare0;</span><br><span class="line"><span class="comment">/*0x678*/</span>     UINT8        SignatureLevel;</span><br><span class="line"><span class="comment">/*0x679*/</span>     UINT8        SectionSignatureLevel;</span><br><span class="line"><span class="comment">/*0x67A*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">PS_PROTECTION</span> <span class="title">Protection</span>;</span></span><br><span class="line"><span class="comment">/*0x67B*/</span>     UINT8        SpareByte20[<span class="number">1</span>];</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x67C*/</span>         ULONG32      Flags3;</span><br><span class="line"><span class="comment">/*0x67C*/</span>         ULONG32      Minimal : <span class="number">1</span>;</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x680*/</span>     LONG32       SvmReserved;</span><br><span class="line"><span class="comment">/*0x684*/</span>     UINT8        _PADDING1_[<span class="number">0x4</span>];</span><br><span class="line"><span class="comment">/*0x688*/</span>     VOID*        SvmReserved1;</span><br><span class="line"><span class="comment">/*0x690*/</span>     UINT64       SvmReserved2;</span><br><span class="line"><span class="comment">/*0x698*/</span>     UINT64       LastFreezeInterruptTime;</span><br><span class="line"><span class="comment">/*0x6A0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_DISK_COUNTERS</span>* <span class="title">DiskCounters</span>;</span></span><br><span class="line"><span class="comment">/*0x6A8*/</span>     VOID*        PicoContext;</span><br><span class="line"><span class="comment">/*0x6B0*/</span>     ULONG32      KeepAliveCounter;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>     ULONG32      NoWakeKeepAliveCounter;</span><br><span class="line">          }EPROCESS, *PEPROCESS;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><figcaption><span>KPROCESS</span><a href="/Blog/downloads/code/KPROCESS.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Windows 8.1 x64 Checked Build*/</span></span><br><span class="line">          <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KPROCESS</span>                          // 42 <span class="title">elements</span>, 0<span class="title">x2C8</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">          {</span></span><br><span class="line"><span class="comment">/*0x000*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">DISPATCHER_HEADER</span> <span class="title">Header</span>;</span>             <span class="comment">// 分发头, 使进程称为可等待对象</span></span><br><span class="line"><span class="comment">/*0x018*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ProfileListHead</span>;</span>           <span class="comment">// 当该进程参与性能分析 (profiling) 时, 作为一个节点加入到全局的性能分析进程列表 KiProfileListHead 中</span></span><br><span class="line"><span class="comment">/*0x028*/</span>     UINT64       DirectoryTableBase;              <span class="comment">// 进程的页面映射表的物理地址, 在进行进程切换的时候, 会将此值赋值给 CR3 寄存器</span></span><br><span class="line"><span class="comment">/*0x030*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ThreadListHead</span>;</span>            <span class="comment">// 进程中所有线程的 KTHREAD 链表</span></span><br><span class="line"><span class="comment">/*0x040*/</span>     ULONG32      ProcessLock;                     <span class="comment">// 用于保护 KPROCESS 中的成员</span></span><br><span class="line"><span class="comment">/*0x044*/</span>     ULONG32      Spare0;</span><br><span class="line"><span class="comment">/*0x048*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">KAFFINITY_EX</span> <span class="title">Affinity</span>;</span>                <span class="comment">// 指定了该进程的线程可以在哪些处理器上运行, 其二进制表示的每一位分别对应于当前机器上的一个处理器或核</span></span><br><span class="line"><span class="comment">/*0x0F0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ReadyListHead</span>;</span>             <span class="comment">// 当前进程的就绪线程队列,</span></span><br><span class="line"><span class="comment">/*0x100*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">SINGLE_LIST_ENTRY</span> <span class="title">SwapListEntry</span>;</span>      <span class="comment">// 当一个进程要被换出内存时, 它通过此域加入到以 KiProcessOutSwapListHead 为链头的单链表中;</span></span><br><span class="line">                                                            <span class="comment">// 当一个进程要被换入内存时, 它通过此域加入到以 KiProcessInSwapListHead 为链头的单链表中.</span></span><br><span class="line"><span class="comment">/*0x108*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">KAFFINITY_EX</span> <span class="title">ActiveProcessors</span>;</span>        <span class="comment">// 记录了当前进程正在哪些处理器上运行</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x1B0*/</span>             LONG32       AutoAlignment : <span class="number">1</span>;       <span class="comment">// 内存访问对齐设置, 此值会传递到线程的数据结构中</span></span><br><span class="line"><span class="comment">/*0x1B0*/</span>             LONG32       DisableBoost : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x1B0*/</span>             LONG32       DisableQuantum : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x1B0*/</span>             LONG32       AffinitySet : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x1B0*/</span>             ULONG32      DeepFreeze : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x1B0*/</span>             ULONG32      TimerVirtualization : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x1B0*/</span>             ULONG32      CheckStackExtents : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x1B0*/</span>             ULONG32      ActiveGroupsMask : <span class="number">20</span>;</span><br><span class="line"><span class="comment">/*0x1B0*/</span>             LONG32       ReservedFlags : <span class="number">5</span>;</span><br><span class="line">                  };</span><br><span class="line"><span class="comment">/*0x1B0*/</span>         LONG32       ProcessFlags;</span><br><span class="line">              };</span><br><span class="line">                                                            <span class="comment">// BasePriority 和 QuantumReset 都是该进程中的线程的调度参数</span></span><br><span class="line"><span class="comment">/*0x1B4*/</span>     CHAR         BasePriority;                    <span class="comment">// 指定一个进程中的线程的基本优先级, 所有的线程在启动时都会继承进程的 BasePriority 值</span></span><br><span class="line"><span class="comment">/*0x1B5*/</span>     CHAR         QuantumReset;                    <span class="comment">// 指定一个进程中线程的基本时限重置值</span></span><br><span class="line"><span class="comment">/*0x1B6*/</span>     UINT8        Visited;</span><br><span class="line"><span class="comment">/*0x1B7*/</span>     <span class="keyword">union</span> _KEXECUTE_OPTIONS Flags;                <span class="comment">// 设置一个进程的内存执行选项</span></span><br><span class="line"><span class="comment">/*0x1B8*/</span>     ULONG32      ThreadSeed[<span class="number">20</span>];                  <span class="comment">// 为该进程的线程选择适当的理想处理器 (IdealProcessor), 在每个线程被初始化的时候, 都指定此进程的 ThreadSeed 值作为它的理想处理器, 然后ThreadSeed 域又被设置一个新的值, 以便该进程的下一个线程使用.</span></span><br><span class="line">                                                            <span class="comment">// 这里的理想处理器是指在多处理器环境下, 每个线程都有一个优先选择的处理器</span></span><br><span class="line"><span class="comment">/*0x208*/</span>     UINT16       IdealNode[<span class="number">20</span>];                   <span class="comment">// 用于为一个进程选择优先的处理器节点, 这是在进程初始化时设定的. 这里的处理器节点是 NUMA（非一致的内存访问）结构中的概念</span></span><br><span class="line"><span class="comment">/*0x230*/</span>     UINT16       IdealGlobalNode;</span><br><span class="line"><span class="comment">/*0x232*/</span>     UINT16       Spare1;</span><br><span class="line"><span class="comment">/*0x234*/</span>     <span class="keyword">union</span> _KSTACK_COUNT StackCount;               <span class="comment">// 记录了当前进程中有多少个线程的栈位于内存中</span></span><br><span class="line"><span class="comment">/*0x238*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ProcessListEntry</span>;</span>          <span class="comment">// 用于将当前系统中所有具有活动线程的进程串成一个链表, 链表头为KiProcessListHead</span></span><br><span class="line"><span class="comment">/*0x248*/</span>     UINT64       CycleTime;                       <span class="comment">// 周期时间</span></span><br><span class="line"><span class="comment">/*0x250*/</span>     UINT64       ContextSwitches;</span><br><span class="line"><span class="comment">/*0x258*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">KSCHEDULING_GROUP</span>* <span class="title">SchedulingGroup</span>;</span></span><br><span class="line"><span class="comment">/*0x260*/</span>     ULONG32      FreezeCount;</span><br><span class="line"><span class="comment">/*0x264*/</span>     ULONG32      KernelTime;                      <span class="comment">// 分别记录了一个进程对象在内核模式和用户模式下所花的时间. 进程的 KernelTime 和 UserTime 时间值等于其所属线程的对应 KernelTime 和UserTime 值的和.</span></span><br><span class="line"><span class="comment">/*0x268*/</span>     ULONG32      UserTime;                        <span class="comment">// 但是, 由于仅当一个线程结束时才更新其进程的这两个时间值, 所以, 若一个进程中尚未有任何一个线程结束, 则这两个域中的值为 0</span></span><br><span class="line"><span class="comment">/*0x26C*/</span>     UINT16       LdtFreeSelectorHint;</span><br><span class="line"><span class="comment">/*0x26E*/</span>     UINT16       LdtTableLength;                  <span class="comment">// LDT 长度</span></span><br><span class="line"><span class="comment">/*0x270*/</span>     <span class="keyword">union</span> _KGDTENTRY64 LdtSystemDescriptor;       <span class="comment">// LDT 系统描述符</span></span><br><span class="line"><span class="comment">/*0x280*/</span>     VOID*        LdtBaseAddress;                  <span class="comment">// LDT 基址</span></span><br><span class="line"><span class="comment">/*0x288*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">FAST_MUTEX</span> <span class="title">LdtProcessLock</span>;</span>            <span class="comment">// 进程的 LDT 锁</span></span><br><span class="line"><span class="comment">/*0x2C0*/</span>     VOID*        InstrumentationCallback;</span><br><span class="line">          }KPROCESS, *PKPROCESS;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><figcaption><span>PEB</span><a href="/Blog/downloads/code/PEB.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Windows 8.1 x64 Checked Build*/</span></span><br><span class="line">          <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span>                                               // 102 <span class="title">elements</span>, 0<span class="title">x388</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">          {</span></span><br><span class="line"><span class="comment">/*0x000*/</span>     UINT8        InheritedAddressSpace;</span><br><span class="line"><span class="comment">/*0x001*/</span>     UINT8        ReadImageFileExecOptions;</span><br><span class="line"><span class="comment">/*0x002*/</span>     UINT8        BeingDebugged;                                   <span class="comment">// 进程是否被调试</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x003*/</span>         UINT8        BitField;</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x003*/</span>             UINT8        ImageUsesLargePages : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x003*/</span>             UINT8        IsProtectedProcess : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x003*/</span>             UINT8        IsImageDynamicallyRelocated : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x003*/</span>             UINT8        SkipPatchingUser32Forwarders : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x003*/</span>             UINT8        IsPackagedProcess : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x003*/</span>             UINT8        IsAppContainer : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x003*/</span>             UINT8        IsProtectedProcessLight : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x003*/</span>             UINT8        SpareBits : <span class="number">1</span>;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x004*/</span>     UINT8        Padding0[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x008*/</span>     VOID*        Mutant;</span><br><span class="line"><span class="comment">/*0x010*/</span>     VOID*        ImageBaseAddress;                                <span class="comment">// 进程映像基址</span></span><br><span class="line"><span class="comment">/*0x018*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span>* <span class="title">Ldr</span>;</span>                                    <span class="comment">// 由 PELoader 填充, 包含很多 PE 中包含的信息, 一般用来Ring3枚举加载的模块</span></span><br><span class="line"><span class="comment">/*0x020*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">RTL_USER_PROCESS_PARAMETERS</span>* <span class="title">ProcessParameters</span>;</span>       <span class="comment">// 指向参数块, 包含有环境变量和当前目录等..在打开文件的时候, 如果给定的只是相对路径名, 那么就会以里面的 CurrentDirectory 为起点, 形成绝对路径.</span></span><br><span class="line"><span class="comment">/*0x028*/</span>     VOID*        SubSystemData;</span><br><span class="line"><span class="comment">/*0x030*/</span>     VOID*        ProcessHeap;                                     <span class="comment">// 指向进程堆首地址, 每个程序新建时默认堆使用</span></span><br><span class="line"><span class="comment">/*0x038*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">RTL_CRITICAL_SECTION</span>* <span class="title">FastPebLock</span>;</span>                    <span class="comment">// PEB 锁</span></span><br><span class="line"><span class="comment">/*0x040*/</span>     VOID*        AtlThunkSListPtr;</span><br><span class="line"><span class="comment">/*0x048*/</span>     VOID*        IFEOKey;</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x050*/</span>         ULONG32      CrossProcessFlags;</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x050*/</span>             ULONG32      ProcessInJob : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x050*/</span>             ULONG32      ProcessInitializing : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x050*/</span>             ULONG32      ProcessUsingVEH : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x050*/</span>             ULONG32      ProcessUsingVCH : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x050*/</span>             ULONG32      ProcessUsingFTH : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x050*/</span>             ULONG32      ReservedBits0 : <span class="number">27</span>;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x054*/</span>     UINT8        Padding1[<span class="number">4</span>];</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x058*/</span>         VOID*        KernelCallbackTable;                         <span class="comment">// 从内核“回调”用户空间的函数表</span></span><br><span class="line"><span class="comment">/*0x058*/</span>         VOID*        UserSharedInfoPtr;</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x060*/</span>     ULONG32      SystemReserved[<span class="number">1</span>];</span><br><span class="line"><span class="comment">/*0x064*/</span>     ULONG32      AtlThunkSListPtr32;</span><br><span class="line"><span class="comment">/*0x068*/</span>     VOID*        ApiSetMap;</span><br><span class="line"><span class="comment">/*0x070*/</span>     ULONG32      TlsExpansionCounter;</span><br><span class="line"><span class="comment">/*0x074*/</span>     UINT8        Padding2[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x078*/</span>     VOID*        TlsBitmap;                                       <span class="comment">// 代表TLS位图</span></span><br><span class="line"><span class="comment">/*0x080*/</span>     ULONG32      TlsBitmapBits[<span class="number">2</span>];</span><br><span class="line"><span class="comment">/*0x088*/</span>     VOID*        ReadOnlySharedMemoryBase;</span><br><span class="line"><span class="comment">/*0x090*/</span>     VOID*        SparePvoid0;</span><br><span class="line"><span class="comment">/*0x098*/</span>     VOID**       ReadOnlyStaticServerData;</span><br><span class="line"><span class="comment">/*0x0A0*/</span>     VOID*        AnsiCodePageData;                                <span class="comment">// 这三个好像是 Nls 表</span></span><br><span class="line"><span class="comment">/*0x0A8*/</span>     VOID*        OemCodePageData;</span><br><span class="line"><span class="comment">/*0x0B0*/</span>     VOID*        UnicodeCaseTableData;</span><br><span class="line"><span class="comment">/*0x0B8*/</span>     ULONG32      NumberOfProcessors;                              <span class="comment">// 处理器/核心 数量</span></span><br><span class="line"><span class="comment">/*0x0BC*/</span>     ULONG32      NtGlobalFlag;                                    <span class="comment">// Nt 全局标记, 开启调试时, 会包含值 0x70, 具体定义在 WRK-v1.2\public\sdk\inc\ntexapi.h 的 2657 行</span></span><br><span class="line"><span class="comment">/*0x0C0*/</span>     <span class="keyword">union</span> _LARGE_INTEGER CriticalSectionTimeout;</span><br><span class="line"><span class="comment">/*0x0C8*/</span>     UINT64       HeapSegmentReserve;                              <span class="comment">// 堆的默认保留大小</span></span><br><span class="line"><span class="comment">/*0x0D0*/</span>     UINT64       HeapSegmentCommit;                               <span class="comment">// 堆的默认提交大小</span></span><br><span class="line"><span class="comment">/*0x0D8*/</span>     UINT64       HeapDeCommitTotalFreeThreshold;                  <span class="comment">// 解除提交的总空闲块阈值</span></span><br><span class="line"><span class="comment">/*0x0E0*/</span>     UINT64       HeapDeCommitFreeBlockThreshold;                  <span class="comment">// 解除提交的单块阈值</span></span><br><span class="line"><span class="comment">/*0x0E8*/</span>     ULONG32      NumberOfHeaps;                                   <span class="comment">// 进程堆的数量</span></span><br><span class="line"><span class="comment">/*0x0EC*/</span>     ULONG32      MaximumNumberOfHeaps;                            <span class="comment">// ProcessHeaps 数组目前的大小</span></span><br><span class="line"><span class="comment">/*0x0F0*/</span>     VOID**       ProcessHeaps;                                    <span class="comment">// 一个数组, 记录了每一个堆的地址</span></span><br><span class="line"><span class="comment">/*0x0F8*/</span>     VOID*        GdiSharedHandleTable;</span><br><span class="line"><span class="comment">/*0x100*/</span>     VOID*        ProcessStarterHelper;</span><br><span class="line"><span class="comment">/*0x108*/</span>     ULONG32      GdiDCAttributeList;</span><br><span class="line"><span class="comment">/*0x10C*/</span>     UINT8        Padding3[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x110*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">RTL_CRITICAL_SECTION</span>* <span class="title">LoaderLock</span>;</span></span><br><span class="line"><span class="comment">/*0x118*/</span>     ULONG32      OSMajorVersion;                                  <span class="comment">// 系统主版本</span></span><br><span class="line"><span class="comment">/*0x11C*/</span>     ULONG32      OSMinorVersion;                                  <span class="comment">// 系统次版本</span></span><br><span class="line"><span class="comment">/*0x120*/</span>     UINT16       OSBuildNumber;                                   <span class="comment">// 系统构建号</span></span><br><span class="line"><span class="comment">/*0x122*/</span>     UINT16       OSCSDVersion;</span><br><span class="line"><span class="comment">/*0x124*/</span>     ULONG32      OSPlatformId;                                    <span class="comment">// 系统平台, VER_PLATFORM_WIN32_NT (2)</span></span><br><span class="line"><span class="comment">/*0x128*/</span>     ULONG32      ImageSubsystem;                                  <span class="comment">// 映像子系统, 在PE中有定义..例如, IMAGE_SUBSYSTEM_NATIVE(1), IMAGE_SUBSYSTEM_WINDOWS_GUI(2), IMAGE_SUBSYSTEM_WINDOWS_CUI(3)</span></span><br><span class="line"><span class="comment">/*0x12C*/</span>     ULONG32      ImageSubsystemMajorVersion;                      <span class="comment">// 映像子系统主版本</span></span><br><span class="line"><span class="comment">/*0x130*/</span>     ULONG32      ImageSubsystemMinorVersion;                      <span class="comment">// 映像子系统次版本</span></span><br><span class="line"><span class="comment">/*0x134*/</span>     UINT8        Padding4[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x138*/</span>     UINT64       ActiveProcessAffinityMask;                       <span class="comment">// 处理器亲和性掩码</span></span><br><span class="line"><span class="comment">/*0x140*/</span>     ULONG32      GdiHandleBuffer[<span class="number">60</span>];</span><br><span class="line"><span class="comment">/*0x230*/</span>     FUNCT_00BC_028C_PostProcessInitRoutine_DispatchAddress_FinishRoutine* PostProcessInitRoutine;</span><br><span class="line"><span class="comment">/*0x238*/</span>     VOID*        TlsExpansionBitmap;</span><br><span class="line"><span class="comment">/*0x240*/</span>     ULONG32      TlsExpansionBitmapBits[<span class="number">32</span>];</span><br><span class="line"><span class="comment">/*0x2C0*/</span>     ULONG32      SessionId;                                       <span class="comment">// 会话id</span></span><br><span class="line"><span class="comment">/*0x2C4*/</span>     UINT8        Padding5[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x2C8*/</span>     <span class="keyword">union</span> _ULARGE_INTEGER AppCompatFlags;                         <span class="comment">// 下面这4个是应用程序兼容性相关字段</span></span><br><span class="line"><span class="comment">/*0x2D0*/</span>     <span class="keyword">union</span> _ULARGE_INTEGER AppCompatFlagsUser;</span><br><span class="line"><span class="comment">/*0x2D8*/</span>     VOID*        pShimData;</span><br><span class="line"><span class="comment">/*0x2E0*/</span>     VOID*        AppCompatInfo;</span><br><span class="line"><span class="comment">/*0x2E8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">CSDVersion</span>;</span>                            <span class="comment">// 字符串, 例如 Service Pack 3</span></span><br><span class="line"><span class="comment">/*0x2F8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">ACTIVATION_CONTEXT_DATA</span>* <span class="title">ActivationContextData</span>;</span></span><br><span class="line"><span class="comment">/*0x300*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">ASSEMBLY_STORAGE_MAP</span>* <span class="title">ProcessAssemblyStorageMap</span>;</span></span><br><span class="line"><span class="comment">/*0x308*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">ACTIVATION_CONTEXT_DATA</span>* <span class="title">SystemDefaultActivationContextData</span>;</span></span><br><span class="line"><span class="comment">/*0x310*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">ASSEMBLY_STORAGE_MAP</span>* <span class="title">SystemAssemblyStorageMap</span>;</span></span><br><span class="line"><span class="comment">/*0x318*/</span>     UINT64       MinimumStackCommit;</span><br><span class="line"><span class="comment">/*0x320*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">FLS_CALLBACK_INFO</span>* <span class="title">FlsCallback</span>;</span>                       <span class="comment">// 纤程回调?</span></span><br><span class="line"><span class="comment">/*0x328*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">FlsListHead</span>;</span></span><br><span class="line"><span class="comment">/*0x338*/</span>     VOID*        FlsBitmap;                                       <span class="comment">// 纤程位图?</span></span><br><span class="line"><span class="comment">/*0x340*/</span>     ULONG32      FlsBitmapBits[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x350*/</span>     ULONG32      FlsHighIndex;</span><br><span class="line"><span class="comment">/*0x354*/</span>     UINT8        _PADDING0_[<span class="number">0x4</span>];</span><br><span class="line"><span class="comment">/*0x358*/</span>     VOID*        WerRegistrationData;</span><br><span class="line"><span class="comment">/*0x360*/</span>     VOID*        WerShipAssertPtr;</span><br><span class="line"><span class="comment">/*0x368*/</span>     VOID*        pUnused;</span><br><span class="line"><span class="comment">/*0x370*/</span>     VOID*        pImageHeaderHash;</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x378*/</span>         ULONG32      TracingFlags;</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x378*/</span>             ULONG32      HeapTracingEnabled : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x378*/</span>             ULONG32      CritSecTracingEnabled : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x378*/</span>             ULONG32      LibLoaderTracingEnabled : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x378*/</span>             ULONG32      SpareTracingBits : <span class="number">29</span>;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x37C*/</span>     UINT8        Padding6[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x380*/</span>     UINT64       CsrServerReadOnlySharedMemoryBase;</span><br><span class="line">          }PEB, *PPEB;</span><br></pre></td></tr></table></figure></div><h3 id="线程相关结构"><a href="#线程相关结构" class="headerlink" title="线程相关结构"></a>线程相关结构</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><figcaption><span>ETHREAD</span><a href="/Blog/downloads/code/ETHREAD.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Windows 8.1 x64 Checked Build*/</span></span><br><span class="line">          <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">ETHREAD</span>                                              // 100 <span class="title">elements</span>, 0<span class="title">x778</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">          {</span></span><br><span class="line"><span class="comment">/*0x000*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">KTHREAD</span> <span class="title">Tcb</span>;</span>                                             <span class="comment">// 线程控制块, 因为是 ETHREAD 的第一个字段, 所以 KTHREAD 和 ETHREAD 的地址是一样的</span></span><br><span class="line"><span class="comment">/*0x5D0*/</span>     <span class="keyword">union</span> _LARGE_INTEGER CreateTime;                                 <span class="comment">// 创建时间</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x5D8*/</span>         <span class="keyword">union</span> _LARGE_INTEGER ExitTime;                               <span class="comment">// 退出时间</span></span><br><span class="line"><span class="comment">/*0x5D8*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">KeyedWaitChain</span>;</span>                           <span class="comment">// 用于带键事件的等待链表</span></span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x5E8*/</span>     VOID*        ChargeOnlySession;</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x5F0*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">PostBlockList</span>;</span>                            <span class="comment">// 头节点, 该链表中的各个节点类型为PCM_POST_BLOCK, 它被用于一个线程向配置管理器登记注册表键的变化通知</span></span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x5F0*/</span>             VOID*        ForwardLinkShadow;</span><br><span class="line"><span class="comment">/*0x5F8*/</span>             VOID*        StartAddress;                               <span class="comment">// 包含了线程的启动地址, 这是真正的线程启动地址</span></span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x600*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">TERMINATION_PORT</span>* <span class="title">TerminationPort</span>;</span>                   <span class="comment">// 链表头, 当一个线程退出时, 系统会通知所有已经登记过要接收其终止事件的那些端口</span></span><br><span class="line"><span class="comment">/*0x600*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">ETHREAD</span>* <span class="title">ReaperLink</span>;</span>                                 <span class="comment">// 单链表节点, 它仅在线程退出时使用. 当线程被终止时, 该节点将被挂到 PsReaperListHead 链表上, 所以在线程回收器 (reaper) 的工作项目 (WorkItem) 中该线程的内核栈得以收回</span></span><br><span class="line"><span class="comment">/*0x600*/</span>         VOID*        KeyedWaitValue;                                 <span class="comment">// 带键事件的键值</span></span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x608*/</span>     UINT64       ActiveTimerListLock;                                <span class="comment">// ActiveTimerListHead 链表的自旋锁</span></span><br><span class="line"><span class="comment">/*0x610*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ActiveTimerListHead</span>;</span>                          <span class="comment">// 双链表的头, 链表中包含了当前线程的所有定时器</span></span><br><span class="line"><span class="comment">/*0x620*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">CLIENT_ID</span> <span class="title">Cid</span>;</span>                                           <span class="comment">// 客户id, 包含 进程id 和 线程id</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x630*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">KSEMAPHORE</span> <span class="title">KeyedWaitSemaphore</span>;</span>                       <span class="comment">// 信号量对象, 用于处理带键的事件</span></span><br><span class="line"><span class="comment">/*0x630*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">KSEMAPHORE</span> <span class="title">AlpcWaitSemaphore</span>;</span>                        <span class="comment">// 信号量对象, 用于 ALPC 应答通知</span></span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x650*/</span>     <span class="keyword">union</span> _PS_CLIENT_SECURITY_CONTEXT ClientSecurity;</span><br><span class="line"><span class="comment">/*0x658*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">IrpList</span>;</span>                                      <span class="comment">// 双链表头, 其中包含了当前线程所有正在处理但尚未完成的 I/O 请求 (IRP 对象)</span></span><br><span class="line"><span class="comment">/*0x668*/</span>     UINT64       TopLevelIrp;                                        <span class="comment">// 指向线程的顶级IRP, 它或者指向 NULL 或一个 IRP</span></span><br><span class="line">                                                                               <span class="comment">// 或者包含了 fsrtl.h 中定义的标记 FSRTL_FAST_IO_TOP_LEVEL_IRP 或 FSRTL_FSP_TOP_LEVEL_IRP.</span></span><br><span class="line">                                                                               <span class="comment">// 仅当一个线程的 I/O 调用层次中最顶级的组件是文件系统时, 才指向当前IRP</span></span><br><span class="line"><span class="comment">/*0x670*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">DEVICE_OBJECT</span>* <span class="title">DeviceToVerify</span>;</span>                           <span class="comment">// 指向一个待检验的设备对象, 当磁盘或 CD-ROM 设备的驱动程序发现自从上一次该线程访问该设备以来, 该设备似乎有了变化, 就会设置线程的 DeviceToVerify 域, 从而使最高层的驱动程序, 比如文件系统, 可以检测到设备的变化</span></span><br><span class="line"><span class="comment">/*0x678*/</span>     VOID*        Win32StartAddress;                                  <span class="comment">// Windows 子系统的启动地址</span></span><br><span class="line"><span class="comment">/*0x680*/</span>     VOID*        LegacyPowerObject;</span><br><span class="line"><span class="comment">/*0x688*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ThreadListEntry</span>;</span>                              <span class="comment">// 挂入 EPROCESS 中的线程链表</span></span><br><span class="line"><span class="comment">/*0x698*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_RUNDOWN_REF</span> <span class="title">RundownProtect</span>;</span>                           <span class="comment">// 线程的停止保护锁, 对于跨线程引用 TEB 结构或者挂起线程的执行等操作, 需要获得此锁才能进行, 以避免在操作过程中线程被销毁</span></span><br><span class="line"><span class="comment">/*0x6A0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EX_PUSH_LOCK</span> <span class="title">ThreadLock</span>;</span>                                 <span class="comment">// 用于保护线程的数据属性, 例如 PspLockThreadSecurityExclusive 和 PspLockThreadSecurityShared 利用该域来保护线程的安全属性</span></span><br><span class="line"><span class="comment">/*0x6A8*/</span>     ULONG32      ReadClusterSize;                                    <span class="comment">// 指明了在一次I/O操作中读取多少个页面, 用于页面交换文件和内存映射文件的读操作</span></span><br><span class="line"><span class="comment">/*0x6AC*/</span>     LONG32       MmLockOrdering;</span><br><span class="line"><span class="comment">/*0x6B0*/</span>     LONG32       CmLockOrdering;</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x6B4*/</span>         ULONG32      CrossThreadFlags;                               <span class="comment">// 一些针对跨线程访问的标志位</span></span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      Terminated : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      ThreadInserted : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      HideFromDebugger : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      ActiveImpersonationInfo : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      HardErrorsAreDisabled : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      BreakOnTermination : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      SkipCreationMsg : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      SkipTerminationMsg : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      CopyTokenOnOpen : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      ThreadIoPriority : <span class="number">3</span>;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      ThreadPagePriority : <span class="number">3</span>;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      RundownFail : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      UmsForceQueueTermination : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B4*/</span>             ULONG32      ReservedCrossThreadFlags : <span class="number">15</span>;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x6B8*/</span>         ULONG32      SameThreadPassiveFlags;                         <span class="comment">// 一些只有在PASSIVE级别上才可以访问的标志位, 并且只能被该线程自身访问, 所以对这些标志位的访问不需要互锁操作</span></span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x6B8*/</span>             ULONG32      ActiveExWorker : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B8*/</span>             ULONG32      MemoryMaker : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B8*/</span>             ULONG32      ClonedThread : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B8*/</span>             ULONG32      KeyedEventInUse : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6B8*/</span>             ULONG32      SelfTerminate : <span class="number">1</span>;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x6BC*/</span>         ULONG32      SameThreadApcFlags;                             <span class="comment">// 一些在 APC 中断级别上被该线程自身访问的标志位, 同样地对这些标志位的访问也不需要互锁操作</span></span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line">                      <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                      {</span></span><br><span class="line"><span class="comment">/*0x6BC*/</span>                 UINT8        HardFaultBehavior : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BC*/</span>                 UINT8        StartAddressInvalid : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BC*/</span>                 UINT8        EtwCalloutActive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BC*/</span>                 UINT8        OwnsProcessWorkingSetExclusive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BC*/</span>                 UINT8        OwnsProcessWorkingSetShared : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BC*/</span>                 UINT8        OwnsSystemCacheWorkingSetExclusive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BC*/</span>                 UINT8        OwnsSystemCacheWorkingSetShared : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BC*/</span>                 UINT8        OwnsSessionWorkingSetExclusive : <span class="number">1</span>;</span><br><span class="line">                      };</span><br><span class="line">                      <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                      {</span></span><br><span class="line"><span class="comment">/*0x6BD*/</span>                 UINT8        OwnsSessionWorkingSetShared : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BD*/</span>                 UINT8        OwnsProcessAddressSpaceExclusive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BD*/</span>                 UINT8        OwnsProcessAddressSpaceShared : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BD*/</span>                 UINT8        SuppressSymbolLoad : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BD*/</span>                 UINT8        Prefetching : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BD*/</span>                 UINT8        OwnsVadExclusive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BD*/</span>                 UINT8        OwnsChangeControlAreaExclusive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BD*/</span>                 UINT8        OwnsChangeControlAreaShared : <span class="number">1</span>;</span><br><span class="line">                      };</span><br><span class="line">                      <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                      {</span></span><br><span class="line"><span class="comment">/*0x6BE*/</span>                 UINT8        OwnsPagedPoolWorkingSetExclusive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BE*/</span>                 UINT8        OwnsPagedPoolWorkingSetShared : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BE*/</span>                 UINT8        OwnsSystemPtesWorkingSetExclusive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BE*/</span>                 UINT8        OwnsSystemPtesWorkingSetShared : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BE*/</span>                 UINT8        TrimTrigger : <span class="number">2</span>;</span><br><span class="line"><span class="comment">/*0x6BE*/</span>                 UINT8        Spare2 : <span class="number">2</span>;</span><br><span class="line">                      };</span><br><span class="line">                      <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                      {</span></span><br><span class="line"><span class="comment">/*0x6BF*/</span>                 UINT8        SystemPagePriorityActive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x6BF*/</span>                 UINT8        SystemPagePriority : <span class="number">3</span>;</span><br><span class="line"><span class="comment">/*0x6BF*/</span>                 UINT8        Spare3 : <span class="number">4</span>;</span><br><span class="line">                      };</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x6C0*/</span>     UINT8        CacheManagerActive;</span><br><span class="line"><span class="comment">/*0x6C1*/</span>     UINT8        DisablePageFaultClustering;                         <span class="comment">// 用于控制页面交换的聚集与否</span></span><br><span class="line"><span class="comment">/*0x6C2*/</span>     UINT8        ActiveFaultCount;                                   <span class="comment">// 包含了正在进行之中的页面错误数量</span></span><br><span class="line"><span class="comment">/*0x6C3*/</span>     UINT8        LockOrderState;</span><br><span class="line"><span class="comment">/*0x6C4*/</span>     UINT8        _PADDING0_[<span class="number">0x4</span>];</span><br><span class="line"><span class="comment">/*0x6C8*/</span>     UINT64       AlpcMessageId;</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x6D0*/</span>         VOID*        AlpcMessage;</span><br><span class="line"><span class="comment">/*0x6D0*/</span>         ULONG32      AlpcReceiveAttributeSet;</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x6D8*/</span>     LONG32       ExitStatus;                                         <span class="comment">// 退出状态码</span></span><br><span class="line"><span class="comment">/*0x6DC*/</span>     UINT8        _PADDING1_[<span class="number">0x4</span>];</span><br><span class="line"><span class="comment">/*0x6E0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">AlpcWaitListEntry</span>;</span></span><br><span class="line"><span class="comment">/*0x6F0*/</span>     ULONG32      CacheManagerCount;</span><br><span class="line"><span class="comment">/*0x6F4*/</span>     ULONG32      IoBoostCount;</span><br><span class="line"><span class="comment">/*0x6F8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">BoostList</span>;</span></span><br><span class="line"><span class="comment">/*0x708*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">DeboostList</span>;</span></span><br><span class="line"><span class="comment">/*0x718*/</span>     UINT64       BoostListLock;</span><br><span class="line"><span class="comment">/*0x720*/</span>     UINT64       IrpListLock;                                        <span class="comment">// IrpListLock 的锁</span></span><br><span class="line"><span class="comment">/*0x728*/</span>     VOID*        ReservedForSynchTracking;</span><br><span class="line"><span class="comment">/*0x730*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">SINGLE_LIST_ENTRY</span> <span class="title">CmCallbackListHead</span>;</span></span><br><span class="line"><span class="comment">/*0x738*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">GUID</span>* <span class="title">ActivityId</span>;</span></span><br><span class="line"><span class="comment">/*0x740*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">SINGLE_LIST_ENTRY</span> <span class="title">SeLearningModeListHead</span>;</span></span><br><span class="line"><span class="comment">/*0x748*/</span>     VOID*        VerifierContext;</span><br><span class="line"><span class="comment">/*0x750*/</span>     ULONG32      KernelStackReference;</span><br><span class="line"><span class="comment">/*0x754*/</span>     UINT8        _PADDING2_[<span class="number">0x4</span>];</span><br><span class="line"><span class="comment">/*0x758*/</span>     VOID*        AdjustedClientToken;                                <span class="comment">// 线程的 Token</span></span><br><span class="line"><span class="comment">/*0x760*/</span>     ULONG32      UserFsBase;                                         <span class="comment">// fs 寄存器基址?</span></span><br><span class="line"><span class="comment">/*0x764*/</span>     UINT8        _PADDING3_[<span class="number">0x4</span>];</span><br><span class="line"><span class="comment">/*0x768*/</span>     UINT64       UserGsBase;                                         <span class="comment">// gs 寄存器基址?</span></span><br><span class="line"><span class="comment">/*0x770*/</span>     VOID*        PicoContext;</span><br><span class="line">          }ETHREAD, *PETHREAD;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><figcaption><span>KTHREAD</span><a href="/Blog/downloads/code/KTHREAD.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Windows 8.1 x64 Checked Build*/</span></span><br><span class="line">          <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KTHREAD</span>                                            // 162 <span class="title">elements</span>, 0<span class="title">x5D0</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">          {</span></span><br><span class="line"><span class="comment">/*0x000*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">DISPATCHER_HEADER</span> <span class="title">Header</span>;</span>                              <span class="comment">// 分发头, 使其成为可等待对象</span></span><br><span class="line"><span class="comment">/*0x018*/</span>     VOID*        SListFaultAddress;                                <span class="comment">// 与用户模式互锁单链表 POP 操作 (KeUserPopEntrySListFault函数) 的错误处理有关, 它记录了上一次用户模式互锁单链表 POP 操作发生页面错误的地址</span></span><br><span class="line"><span class="comment">/*0x020*/</span>     UINT64       QuantumTarget;</span><br><span class="line">                                                                             <span class="comment">// 有四个域用于内核栈的维护, 它们分别是: InitialStack, StackLimit, KernelStack 和StackBase</span></span><br><span class="line">                                                                             <span class="comment">// 在线程初始化时, InitialStack 和 StackBase 是相等的, 都指向原始的内核栈高地址</span></span><br><span class="line"><span class="comment">/*0x028*/</span>     VOID*        InitialStack;                                     <span class="comment">// 记录了原始的内核栈位置</span></span><br><span class="line"><span class="comment">/*0x030*/</span>     VOID*        StackLimit;                                       <span class="comment">// 记录了内核栈的低地址</span></span><br><span class="line"><span class="comment">/*0x038*/</span>     VOID*        StackBase;                                        <span class="comment">// 记录了当前内核栈的基地址</span></span><br><span class="line"><span class="comment">/*0x040*/</span>     UINT64       ThreadLock;                                       <span class="comment">// 一个自旋锁, 用于保护线程数据成员</span></span><br><span class="line"><span class="comment">/*0x048*/</span>     UINT64       CycleTime;                                        <span class="comment">// 周期时间</span></span><br><span class="line"><span class="comment">/*0x050*/</span>     ULONG32      CurrentRunTime;                                   <span class="comment">// 当前运行时间</span></span><br><span class="line"><span class="comment">/*0x054*/</span>     ULONG32      ExpectedRunTime;                                  <span class="comment">// 预期运行时间</span></span><br><span class="line"><span class="comment">/*0x058*/</span>     VOID*        KernelStack;                                      <span class="comment">// 记录了真正内核调用栈的开始位置, 由于在内核栈的顶部区域还记录了浮点处理器保存区和一个异常陷阱帧,</span></span><br><span class="line">                                                                             <span class="comment">// 所以 KernelStack 的位置比 InitialStack 要低一些 (KTRAP_FRAME_LENGTH + sizeof(FX_SAVE_AREA))</span></span><br><span class="line"><span class="comment">/*0x060*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">XSAVE_FORMAT</span>* <span class="title">StateSaveArea</span>;</span></span><br><span class="line"><span class="comment">/*0x068*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">KSCHEDULING_GROUP</span>* <span class="title">SchedulingGroup</span>;</span></span><br><span class="line"><span class="comment">/*0x070*/</span>     <span class="keyword">union</span> _KWAIT_STATUS_REGISTER WaitRegister;</span><br><span class="line"><span class="comment">/*0x071*/</span>     UINT8        Running;</span><br><span class="line"><span class="comment">/*0x072*/</span>     UINT8        Alerted[<span class="number">2</span>];                                       <span class="comment">// 一个数组, 指定了该线程在每一种警告模式下是否可以被唤醒, 数组的含义是指该线程分别在内核模式和用户模式下是否可以被唤醒</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      KernelStackResident : <span class="number">1</span>;                  <span class="comment">// 该线程的内核栈是否驻留在内存中, 当内核栈被换出内存时, 该值将被置成 FALSE, 当换入内存时再置成TRUE</span></span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      ReadyTransition : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      ProcessReadyQueue : <span class="number">1</span>;                    <span class="comment">// 一个线程是否在所属进程 KPROCESS 对象的 ReadyListHead 链表中, TRUE 表示在此链表中, FALSE 表示不在</span></span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      WaitNext : <span class="number">1</span>;                             <span class="comment">// 表示这个线程马上要调用一个内核等待函数, 它的用途是在发出了一个信号 (比如释放了一个信号量对象) 以后,</span></span><br><span class="line">                                                                             <span class="comment">// 接下来该线程会马上调用等待函数, 所以它不必解除线程调度器锁</span></span><br><span class="line">                                                                             <span class="comment">// KeSetEvent 的 Wait 参数就是这个</span></span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      SystemAffinityActive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      Alertable : <span class="number">1</span>;                            <span class="comment">// 一个线程是否可以被唤醒, 当一个线程正在等待时, 如果它的 Alertable 值为 TRUE, 则它可以被唤醒</span></span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      UserStackWalkActive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      ApcInterruptRequest : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      QuantumEndMigrate : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      UmsDirectedSwitchEnable : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      TimerActive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      SystemThread : <span class="number">1</span>;                         <span class="comment">// 是否为系统线程</span></span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      ProcessDetachActive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      CalloutActive : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      ScbReadyQueue : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      ApcQueueable : <span class="number">1</span>;                         <span class="comment">// 是否可以插入APC</span></span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      ReservedStackInUse : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      UmsPerformingSyscall : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      ApcPendingReload : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x074*/</span>             ULONG32      Reserved : <span class="number">13</span>;</span><br><span class="line">                  };</span><br><span class="line"><span class="comment">/*0x074*/</span>         LONG32       MiscFlags;</span><br><span class="line">              };</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      AutoAlignment : <span class="number">1</span>;                        <span class="comment">// 继承自 KPROCESS, 内存访问对其设置</span></span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      DisableBoost : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      UserAffinitySet : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      AlertedByThreadId : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      QuantumDonation : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      EnableStackSwap : <span class="number">1</span>;                      <span class="comment">// 本线程的内核栈是否允许被换出</span></span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      GuiThread : <span class="number">1</span>;                            <span class="comment">// 是否 GUI 线程</span></span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      DisableQuantum : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      ChargeOnlySchedulingGroup : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      DeferPreemption : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      QueueDeferPreemption : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      ForceDeferSchedule : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      SharedReadyQueueAffinity : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      FreezeCount : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      TerminationApcRequest : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      AutoBoostEntriesExhausted : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      EtwStackTraceApcInserted : <span class="number">8</span>;</span><br><span class="line"><span class="comment">/*0x078*/</span>             ULONG32      ReservedFlags : <span class="number">8</span>;</span><br><span class="line">                  };</span><br><span class="line"><span class="comment">/*0x078*/</span>         LONG32       ThreadFlags;</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x07C*/</span>     ULONG32      Spare0;</span><br><span class="line"><span class="comment">/*0x080*/</span>     ULONG32      SystemCallNumber;                                 <span class="comment">// 进行系统调用时的系统调用号</span></span><br><span class="line"><span class="comment">/*0x084*/</span>     ULONG32      Spare1;</span><br><span class="line"><span class="comment">/*0x088*/</span>     VOID*        FirstArgument;                                    <span class="comment">// 进行系统调用时的首个调用参数</span></span><br><span class="line"><span class="comment">/*0x090*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">KTRAP_FRAME</span>* <span class="title">TrapFrame</span>;</span>                                <span class="comment">// 系统空间堆栈上的陷阱帧</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x098*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">KAPC_STATE</span> <span class="title">ApcState</span>;</span>                               <span class="comment">// 指定了一个线程的APC信息, 包括APC 链表, 是否正在处理 APC 或者是否有内核 APC 或用户 APC 正在等待等信息</span></span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x098*/</span>             UINT8        ApcStateFill[<span class="number">43</span>];</span><br><span class="line"><span class="comment">/*0x0C3*/</span>             CHAR         Priority;                                 <span class="comment">// 包含了该线程的优先级值, 这是指它的动态优先级, 即在执行过程中可能由于某些原因而调整过的优先级</span></span><br><span class="line"><span class="comment">/*0x0C4*/</span>             ULONG32      UserIdealProcessor;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x0C8*/</span>     INT64        WaitStatus;                                       <span class="comment">// 记录了等待的结果状态</span></span><br><span class="line"><span class="comment">/*0x0D0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">KWAIT_BLOCK</span>* <span class="title">WaitBlockList</span>;</span>                            <span class="comment">// 成员指向一个以 KWAIT_BLOCK 为元素的链表, 其中的 KWAIT_BLOCK 对象指明了哪个线程在等待哪个分发器对象</span></span><br><span class="line">                                                                             <span class="comment">// 对于一个线程而言, WaitBlockList 域以及每个 KWAIT_BLOCK 对象中的 WaitListEntry 域构成了一个双链表, 指明了该线程正在等待哪些分发器对象</span></span><br><span class="line">                                                                             <span class="comment">// 而对于每个分发器对象而言, 它又有另一个KWAIT_BLOCK链表指明了哪些线程正在等待它。</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x0D8*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">WaitListEntry</span>;</span>                          <span class="comment">// 一个线程节点加入到某个链表中.</span></span><br><span class="line">                                                                             <span class="comment">// 例如, KPROCESS 的 ReadyListHead 域时曾提到, 在进程被换入内存过程中, 就绪状态的线程将被加入到以进程的 ReadyListHead 域为链表头的双链表中,</span></span><br><span class="line">                                                                             <span class="comment">// 链表中的节点即为线程的 WaitListEntry 域</span></span><br><span class="line"><span class="comment">/*0x0D8*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">SINGLE_LIST_ENTRY</span> <span class="title">SwapListEntry</span>;</span>                   <span class="comment">// 被用于当线程的内核栈需要被换入时, 插入到以全局变量 KiStackInSwapListHead 为链表头的单链表中.</span></span><br><span class="line">                                                                             <span class="comment">// 另外, 当一个线程处于 DeferredReady 状态时, 其 SwapListEntry 将被插入到某个处理器的DeferredReadyListHead 链表中 (参见 KiInsertDeferredReadyList 和KiProcessDeferredReadyList 内核函数)</span></span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x0E8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">DISPATCHER_HEADER</span>* <span class="title">Queue</span>;</span>                              <span class="comment">// 一个队列分发器对象, 如果不为NULL, 则表示当前线程正在处理此队列对象中的项</span></span><br><span class="line"><span class="comment">/*0x0F0*/</span>     VOID*        Teb;                                              <span class="comment">// 线程环境块, TEB结构包含了在用户地址空间中需要访问的各种信息</span></span><br><span class="line"><span class="comment">/*0x0F8*/</span>     UINT64       RelativeTimerBias;</span><br><span class="line"><span class="comment">/*0x100*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">KTIMER</span> <span class="title">Timer</span>;</span>                                          <span class="comment">// 这是附在一个线程上的定时器, 当一个线程在执行过程中需要定时器时,</span></span><br><span class="line">                                                                             <span class="comment">// 比如实现可超时的等待函数 (KeWaitForSingleObject 或 KeWaitForMultipleObjects), 就会用到此定时器对象.</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x140*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">KWAIT_BLOCK</span> <span class="title">WaitBlock</span>[4];</span>                          <span class="comment">// 包含4 个 KWAIT_BLOCK 成员的数组, 其中第4 项专门用于可等待的定时器对象</span></span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x140*/</span>             UINT8        WaitBlockFill4[<span class="number">20</span>];</span><br><span class="line"><span class="comment">/*0x154*/</span>             ULONG32      ContextSwitches;</span><br><span class="line"><span class="comment">/*0x158*/</span>             UINT8        _PADDING0_[<span class="number">0xA8</span>];</span><br><span class="line">                  };</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x140*/</span>             UINT8        WaitBlockFill5[<span class="number">68</span>];</span><br><span class="line"><span class="comment">/*0x184*/</span>             UINT8        State;</span><br><span class="line"><span class="comment">/*0x185*/</span>             CHAR         NpxState;</span><br><span class="line"><span class="comment">/*0x186*/</span>             UINT8        WaitIrql;</span><br><span class="line"><span class="comment">/*0x187*/</span>             CHAR         WaitMode;</span><br><span class="line"><span class="comment">/*0x188*/</span>             UINT8        _PADDING1_[<span class="number">0x78</span>];</span><br><span class="line">                  };</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x140*/</span>             UINT8        WaitBlockFill6[<span class="number">116</span>];</span><br><span class="line"><span class="comment">/*0x1B4*/</span>             ULONG32      WaitTime;</span><br><span class="line"><span class="comment">/*0x1B8*/</span>             UINT8        _PADDING2_[<span class="number">0x48</span>];</span><br><span class="line">                  };</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x140*/</span>             UINT8        WaitBlockFill7[<span class="number">164</span>];</span><br><span class="line">                      <span class="keyword">union</span></span><br><span class="line">                      {</span><br><span class="line">                          <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                          {</span></span><br><span class="line"><span class="comment">/*0x1E4*/</span>                     INT16        KernelApcDisable;</span><br><span class="line"><span class="comment">/*0x1E6*/</span>                     INT16        SpecialApcDisable;</span><br><span class="line">                          };</span><br><span class="line"><span class="comment">/*0x1E4*/</span>                 ULONG32      CombinedApcDisable;</span><br><span class="line">                      };</span><br><span class="line">                  };</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x140*/</span>             UINT8        WaitBlockFill8[<span class="number">40</span>];</span><br><span class="line"><span class="comment">/*0x168*/</span>             <span class="class"><span class="keyword">struct</span> _<span class="title">KTHREAD_COUNTERS</span>* <span class="title">ThreadCounters</span>;</span></span><br><span class="line"><span class="comment">/*0x170*/</span>             UINT8        _PADDING3_[<span class="number">0x90</span>];</span><br><span class="line">                  };</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x140*/</span>             UINT8        WaitBlockFill9[<span class="number">88</span>];</span><br><span class="line"><span class="comment">/*0x198*/</span>             <span class="class"><span class="keyword">struct</span> _<span class="title">XSTATE_SAVE</span>* <span class="title">XStateSave</span>;</span></span><br><span class="line"><span class="comment">/*0x1A0*/</span>             UINT8        _PADDING4_[<span class="number">0x60</span>];</span><br><span class="line">                  };</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x140*/</span>             UINT8        WaitBlockFill10[<span class="number">136</span>];</span><br><span class="line"><span class="comment">/*0x1C8*/</span>             VOID*        Win32Thread;                                <span class="comment">// 本线程的 W32THREAD 结构</span></span><br><span class="line"><span class="comment">/*0x1D0*/</span>             UINT8        _PADDING5_[<span class="number">0x30</span>];</span><br><span class="line">                  };</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x140*/</span>             UINT8        WaitBlockFill11[<span class="number">176</span>];</span><br><span class="line"><span class="comment">/*0x1F0*/</span>             <span class="class"><span class="keyword">struct</span> _<span class="title">UMS_CONTROL_BLOCK</span>* <span class="title">Ucb</span>;</span></span><br><span class="line"><span class="comment">/*0x1F8*/</span>             <span class="class"><span class="keyword">struct</span> _<span class="title">KUMS_CONTEXT_HEADER</span>* <span class="title">Uch</span>;</span></span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x200*/</span>     VOID*        TebMappedLowVa;</span><br><span class="line"><span class="comment">/*0x208*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">QueueListEntry</span>;</span>                               <span class="comment">// 记录了线程在处理一个队列项时加入到队列对象的线程链表中的节点地址</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x218*/</span>         ULONG32      NextProcessor;                                  <span class="comment">// 处理器调度的选择</span></span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x218*/</span>             ULONG32      NextProcessorNumber : <span class="number">31</span>;                   <span class="comment">// 下一个处理器号</span></span><br><span class="line"><span class="comment">/*0x218*/</span>             ULONG32      SharedReadyQueue : <span class="number">1</span>;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x21C*/</span>     LONG32       QueuePriority;</span><br><span class="line"><span class="comment">/*0x220*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">KPROCESS</span>* <span class="title">Process</span>;</span>                                       <span class="comment">// 所属进程 KPROCESS</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x228*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">GROUP_AFFINITY</span> <span class="title">UserAffinity</span>;</span>                         <span class="comment">// 线程的用户亲和性, 此值初始时也继承自进程对象的Affinity 值, 以后可通过内核函数KeSetAffinityThread 改变</span></span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x228*/</span>             UINT8        UserAffinityFill[<span class="number">10</span>];</span><br><span class="line"><span class="comment">/*0x232*/</span>             CHAR         PreviousMode;</span><br><span class="line"><span class="comment">/*0x233*/</span>             CHAR         BasePriority;</span><br><span class="line">                      <span class="keyword">union</span></span><br><span class="line">                      {</span><br><span class="line"><span class="comment">/*0x234*/</span>                 CHAR         PriorityDecrement;</span><br><span class="line">                          <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                          {</span></span><br><span class="line"><span class="comment">/*0x234*/</span>                     UINT8        ForegroundBoost : <span class="number">4</span>;</span><br><span class="line"><span class="comment">/*0x234*/</span>                     UINT8        UnusualBoost : <span class="number">4</span>;</span><br><span class="line">                          };</span><br><span class="line">                      };</span><br><span class="line"><span class="comment">/*0x235*/</span>             UINT8        Preempted;</span><br><span class="line"><span class="comment">/*0x236*/</span>             UINT8        AdjustReason;</span><br><span class="line"><span class="comment">/*0x237*/</span>             CHAR         AdjustIncrement;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x238*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">GROUP_AFFINITY</span> <span class="title">Affinity</span>;</span>                             <span class="comment">// 线程的处理器亲和性, 此值初始时继承自进程对象的Affinity 值. 为线程指定的处理器集合必须是其进程的亲和性处理器集合的子集.</span></span><br><span class="line">                                                                               <span class="comment">// 在线程执行过程中, 其 Affinity 值可能有两种设置:</span></span><br><span class="line">                                                                               <span class="comment">// 一是系统亲和性,  当该线程执行系统任务时通过 KeSetSystemAffinityThread 函数来设置</span></span><br><span class="line">                                                                               <span class="comment">// 二是线程本身的亲和性, 称为用户亲和性, 通过 KeRevertToUserAffinityThread 函数来设置</span></span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x238*/</span>             UINT8        AffinityFill[<span class="number">10</span>];</span><br><span class="line"><span class="comment">/*0x242*/</span>             UINT8        ApcStateIndex;                              <span class="comment">// 指明了当前的 APC 状态在ApcStatePointer 域中的索引</span></span><br><span class="line"><span class="comment">/*0x243*/</span>             UINT8        WaitBlockCount;</span><br><span class="line"><span class="comment">/*0x244*/</span>             ULONG32      IdealProcessor;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x248*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">KAPC_STATE</span>* <span class="title">ApcStatePointer</span>[2];</span>                          <span class="comment">// 数组元素的类型是指向 KAPC_STATE 的指针, 其两个元素分别指向线程对象的 ApcState 和SavedApcState 域, 而这两个域分别位于两个union 中</span></span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x258*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">KAPC_STATE</span> <span class="title">SavedApcState</span>;</span></span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x258*/</span>             UINT8        SavedApcStateFill[<span class="number">43</span>];</span><br><span class="line"><span class="comment">/*0x283*/</span>             UINT8        WaitReason;</span><br><span class="line"><span class="comment">/*0x284*/</span>             CHAR         SuspendCount;</span><br><span class="line"><span class="comment">/*0x285*/</span>             CHAR         Saturation;</span><br><span class="line"><span class="comment">/*0x286*/</span>             UINT16       SListFaultCount;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x288*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">KAPC</span> <span class="title">SchedulerApc</span>;</span></span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x288*/</span>             UINT8        SchedulerApcFill0[<span class="number">1</span>];</span><br><span class="line"><span class="comment">/*0x289*/</span>             UINT8        ResourceIndex;</span><br><span class="line"><span class="comment">/*0x28A*/</span>             UINT8        _PADDING6_[<span class="number">0x56</span>];</span><br><span class="line">                  };</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x288*/</span>             UINT8        SchedulerApcFill1[<span class="number">3</span>];</span><br><span class="line"><span class="comment">/*0x28B*/</span>             UINT8        QuantumReset;</span><br><span class="line"><span class="comment">/*0x28C*/</span>             UINT8        _PADDING7_[<span class="number">0x54</span>];</span><br><span class="line">                  };</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x288*/</span>             UINT8        SchedulerApcFill2[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x28C*/</span>             ULONG32      KernelTime;</span><br><span class="line"><span class="comment">/*0x290*/</span>             UINT8        _PADDING8_[<span class="number">0x50</span>];</span><br><span class="line">                  };</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x288*/</span>             UINT8        SchedulerApcFill3[<span class="number">64</span>];</span><br><span class="line"><span class="comment">/*0x2C8*/</span>             <span class="class"><span class="keyword">struct</span> _<span class="title">KPRCB</span>* <span class="title">WaitPrcb</span>;</span></span><br><span class="line"><span class="comment">/*0x2D0*/</span>             UINT8        _PADDING9_[<span class="number">0x10</span>];</span><br><span class="line">                  };</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x288*/</span>             UINT8        SchedulerApcFill4[<span class="number">72</span>];</span><br><span class="line"><span class="comment">/*0x2D0*/</span>             VOID*        LegoData;</span><br><span class="line"><span class="comment">/*0x2D8*/</span>             UINT8        _PADDING10_[<span class="number">0x8</span>];</span><br><span class="line">                  };</span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x288*/</span>             UINT8        SchedulerApcFill5[<span class="number">83</span>];</span><br><span class="line"><span class="comment">/*0x2DB*/</span>             UINT8        CallbackNestingLevel;</span><br><span class="line"><span class="comment">/*0x2DC*/</span>             ULONG32      UserTime;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x2E0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">KEVENT</span> <span class="title">SuspendEvent</span>;</span></span><br><span class="line"><span class="comment">/*0x2F8*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">ThreadListEntry</span>;</span>                              <span class="comment">// 代表了一个双链表上的节点, 当一个线程被创建时, 它会被加入到进程对象的ThreadListHead 链表中</span></span><br><span class="line"><span class="comment">/*0x308*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">MutantListHead</span>;</span>                               <span class="comment">// 一个链表头, 该链表中包含了所有属于该线程的突变体对象 (mutant, 对应于 API 中的互斥体mutex 对象)</span></span><br><span class="line">                                                                               <span class="comment">// 由于突变体对象是有所有权的, 一旦被某个线程等到, 则其所有权归该线程所有, 它也被连接到MutantListHead 链表中</span></span><br><span class="line"><span class="comment">/*0x318*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">SINGLE_LIST_ENTRY</span> <span class="title">LockEntriesFreeList</span>;</span></span><br><span class="line"><span class="comment">/*0x320*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">KLOCK_ENTRY</span> <span class="title">LockEntries</span>[6];</span></span><br><span class="line"><span class="comment">/*0x560*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">SINGLE_LIST_ENTRY</span> <span class="title">PropagateBoostsEntry</span>;</span></span><br><span class="line"><span class="comment">/*0x568*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">SINGLE_LIST_ENTRY</span> <span class="title">IoSelfBoostsEntry</span>;</span></span><br><span class="line"><span class="comment">/*0x570*/</span>     UINT8        PriorityFloorCounts[<span class="number">16</span>];</span><br><span class="line"><span class="comment">/*0x580*/</span>     ULONG32      PriorityFloorSummary;</span><br><span class="line"><span class="comment">/*0x584*/</span>     LONG32       AbCompletedIoBoostCount;</span><br><span class="line"><span class="comment">/*0x588*/</span>     INT16        AbReferenceCount;</span><br><span class="line"><span class="comment">/*0x58A*/</span>     UINT8        AbFreeEntryCount;</span><br><span class="line"><span class="comment">/*0x58B*/</span>     UINT8        AbWaitEntryCount;</span><br><span class="line"><span class="comment">/*0x58C*/</span>     ULONG32      ForegroundLossTime;</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x590*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">GlobalForegroundListEntry</span>;</span></span><br><span class="line">                  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                  {</span></span><br><span class="line"><span class="comment">/*0x590*/</span>             <span class="class"><span class="keyword">struct</span> _<span class="title">SINGLE_LIST_ENTRY</span> <span class="title">ForegroundDpcStackListEntry</span>;</span></span><br><span class="line"><span class="comment">/*0x598*/</span>             UINT64       InGlobalForegroundList;</span><br><span class="line">                  };</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x5A0*/</span>     INT64        ReadOperationCount;                                 <span class="comment">// 剩下这几个字段的含义同 EPROCESS 中一样</span></span><br><span class="line"><span class="comment">/*0x5A8*/</span>     INT64        WriteOperationCount;</span><br><span class="line"><span class="comment">/*0x5B0*/</span>     INT64        OtherOperationCount;</span><br><span class="line"><span class="comment">/*0x5B8*/</span>     INT64        ReadTransferCount;</span><br><span class="line"><span class="comment">/*0x5C0*/</span>     INT64        WriteTransferCount;</span><br><span class="line"><span class="comment">/*0x5C8*/</span>     INT64        OtherTransferCount;</span><br><span class="line">          }KTHREAD, *PKTHREAD;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><figcaption><span>TEB</span><a href="/Blog/downloads/code/TEB.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Windows 8.1 x64 Checked Build*/</span></span><br><span class="line">           <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">TEB</span>                                                  // 112 <span class="title">elements</span>, 0<span class="title">x1820</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">           {</span></span><br><span class="line"><span class="comment">/*0x000*/</span>      <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> <span class="title">NtTib</span>;</span>                                            <span class="comment">// 线程信息块, TIB 第一个字段是 ExceptionList, 在应用软件的异常处理起着关键作用</span></span><br><span class="line"><span class="comment">/*0x038*/</span>      VOID*        EnvironmentPointer;</span><br><span class="line"><span class="comment">/*0x040*/</span>      <span class="class"><span class="keyword">struct</span> _<span class="title">CLIENT_ID</span> <span class="title">ClientId</span>;</span>                                      <span class="comment">// 客户id, 包含进程 id 和线程 id</span></span><br><span class="line"><span class="comment">/*0x050*/</span>      VOID*        ActiveRpcHandle;                                    <span class="comment">// 活动的 RPC 句柄</span></span><br><span class="line"><span class="comment">/*0x058*/</span>      VOID*        ThreadLocalStoragePointer;                          <span class="comment">// TLS 数组</span></span><br><span class="line"><span class="comment">/*0x060*/</span>      <span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span>* <span class="title">ProcessEnvironmentBlock</span>;</span>                            <span class="comment">// PEB 指针</span></span><br><span class="line"><span class="comment">/*0x068*/</span>      ULONG32      LastErrorValue;                                     <span class="comment">// LastError (GetLastError 从这里获取)</span></span><br><span class="line"><span class="comment">/*0x06C*/</span>      ULONG32      CountOfOwnedCriticalSections;                       <span class="comment">// 所拥有的临界区计数</span></span><br><span class="line"><span class="comment">/*0x070*/</span>      VOID*        CsrClientThread;</span><br><span class="line"><span class="comment">/*0x078*/</span>      VOID*        Win32ThreadInfo;</span><br><span class="line"><span class="comment">/*0x080*/</span>      ULONG32      User32Reserved[<span class="number">26</span>];</span><br><span class="line"><span class="comment">/*0x0E8*/</span>      ULONG32      UserReserved[<span class="number">5</span>];</span><br><span class="line"><span class="comment">/*0x0FC*/</span>      UINT8        _PADDING0_[<span class="number">0x4</span>];</span><br><span class="line"><span class="comment">/*0x100*/</span>      VOID*        WOW32Reserved;</span><br><span class="line"><span class="comment">/*0x108*/</span>      ULONG32      CurrentLocale;                                      <span class="comment">// 当前地区</span></span><br><span class="line"><span class="comment">/*0x10C*/</span>      ULONG32      FpSoftwareStatusRegister;</span><br><span class="line"><span class="comment">/*0x110*/</span>      VOID*        SystemReserved1[<span class="number">54</span>];</span><br><span class="line"><span class="comment">/*0x2C0*/</span>      LONG32       ExceptionCode;                                      <span class="comment">// 异常代码</span></span><br><span class="line"><span class="comment">/*0x2C4*/</span>      UINT8        Padding0[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x2C8*/</span>      <span class="class"><span class="keyword">struct</span> _<span class="title">ACTIVATION_CONTEXT_STACK</span>* <span class="title">ActivationContextStackPointer</span>;</span></span><br><span class="line"><span class="comment">/*0x2D0*/</span>      UINT8        SpareBytes[<span class="number">24</span>];</span><br><span class="line"><span class="comment">/*0x2E8*/</span>      ULONG32      TxFsContext;</span><br><span class="line"><span class="comment">/*0x2EC*/</span>      UINT8        Padding1[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x2F0*/</span>      <span class="class"><span class="keyword">struct</span> _<span class="title">GDI_TEB_BATCH</span> <span class="title">GdiTebBatch</span>;</span></span><br><span class="line"><span class="comment">/*0x7D8*/</span>      <span class="class"><span class="keyword">struct</span> _<span class="title">CLIENT_ID</span> <span class="title">RealClientId</span>;</span></span><br><span class="line"><span class="comment">/*0x7E8*/</span>      VOID*        GdiCachedProcessHandle;</span><br><span class="line"><span class="comment">/*0x7F0*/</span>      ULONG32      GdiClientPID;</span><br><span class="line"><span class="comment">/*0x7F4*/</span>      ULONG32      GdiClientTID;</span><br><span class="line"><span class="comment">/*0x7F8*/</span>      VOID*        GdiThreadLocalInfo;</span><br><span class="line"><span class="comment">/*0x800*/</span>      UINT64       Win32ClientInfo[<span class="number">62</span>];</span><br><span class="line"><span class="comment">/*0x9F0*/</span>      VOID*        glDispatchTable[<span class="number">233</span>];</span><br><span class="line"><span class="comment">/*0x1138*/</span>     UINT64       glReserved1[<span class="number">29</span>];</span><br><span class="line"><span class="comment">/*0x1220*/</span>     VOID*        glReserved2;</span><br><span class="line"><span class="comment">/*0x1228*/</span>     VOID*        glSectionInfo;</span><br><span class="line"><span class="comment">/*0x1230*/</span>     VOID*        glSection;</span><br><span class="line"><span class="comment">/*0x1238*/</span>     VOID*        glTable;</span><br><span class="line"><span class="comment">/*0x1240*/</span>     VOID*        glCurrentRC;</span><br><span class="line"><span class="comment">/*0x1248*/</span>     VOID*        glContext;</span><br><span class="line"><span class="comment">/*0x1250*/</span>     ULONG32      LastStatusValue;</span><br><span class="line"><span class="comment">/*0x1254*/</span>     UINT8        Padding2[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x1258*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">StaticUnicodeString</span>;</span></span><br><span class="line"><span class="comment">/*0x1268*/</span>     WCHAR        StaticUnicodeBuffer[<span class="number">261</span>];</span><br><span class="line"><span class="comment">/*0x1472*/</span>     UINT8        Padding3[<span class="number">6</span>];</span><br><span class="line"><span class="comment">/*0x1478*/</span>     VOID*        DeallocationStack;</span><br><span class="line"><span class="comment">/*0x1480*/</span>     VOID*        TlsSlots[<span class="number">64</span>];</span><br><span class="line"><span class="comment">/*0x1680*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> <span class="title">TlsLinks</span>;</span></span><br><span class="line"><span class="comment">/*0x1690*/</span>     VOID*        Vdm;</span><br><span class="line"><span class="comment">/*0x1698*/</span>     VOID*        ReservedForNtRpc;</span><br><span class="line"><span class="comment">/*0x16A0*/</span>     VOID*        DbgSsReserved[<span class="number">2</span>];</span><br><span class="line"><span class="comment">/*0x16B0*/</span>     ULONG32      HardErrorMode;</span><br><span class="line"><span class="comment">/*0x16B4*/</span>     UINT8        Padding4[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x16B8*/</span>     VOID*        Instrumentation[<span class="number">11</span>];</span><br><span class="line"><span class="comment">/*0x1710*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">GUID</span> <span class="title">ActivityId</span>;</span></span><br><span class="line"><span class="comment">/*0x1720*/</span>     VOID*        SubProcessTag;</span><br><span class="line"><span class="comment">/*0x1728*/</span>     VOID*        PerflibData;</span><br><span class="line"><span class="comment">/*0x1730*/</span>     VOID*        EtwTraceData;</span><br><span class="line"><span class="comment">/*0x1738*/</span>     VOID*        WinSockData;                                        <span class="comment">// Winsock 数据</span></span><br><span class="line"><span class="comment">/*0x1740*/</span>     ULONG32      GdiBatchCount;</span><br><span class="line">               <span class="keyword">union</span></span><br><span class="line">               {</span><br><span class="line"><span class="comment">/*0x1744*/</span>         <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESSOR_NUMBER</span> <span class="title">CurrentIdealProcessor</span>;</span></span><br><span class="line"><span class="comment">/*0x1744*/</span>         ULONG32      IdealProcessorValue;</span><br><span class="line">                   <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                   {</span></span><br><span class="line"><span class="comment">/*0x1744*/</span>             UINT8        ReservedPad0;</span><br><span class="line"><span class="comment">/*0x1745*/</span>             UINT8        ReservedPad1;</span><br><span class="line"><span class="comment">/*0x1746*/</span>             UINT8        ReservedPad2;</span><br><span class="line"><span class="comment">/*0x1747*/</span>             UINT8        IdealProcessor;</span><br><span class="line">                   };</span><br><span class="line">               };</span><br><span class="line"><span class="comment">/*0x1748*/</span>     ULONG32      GuaranteedStackBytes;</span><br><span class="line"><span class="comment">/*0x174C*/</span>     UINT8        Padding5[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x1750*/</span>     VOID*        ReservedForPerf;</span><br><span class="line"><span class="comment">/*0x1758*/</span>     VOID*        ReservedForOle;</span><br><span class="line"><span class="comment">/*0x1760*/</span>     ULONG32      WaitingOnLoaderLock;</span><br><span class="line"><span class="comment">/*0x1764*/</span>     UINT8        Padding6[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x1768*/</span>     VOID*        SavedPriorityState;</span><br><span class="line"><span class="comment">/*0x1770*/</span>     UINT64       ReservedForCodeCoverage;</span><br><span class="line"><span class="comment">/*0x1778*/</span>     VOID*        ThreadPoolData;</span><br><span class="line"><span class="comment">/*0x1780*/</span>     VOID**       TlsExpansionSlots;</span><br><span class="line"><span class="comment">/*0x1788*/</span>     VOID*        DeallocationBStore;</span><br><span class="line"><span class="comment">/*0x1790*/</span>     VOID*        BStoreLimit;</span><br><span class="line"><span class="comment">/*0x1798*/</span>     ULONG32      MuiGeneration;</span><br><span class="line"><span class="comment">/*0x179C*/</span>     ULONG32      IsImpersonating;</span><br><span class="line"><span class="comment">/*0x17A0*/</span>     VOID*        NlsCache;</span><br><span class="line"><span class="comment">/*0x17A8*/</span>     VOID*        pShimData;</span><br><span class="line"><span class="comment">/*0x17B0*/</span>     UINT16       HeapVirtualAffinity;</span><br><span class="line"><span class="comment">/*0x17B2*/</span>     UINT16       LowFragHeapDataSlot;</span><br><span class="line"><span class="comment">/*0x17B4*/</span>     UINT8        Padding7[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/*0x17B8*/</span>     VOID*        CurrentTransactionHandle;</span><br><span class="line"><span class="comment">/*0x17C0*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">TEB_ACTIVE_FRAME</span>* <span class="title">ActiveFrame</span>;</span></span><br><span class="line"><span class="comment">/*0x17C8*/</span>     VOID*        FlsData;</span><br><span class="line"><span class="comment">/*0x17D0*/</span>     VOID*        PreferredLanguages;</span><br><span class="line"><span class="comment">/*0x17D8*/</span>     VOID*        UserPrefLanguages;</span><br><span class="line"><span class="comment">/*0x17E0*/</span>     VOID*        MergedPrefLanguages;</span><br><span class="line"><span class="comment">/*0x17E8*/</span>     ULONG32      MuiImpersonation;</span><br><span class="line">               <span class="keyword">union</span></span><br><span class="line">               {</span><br><span class="line"><span class="comment">/*0x17EC*/</span>         UINT16       CrossTebFlags;</span><br><span class="line"><span class="comment">/*0x17EC*/</span>         UINT16       SpareCrossTebBits : <span class="number">16</span>;</span><br><span class="line">               };</span><br><span class="line">               <span class="keyword">union</span></span><br><span class="line">               {</span><br><span class="line"><span class="comment">/*0x17EE*/</span>         UINT16       SameTebFlags;</span><br><span class="line">                   <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">                   {</span></span><br><span class="line"><span class="comment">/*0x17EE*/</span>             UINT16       SafeThunkCall : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x17EE*/</span>             UINT16       InDebugPrint : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x17EE*/</span>             UINT16       HasFiberData : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x17EE*/</span>             UINT16       SkipThreadAttach : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x17EE*/</span>             UINT16       WerInShipAssertCode : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x17EE*/</span>             UINT16       RanProcessInit : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x17EE*/</span>             UINT16       ClonedThread : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x17EE*/</span>             UINT16       SuppressDebugMsg : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x17EE*/</span>             UINT16       DisableUserStackWalk : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x17EE*/</span>             UINT16       RtlExceptionAttached : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x17EE*/</span>             UINT16       InitialThread : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x17EE*/</span>             UINT16       SessionAware : <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*0x17EE*/</span>             UINT16       SpareSameTebBits : <span class="number">4</span>;</span><br><span class="line">                   };</span><br><span class="line">               };</span><br><span class="line"><span class="comment">/*0x17F0*/</span>     VOID*        TxnScopeEnterCallback;</span><br><span class="line"><span class="comment">/*0x17F8*/</span>     VOID*        TxnScopeExitCallback;</span><br><span class="line"><span class="comment">/*0x1800*/</span>     VOID*        TxnScopeContext;</span><br><span class="line"><span class="comment">/*0x1808*/</span>     ULONG32      LockCount;</span><br><span class="line"><span class="comment">/*0x180C*/</span>     ULONG32      SpareUlong0;</span><br><span class="line"><span class="comment">/*0x1810*/</span>     VOID*        ResourceRetValue;</span><br><span class="line"><span class="comment">/*0x1818*/</span>     VOID*        ReservedForWdf;</span><br><span class="line">           }TEB, *PTEB;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><figcaption><span>TIB</span><a href="/Blog/downloads/code/TIB.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Windows 8.1 x64 Checked Build*/</span></span><br><span class="line">          <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span>                                    // 8 <span class="title">elements</span>, 0<span class="title">x38</span> <span class="title">bytes</span> (<span class="title">sizeof</span>)</span></span><br><span class="line"><span class="class">          {</span></span><br><span class="line"><span class="comment">/*0x000*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span>* <span class="title">ExceptionList</span>;</span> <span class="comment">// 异常处理链</span></span><br><span class="line"><span class="comment">/*0x008*/</span>     VOID*        StackBase;                               <span class="comment">// 用户栈基(高)地址</span></span><br><span class="line"><span class="comment">/*0x010*/</span>     VOID*        StackLimit;                              <span class="comment">// 用户栈低地址(限制)</span></span><br><span class="line"><span class="comment">/*0x018*/</span>     VOID*        SubSystemTib;</span><br><span class="line">              <span class="keyword">union</span></span><br><span class="line">              {</span><br><span class="line"><span class="comment">/*0x020*/</span>         VOID*        FiberData;                           <span class="comment">// 纤程信息</span></span><br><span class="line"><span class="comment">/*0x020*/</span>         ULONG32      Version;</span><br><span class="line">              };</span><br><span class="line"><span class="comment">/*0x028*/</span>     VOID*        ArbitraryUserPointer;</span><br><span class="line"><span class="comment">/*0x030*/</span>     <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span>* <span class="title">Self</span>;</span>                                 <span class="comment">// TIB/TEB 结构起点的指针, 用于在用户层通过 FS/GS 寄存器获取指针</span></span><br><span class="line">          }NT_TIB, *PNT_TIB;</span><br></pre></td></tr></table></figure></div><h3 id="Ps-GetCurrent-Thread-Process"><a href="#Ps-GetCurrent-Thread-Process" class="headerlink" title="[Ps]GetCurrent[Thread | Process]"></a>[Ps]GetCurrent[Thread | Process]</h3><p>我们先看下内核层函数</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PsGetCurrentThread() ((PETHREAD)KeGetCurrentThread())</span></span><br><span class="line"></span><br><span class="line">__forceinline <span class="class"><span class="keyword">struct</span> _<span class="title">KTHREAD</span> * <span class="title">KeGetCurrentThread</span> (<span class="title">VOID</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN64</span></span><br><span class="line">    <span class="keyword">return</span> (struct _KTHREAD *)__readgsqword(FIELD_OFFSET(KPCR, Prcb.CurrentThread));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> (struct _KTHREAD *)__readfsdword(FIELD_OFFSET(KPCR, PrcbData.CurrentThread));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>因为 KTHREAD 是 ETHREAD 的第一个字段, 他俩的地址是一样的, 所以获取 KTHREAD 就相当于获取 ETHREAD 了.</p><p>我们看到 CurrentThread 是从 pcr 的 prcb 里面获取的.<br>在 x86 系统的内核层中, KPCR 结构由 fs:[0] 获取.<br>在 x64 系统的内核层中, KPCR 结构由 gs:[0] 获取.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PsGetCurrentProcess() _PsGetCurrentProcess()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _PsGetCurrentProcess() (CONTAINING_RECORD(((KeGetCurrentThread())-&gt;ApcState.Process),EPROCESS,Pcb))</span></span><br></pre></td></tr></table></figure></div><div class="note danger">            <p>KTHREAD 结构中, 本来就有个指向 KPROCESS 的指针 Process, 为什么还要用 ApcState 内部的 Process 呢?<br>因为要考虑到进程的 Attach. 一个进程可能会 Attach 到另一个进程上, 用以访问 Attach 进程的用户空间.<br>这样, 在常态下, PsGetCurrentProcess 返回的是当前线程所属进程的 EPROCESS 结构指针,<br>而在 Attach 状态下, 返回的是当前线程所 Attach 进程的 EPROCESS 指针.</p>          </div><p>接下来我们看下用户层函数:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE WINAPI <span class="title">GetCurrentProcess</span><span class="params">(VOID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (HANDLE)NtCurrentProcess();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">HANDLE WINAPI <span class="title">GetCurrentThread</span><span class="params">(VOID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (HANDLE)NtCurrentThread();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NtCurrentProcess()                      ((HANDLE)(LONG_PTR)-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NtCurrentThread()                       ((HANDLE)(LONG_PTR)-2)</span></span><br></pre></td></tr></table></figure></div><p>我们看到, -1 是用来表示当前进程的句柄, -2 用来表示当前线程的句柄.</p><p>再来看下用户层的 TEB 获取</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FORCEINLINE <span class="class"><span class="keyword">struct</span> _<span class="title">TEB</span> * <span class="title">NtCurrentTeb</span>(<span class="title">void</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN64</span></span><br><span class="line">    <span class="keyword">return</span> (struct _TEB *)__readgsqword(FIELD_OFFSET(NT_TIB, Self));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> (struct _TEB *)__readfsqword(FIELD_OFFSET(NT_TIB, Self));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>与内核层不同, 在用户层:<br>x86 系统上 fs:[0] 指向 TEB 结构<br>x64 系统上 gs:[0] 指向 TEB 结构</p><p>通过 Self 字段获取结构指针. 得到 TEB 进而可以得到 PEB</p><h2 id="Windows-进程的用户空间"><a href="#Windows-进程的用户空间" class="headerlink" title="Windows 进程的用户空间"></a>Windows 进程的用户空间</h2><p>在 Windows 内核中, 定义了几个全局变量来说明地址空间的范围: MmSystemRangeStart, MmUserProbeAddress 和 MmHighestUserAddress.<br>这几个变量在 WRK 中, 是由 MmInitSystem 函数初始化的. 在 Win8.1 换了地方, 而且有些定义上的变化, 我根据 Win8.1 做了小小修改.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*WRK1.2*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_WIN64)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI_ISOLATION_ADDRESS                   0x0000800000000000ULL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI_USER_PROBE_ADDRESS           (PVOID)0x000007FFFFFF0000ULL <span class="comment">// starting address of guard page</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI_SYSTEM_RANGE_START           (PVOID)0xFFFF800000000000ULL <span class="comment">// start of system space</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HYPER_SPACE                            0xFFFFF70000000000ULL <span class="comment">// 512 GB hyper space [MiVaProcessSpace]</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HYPER_SPACE_END                        0xFFFFF77FFFFFFFFFULL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM_LOWEST_SYSTEM_ADDRESS        (PVOID)0xFFFF080000000000ULL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">// _X86_</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI_ISOLATION_ADDRESS                   0x80000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI_USER_PROBE_ADDRESS           (PVOID)0x7FFF0000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI_SYSTEM_RANGE_START           (PVOID)0x80000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HYPER_SPACE                            0xC0500000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HYPER_SPACE_END                        0xC08FFFFF</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined (_X86PAE_)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM_LOWEST_SYSTEM_ADDRESS        (PVOID)0xC0800000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM_LOWEST_SYSTEM_ADDRESS        (PVOID)0xC0C00000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM_KSEG0_BASE           MI_SYSTEM_RANGE_START</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM_LOWEST_USER_ADDRESS  (PVOID)0x10000      <span class="comment">// The lowest user address reserves the low 64k.</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI_HIGHEST_USER_ADDRESS ((PVOID)(ULONG_PTR) (MI_ISOLATION_ADDRESS - 0x10000 - 1))   <span class="comment">// highest user address</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI_USER_PROBE_ADDRESS   ((ULONG_PTR)        (MI_ISOLATION_ADDRESS - 0x10000))       <span class="comment">// starting address of guard page</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI_SYSTEM_RANGE_START   (PVOID)             (MM_KSEG0_BASE)                         <span class="comment">// start of system space</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOLEAN <span class="title">MmInitSystem</span> <span class="params">(ULONG Phase, PLOADER_PARAMETER_BLOCK LoaderBlock)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    MmHighestUserAddress = MI_HIGHEST_USER_ADDRESS;</span><br><span class="line">    MmUserProbeAddress   = MI_USER_PROBE_ADDRESS;</span><br><span class="line">    MmSystemRangeStart   = MI_SYSTEM_RANGE_START;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>MmSystemRangeStart</code> 就是系统空间与用户空间的分界线.<br><code>MmHighestUserAddress</code> 是应用软件在用户层可以访问的最高地址. 从 <code>MmUserProbeAddress</code> 开始, 就不让访问了.<br>这是因为在分界线下面留了 <code>64KB(0x10000)</code> 的隔离区.</p><h3 id="SharedUserData"><a href="#SharedUserData" class="headerlink" title="SharedUserData"></a>SharedUserData</h3><p><code>SharedUserData</code> 也要说一下, 我们先看一下定义</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Ring 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_WIN64)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KI_USER_SHARED_DATA 0xFFFFF78000000000UI64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SharedUserData      ((KUSER_SHARED_DATA * const)KI_USER_SHARED_DATA)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KI_USER_SHARED_DATA 0xFFDF0000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SharedUserData      ((KUSER_SHARED_DATA * const) KI_USER_SHARED_DATA)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Ring 3 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USER_SHARED_DATA    (0x7FFE0000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SharedUserData      ((KUSER_SHARED_DATA *)USER_SHARED_DATA)</span></span><br></pre></td></tr></table></figure></div><p>我们看到在 Ring0 中的定义的地址按理来说应该是属于系统空间, 却同时又映射到用户空间地址, 目的是用来让用户空间的程序访问内核中的一些数据.<br>而且, 这个区间是由系统空间和所有用户空间共享, 即为所有进程所共享的.</p><p>我们来看一下 <code>KUSER_SHARED_DATA</code> 结构</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: kd&gt; dtx _KUSER_SHARED_DATA <span class="number">0xFFFFF78000000000</span></span><br><span class="line">(*((_KUSER_SHARED_DATA *)<span class="number">0xfffff78000000000</span>))                 [Type: _KUSER_SHARED_DATA]</span><br><span class="line">    [+<span class="number">0x000</span>] TickCountLowDeprecated : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x004</span>] TickCountMultiplier : <span class="number">0xfa00000</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x008</span>] InterruptTime    [Type: _KSYSTEM_TIME]</span><br><span class="line">    [+<span class="number">0x014</span>] SystemTime       [Type: _KSYSTEM_TIME]</span><br><span class="line">    [+<span class="number">0x020</span>] TimeZoneBias     [Type: _KSYSTEM_TIME]</span><br><span class="line">    [+<span class="number">0x02c</span>] ImageNumberLow   : <span class="number">0x8664</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">short</span>]</span><br><span class="line">    [+<span class="number">0x02e</span>] ImageNumberHigh  : <span class="number">0x8664</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">short</span>]</span><br><span class="line">    [+<span class="number">0x030</span>] NtSystemRoot     : <span class="string">"C:\Windows"</span> [Type: <span class="keyword">wchar_t</span> [<span class="number">260</span>]]</span><br><span class="line">    [+<span class="number">0x238</span>] MaxStackTraceDepth : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x23c</span>] CryptoExponent   : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x240</span>] TimeZoneId       : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x244</span>] LargePageMinimum : <span class="number">0x200000</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x248</span>] AitSamplingValue : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x24c</span>] AppCompatFlag    : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x250</span>] RNGSeedVersion   : <span class="number">0xd</span> [Type: <span class="keyword">unsigned</span> __int64]</span><br><span class="line">    [+<span class="number">0x258</span>] GlobalValidationRunlevel : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x25c</span>] TimeZoneBiasStamp : <span class="number">10</span> [Type: <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x260</span>] Reserved2        : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x264</span>] NtProductType    : NtProductWinNt (<span class="number">1</span>) [Type: _NT_PRODUCT_TYPE]</span><br><span class="line">    [+<span class="number">0x268</span>] ProductTypeIsValid : <span class="number">0x1</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]</span><br><span class="line">    [+<span class="number">0x269</span>] Reserved0        [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span> [<span class="number">1</span>]]</span><br><span class="line">    [+<span class="number">0x26a</span>] NativeProcessorArchitecture : <span class="number">0x9</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">short</span>]</span><br><span class="line">    [+<span class="number">0x26c</span>] NtMajorVersion   : <span class="number">0x6</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x270</span>] NtMinorVersion   : <span class="number">0x3</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x274</span>] ProcessorFeatures [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span> [<span class="number">64</span>]]</span><br><span class="line">    [+<span class="number">0x2b4</span>] Reserved1        : <span class="number">0x7ffeffff</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2b8</span>] Reserved3        : <span class="number">0x80000000</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2bc</span>] TimeSlip         : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2c0</span>] AlternativeArchitecture : StandardDesign (<span class="number">0</span>) [Type: _ALTERNATIVE_ARCHITECTURE_TYPE]</span><br><span class="line">    [+<span class="number">0x2c4</span>] AltArchitecturePad [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span> [<span class="number">1</span>]]</span><br><span class="line">    [+<span class="number">0x2c8</span>] SystemExpirationDate : &#123;<span class="number">0</span>&#125; [Type: _LARGE_INTEGER]</span><br><span class="line">    [+<span class="number">0x2d0</span>] SuiteMask        : <span class="number">0x110</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2d4</span>] KdDebuggerEnabled : <span class="number">0x3</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]              ; &lt;-- 哈?</span><br><span class="line">    [+<span class="number">0x2d5</span>] MitigationPolicies : <span class="number">0xa</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]</span><br><span class="line">    [+<span class="number">0x2d5</span> ( <span class="number">1</span>: <span class="number">0</span>)] NXSupportPolicy  : <span class="number">0x2</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]</span><br><span class="line">    [+<span class="number">0x2d5</span> ( <span class="number">3</span>: <span class="number">2</span>)] SEHValidationPolicy : <span class="number">0x2</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]</span><br><span class="line">    [+<span class="number">0x2d5</span> ( <span class="number">5</span>: <span class="number">4</span>)] CurDirDevicesSkippedForDlls : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]</span><br><span class="line">    [+<span class="number">0x2d5</span> ( <span class="number">7</span>: <span class="number">6</span>)] Reserved         : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]</span><br><span class="line">    [+<span class="number">0x2d6</span>] Reserved6        [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span> [<span class="number">2</span>]]</span><br><span class="line">    [+<span class="number">0x2d8</span>] ActiveConsoleId  : <span class="number">0x1</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2dc</span>] DismountCount    : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2e0</span>] ComPlusPackage   : <span class="number">0xffffffff</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2e4</span>] LastSystemRITEventTickCount : <span class="number">0x106ce6</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2e8</span>] NumberOfPhysicalPages : <span class="number">0x7fef1</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2ec</span>] SafeBootMode     : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]</span><br><span class="line">    [+<span class="number">0x2ed</span>] Reserved12       [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span> [<span class="number">3</span>]]</span><br><span class="line">    [+<span class="number">0x2f0</span>] SharedDataFlags  : <span class="number">0xf</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2f0</span> ( <span class="number">0</span>: <span class="number">0</span>)] DbgErrorPortPresent : <span class="number">0x1</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2f0</span> ( <span class="number">1</span>: <span class="number">1</span>)] DbgElevationEnabled : <span class="number">0x1</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2f0</span> ( <span class="number">2</span>: <span class="number">2</span>)] DbgVirtEnabled   : <span class="number">0x1</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2f0</span> ( <span class="number">3</span>: <span class="number">3</span>)] DbgInstallerDetectEnabled : <span class="number">0x1</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2f0</span> ( <span class="number">4</span>: <span class="number">4</span>)] DbgLkgEnabled    : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2f0</span> ( <span class="number">5</span>: <span class="number">5</span>)] DbgDynProcessorEnabled : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2f0</span> ( <span class="number">6</span>: <span class="number">6</span>)] DbgConsoleBrokerEnabled : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2f0</span> ( <span class="number">7</span>: <span class="number">7</span>)] DbgSecureBootEnabled : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2f0</span> (<span class="number">31</span>: <span class="number">8</span>)] SpareBits        : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x2f4</span>] DataFlagsPad     [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span> [<span class="number">1</span>]]</span><br><span class="line">    [+<span class="number">0x2f8</span>] TestRetInstruction : <span class="number">0xc3</span> [Type: <span class="keyword">unsigned</span> __int64]</span><br><span class="line">    [+<span class="number">0x300</span>] QpcFrequency     : <span class="number">2540039</span> [Type: __int64]</span><br><span class="line">    [+<span class="number">0x308</span>] SystemCallPad    [Type: <span class="keyword">unsigned</span> __int64 [<span class="number">3</span>]]</span><br><span class="line">    [+<span class="number">0x320</span>] TickCount        [Type: _KSYSTEM_TIME]</span><br><span class="line">    [+<span class="number">0x320</span>] TickCountQuad    : <span class="number">0x10635c7d</span> [Type: <span class="keyword">unsigned</span> __int64]</span><br><span class="line">    [+<span class="number">0x320</span>] ReservedTickCountOverlay [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span> [<span class="number">3</span>]]</span><br><span class="line">    [+<span class="number">0x32c</span>] TickCountPad     [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span> [<span class="number">1</span>]]</span><br><span class="line">    [+<span class="number">0x330</span>] Cookie           : <span class="number">0xc8d16c81</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x334</span>] CookiePad        [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span> [<span class="number">1</span>]]</span><br><span class="line">    [+<span class="number">0x338</span>] ConsoleSessionForegroundProcessId : <span class="number">1444</span> [Type: __int64]</span><br><span class="line">    [+<span class="number">0x340</span>] TimeUpdateLock   : <span class="number">0x49ae902</span> [Type: <span class="keyword">unsigned</span> __int64]</span><br><span class="line">    [+<span class="number">0x348</span>] BaselineSystemTimeQpc : <span class="number">0x9f94d50871a</span> [Type: <span class="keyword">unsigned</span> __int64]</span><br><span class="line">    [+<span class="number">0x350</span>] BaselineInterruptTimeQpc : <span class="number">0x9f94d50871a</span> [Type: <span class="keyword">unsigned</span> __int64]</span><br><span class="line">    [+<span class="number">0x358</span>] QpcSystemTimeIncrement : <span class="number">0xd35cfe4f14ff7eb6</span> [Type: <span class="keyword">unsigned</span> __int64]</span><br><span class="line">    [+<span class="number">0x360</span>] QpcInterruptTimeIncrement : <span class="number">0xd35cfe4f14ff7eb6</span> [Type: <span class="keyword">unsigned</span> __int64]</span><br><span class="line">    [+<span class="number">0x368</span>] QpcSystemTimeIncrement32 : <span class="number">0xd35cfe4f</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x36c</span>] QpcInterruptTimeIncrement32 : <span class="number">0xd35cfe4f</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x370</span>] QpcSystemTimeIncrementShift : <span class="number">0x15</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]</span><br><span class="line">    [+<span class="number">0x371</span>] QpcInterruptTimeIncrementShift : <span class="number">0x15</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]</span><br><span class="line">    [+<span class="number">0x372</span>] Reserved8        [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span> [<span class="number">14</span>]]</span><br><span class="line">    [+<span class="number">0x380</span>] UserModeGlobalLogger [Type: <span class="keyword">unsigned</span> <span class="keyword">short</span> [<span class="number">16</span>]]</span><br><span class="line">    [+<span class="number">0x3a0</span>] ImageFileExecutionOptions : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x3a4</span>] LangGenerationCount : <span class="number">0x1</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x3a8</span>] Reserved4        : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> __int64]</span><br><span class="line">    [+<span class="number">0x3b0</span>] InterruptTimeBias : <span class="number">0x27079e3b9800</span> [Type: <span class="keyword">unsigned</span> __int64]</span><br><span class="line">    [+<span class="number">0x3b8</span>] QpcBias          : <span class="number">0x27a78d780ed587</span> [Type: <span class="keyword">unsigned</span> __int64]</span><br><span class="line">    [+<span class="number">0x3c0</span>] ActiveProcessorCount : <span class="number">0x2</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">long</span>]</span><br><span class="line">    [+<span class="number">0x3c4</span>] ActiveGroupCount : <span class="number">0x1</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]</span><br><span class="line">    [+<span class="number">0x3c5</span>] Reserved9        : <span class="number">0x0</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]</span><br><span class="line">    [+<span class="number">0x3c6</span>] QpcData          : <span class="number">0xa01</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">short</span>]</span><br><span class="line">    [+<span class="number">0x3c6</span>] QpcBypassEnabled : <span class="number">0x1</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]</span><br><span class="line">    [+<span class="number">0x3c7</span>] QpcShift         : <span class="number">0xa</span> [Type: <span class="keyword">unsigned</span> <span class="keyword">char</span>]</span><br><span class="line">    [+<span class="number">0x3c8</span>] TimeZoneBiasEffectiveStart : &#123;<span class="number">131406845483478733</span>&#125; [Type: _LARGE_INTEGER]</span><br><span class="line">    [+<span class="number">0x3d0</span>] TimeZoneBiasEffectiveEnd : &#123;<span class="number">131592096000000000</span>&#125; [Type: _LARGE_INTEGER]</span><br><span class="line">    [+<span class="number">0x3d8</span>] XState           [Type: _XSTATE_CONFIGURATION]</span><br></pre></td></tr></table></figure></div><p>我们来看一个用到这个结构的栗子</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">GetTickCount</span><span class="params">(VOID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ULARGE_INTEGER TickCount;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN64</span></span><br><span class="line">    TickCount.QuadPart = *((<span class="keyword">volatile</span> ULONG64*)&amp;SharedUserData-&gt;TickCount);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">while</span> (TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        TickCount.HighPart = (ULONG)SharedUserData-&gt;TickCount.High1Time;</span><br><span class="line">        TickCount.LowPart = SharedUserData-&gt;TickCount.LowPart;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (TickCount.HighPart == (ULONG)SharedUserData-&gt;TickCount.High2Time)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        YieldProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (ULONG)((UInt32x32To64(TickCount.LowPart,</span><br><span class="line">                                  SharedUserData-&gt;TickCountMultiplier) &gt;&gt; <span class="number">24</span>) +</span><br><span class="line">                    UInt32x32To64((TickCount.HighPart &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xFFFFFFFF</span>,</span><br><span class="line">                                  SharedUserData-&gt;TickCountMultiplier));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>用户空间的这个函数需要通过 SharedUserData 的 Tick 时钟计数.</p><h3 id="用户空间格局的安排"><a href="#用户空间格局的安排" class="headerlink" title="用户空间格局的安排"></a>用户空间格局的安排</h3><p>用户空间的创建及其大的格局基本上是由内核函数 <code>MmCreateProcessAddressSpace()</code> 实现的, 这是创建进程所执行的操作的一部分.</p><ol><li>映射程序的 EXE 映像, 通过 <code>NtCreateProcess()</code> 之前创建的 <code>Section</code> 直接 <code>MmMapViewOfSection()</code> 到用户空间</li><li>映射 <code>Ntdll.dll</code>. Windows 内核在初始化阶段首次需要装入这个 DLL 的时候, 为其创建一个 <code>Section</code>, 并使一个全局指针 <code>PspSystemDllSection</code> 指向该对象. 以后需要映射 <code>Ntdll.dll</code> 的进程, 只需要直接用 <code>MmMapViewOfSection()</code> 映射到对应的进程就可以了. 这个操作是在 <code>PspCreateProcess()</code> 调用的 <code>PspMapSystemDll()</code> 中完成的.</li><li>创建 PEB. PEB 查找空地是从上往下搜索的.</li><li>映射 NLS 语言码表文件. 和 <code>Ntdll.dll</code> 一样, 这个 NSL 也是在系统初始化时为 NSL 创建一个 <code>Section</code>, 然后直接映射到新进程的用户空间.</li><li>创建堆. PEB 占一个页面, 但是实际上使用的大小没有这么大, 所以剩下的部分用作一个存储堆的指针数组. 能存储多少个指针就能有多少个堆.</li><li>创建 TEB. TEB 的空地查找和 PEB 一样. 所以一般会和 PEB 在一起.</li></ol><h2 id="进程创建过程"><a href="#进程创建过程" class="headerlink" title="进程创建过程"></a>进程创建过程</h2><h3 id="大致调用栈"><a href="#大致调用栈" class="headerlink" title="大致调用栈:"></a>大致调用栈:</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">↓ CreateProcessW/A()</span><br><span class="line">↓ CreateProcessInternalW()                |  → NtCreateThreadEx() → ↓ | → CsrClientCallServer() </span><br><span class="line">↓ NtCreateProcessEx()                     | ↑                     | ↓ | ↑</span><br><span class="line">↓ PspCreateProcess()                      | ↑                     | ↓ | ↑</span><br><span class="line">→ PspAllocateProcess() → PspInsertProcess() ↑                     | ↓ | ↑</span><br><span class="line">------------------------------------------------------------------- ↓ | ↑</span><br><span class="line">↓ PspCreateThread()                                    ←              | ↑</span><br><span class="line">→ PspAllocateThread() → PspInsertThread()              →                ↑</span><br></pre></td></tr></table></figure></div><blockquote><p>自己逆向了一部分 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01lZVNvbmcvUmV2ZXJzZS1FbmdpbmVlcmluZy90cmVlL21hc3Rlci9DcmVhdGVQcm9jZXNzSW50ZXJuYWw=" title="https://github.com/MeeSong/Reverse-Engineering/tree/master/CreateProcessInternal">CreateProcessInternalW<i class="fa fa-external-link"></i></span>, 代码仅供参考.</p></blockquote><h3 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h3><ol><li>预处理阶段<br> A. 参数验证<br> B. 参数转换  </li><li>打开和验证目标映像  </li><li>创建执行体进程对象<br> A. 分配并设置 EPROCESS 数据结构<br> B. 其他相关数据结构的设置, 例如句柄表<br> C. 为目标进程创建初始的地址空间<br> D. 对目标进程的 “内核进程块” KPROCESS 进行初始化, 这是 EPROCESS 的一部分<br> E. 将目标进程的可执行映像映射到其自身的用户空间<br> F. 将系统 DLL 的映像映射到目标进程的用户空间<br> G. 设置好目标进程的 “进程环境块” PEB<br> H. 映射其他需要映射到用户空间的模块, 例如 NLS<br> I. 完成 EPROCESS 创建, 将其挂入进程队列并插入创建者的句柄表.  </li><li>创建初始化线程, 以及栈和执行环境<br> A. 创建和设置目标线程的 ETHREAD 数据结构<br> B. 在目标进程的用户空间创建并设置目标线程的 TEB<br> C. 将目标线程在用户空间的起始地址设置成指向 kernel32.dll!BaseThreadInitThunk<br> D. 设置目标线程的 KTHREAD 数据结构并为其分配栈. 特别的, 将其 Context 中的返回点设置成指向内核中的一段程序, KiThreadStartup, 使该线程一旦被调度运行就从这里开始执行.<br> E. 如果登记了每当创建线程时就应加以调用的 “通知” 函数, 就调用这些函数.  </li><li>通知 Windows 子系统 (由调用者通知)<br> A. 复制一份该进程和线程的句柄<br> B. 设置进程优先级<br> C. 分配 Csrss 进程块<br> D. 把新进程的异常处理端口绑定到 Csrss 中, 这样当该进程发生异常时, Csrss 将会收到异常消息<br> E. 分配和初始化 Csrss 线程块<br> F. 把线程插入到进程的线程列表中<br> G. 把进程插入到 Csrss 的进程列表中<br> H. 显示进程启动光标  </li><li>启动初始线程的执行  </li><li>在新进程环境下执行进程初始化  </li></ol><h2 id="Windows-的可执行映像"><a href="#Windows-的可执行映像" class="headerlink" title="Windows 的可执行映像"></a>Windows 的可执行映像</h2><p>可以在 Windows 上运行的可执行软件有好几类, 有着不同的扩展文件名, 处理的方法也不一样</p><ul><li>Windows 的 64 位 EXE 映像, 直接运行</li><li>Windows 的 32 位 EXE 映像, 直接运行, 内部通过 Wow64 子系统兼容</li><li>Windows 的 16 位 EXE 映像, 启动 ntvdm.exe, 以原有命令行作为参数 </li><li>DOS 的 EXE, COM 或 PIF 映像, 启动 ntvdm.exe,  以原有命令行作为参数</li><li>DOS 的 BAT 或 CMD 批处理命令脚本, 启动 cmd.exe, 以原有命令行作为参数</li><li>POSIX 可执行映像, 启动 posix.exe, 以原有命令行作为参数</li><li>OS/2 可执行映像, 启动 os2.exe, 以原有命令行作为参数</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从概念上来说, 进程是线程的容器, 进程提供了线程必要的地址空间, 上下文环境, 安全凭证等等..而线程是最基本的执行单位和调度单位. 作业呢? 作业可以看作是进程的容器, 使其可以对进程进行统一的管理.&lt;/p&gt;
&lt;p&gt;从实际上来说, 内核就是各种各样的数据结构, 进程, 线程和作业也不例外.&lt;/p&gt;
    
    </summary>
    
      <category term="Windows kernel learning" scheme="https://mirokaku.github.io/Blog/categories/Windows-kernel-learning/"/>
    
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/tags/Windows/"/>
    
      <category term="Kernel" scheme="https://mirokaku.github.io/Blog/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>Windows kernel learning: 4. Object Management</title>
    <link href="https://mirokaku.github.io/Blog/2017/4-Object-Management/"/>
    <id>https://mirokaku.github.io/Blog/2017/4-Object-Management/</id>
    <published>2017-05-21T04:24:18.000Z</published>
    <updated>2017-05-26T09:24:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>对象管理是 Windows Executive 的一个子系统实现, 用于管理 Windows 资源. 资源包括物理设备, 文件, 文件目录, 注册表条目, 正在运行的进程等等. 所有子系统访问资源都必须通过对象管理子系统. </p><p>对象实际上就是一组数据结构加操作(函数). </p><p>各种 Object 的共有的信息 (例如, 对象类型, 对象的引用计数, 句柄数等信息) 保存在 OBJECT_HEADER 与其他的几个结构中. 换而言之, 在对象管理器内部, 不同类型的对象具有相同的 Object Header, 但 Object Body 部分却是不同的.</p><a id="more"></a><p>Windows 有三种类型的对象: 内核对象 (Kernel objects) , 执行体对象 (Executive objects), 和 GDI/User 对象. </p><ul><li><p>内核对象: 表示一些基本资源, 如物理设备, 同步服务等等. 用户态的程序不能访问内核对象.  </p></li><li><p>执行体对象: 用户态的系统服务与应用程序使用执行对象, 这是 Windows Executive 对外暴露的对象, 用来封装一个或多个内核对象. 执行对象还用于实现 NT 子系统或 POSIX 子系统的一些功能. </p></li><li><p>用户对象: 每个对象仅有一个句柄, 句柄不能复制或继承, 不能引用其他用户会话中的进程的用户句柄. 任何进程只要有对某个用户句柄访问权限, 即可以访问该用户对象. 一个进程最多有 65536 个用户对象句柄.<br>用户对象包括: 快捷键表 HACCEL, 插入点光标, 鼠标指针 HCURSOR, DDE 会话, 窗口钩子, 图标 HICON, 菜单 HMENU, 窗口 HWND, 窗口位置.</p></li><li><p>GDI 对象: 每个对象仅有一个句柄, 句柄为进程私有. 一个进程最多有 65536 个 GDI 对象句柄.<br>GDI 对象包括: 位图 HBITMAP, 画刷 HBRUSH, 设备环境 (DC) HDC, 增强型图元文件 (EMF) , EMF 设备环境, 字体 HFONT, 内存 DC, 图元文件, 图元文件 DC, 调色板 HPALETTE, 画笔 HPEN, 区域 (Region) HRGN. </p></li></ul><h2 id="Windows-NT-暴露的执行对象"><a href="#Windows-NT-暴露的执行对象" class="headerlink" title="Windows NT 暴露的执行对象"></a>Windows NT 暴露的执行对象</h2><table><thead><tr><th align="left">对象类型</th><th align="left">结构</th><th align="left">代表含义</th></tr></thead><tbody><tr><td align="left">Process</td><td align="left">_EPROCESS</td><td align="left">执行一组线程对象所必须的虚拟地址空间和控制信息</td></tr><tr><td align="left">Thread</td><td align="left">_ETHREAD</td><td align="left">进程内部的一个可执行实体</td></tr><tr><td align="left">Job</td><td align="left">_EJOB</td><td align="left">指一组进程, 通过作业机制, 可以像单个实体那样来管理他们</td></tr><tr><td align="left">Section</td><td align="left">_SECTION_OBJECT</td><td align="left">共享内存的一个区域 (也称为 File mapping)</td></tr><tr><td align="left">File</td><td align="left">_FILE_OBJECT</td><td align="left">一个已打开的文件或者 I/O 设备的实例</td></tr><tr><td align="left">Token</td><td align="left">_TOKEN</td><td align="left">一个进程或者线程的安全轮廓 (安全ID, 用户权限等)</td></tr><tr><td align="left">Event</td><td align="left">_KEVENT</td><td align="left">一种具有持久状态 (有信号或无信号的) 对象,可用于同步或者通知</td></tr><tr><td align="left">Semaphore</td><td align="left">_KSEMAPHORE</td><td align="left">信号量是一个计数器, 提供资源门控制能力, 对于该信号量所保护的资源只允许某个最大数目的线程访问</td></tr><tr><td align="left">Mutex</td><td align="left">_KMUTEX</td><td align="left">用于顺序访问一个资源的一种同步机制</td></tr><tr><td align="left">Timer</td><td align="left">_ETIMER</td><td align="left">这是一种当固定长度的时间过去时通知某个线程的机制</td></tr><tr><td align="left">IoCompletion</td><td align="left"></td><td align="left">使线程能够将 “I/O 操作完成通知” 进出队列的一种方法</td></tr><tr><td align="left">Key</td><td align="left">_CM_KEY_BODY</td><td align="left">一种引用注册表中数据的机制. 虽然键出现在对象管理器的命名空间中, 但是却是由配置管理器来管理的, 其管理方式类似于文件系统驱动程序管理文件对象的方式. 与该键对象关联在一起的有零个或多个键值; 一个键值中包含有关该键的数据</td></tr><tr><td align="left">Directory</td><td align="left"></td><td align="left">对象管理器中命名空间的虚拟目录, 负责包含其他的对象或对象目录</td></tr><tr><td align="left">TpWorkerFactory</td><td align="left"></td><td align="left">负责执行一组特定任务的线程集合. Windows 通过线程池的方式暴露工作者工厂对象</td></tr><tr><td align="left">Tm (资源管理器), TmTx (事务), TmTm (事务管理器), TmEn (登记)</td><td align="left"></td><td align="left">内核事务管理器 (KTM) 为各种事物或登记而使用的对象, 他们是资源管理器或事务管理器的一部分.</td></tr><tr><td align="left">WindowStation</td><td align="left">tagWINDOWSTATION</td><td align="left">该对象包含一个剪贴板, 一组全局原子, 一组桌面对象</td></tr><tr><td align="left">Desktop</td><td align="left">tagDESKTOP</td><td align="left">这是一个包含在窗口站内部的对象. 它有一个逻辑显示器表面, 包含了窗口, 菜单 和 钩子.</td></tr><tr><td align="left">PowerRequest</td><td align="left"></td><td align="left">该对象与一个线程关联在一起, 该线程执行 SetThreadExecutionState 调用请求指定的电源改变, 比如防止睡眠.</td></tr><tr><td align="left">EtwConsumer</td><td align="left"></td><td align="left">代表一个已连接的 ETW 实时消费者已经通过 StartTrace API 进行了注册</td></tr><tr><td align="left">EtwRegistration</td><td align="left"></td><td align="left">代表一个注册对象, 它与某个用户模式(或内核模式) ETW 提供者关联</td></tr><tr><td align="left">SymbolicLink</td><td align="left">_OBJECT_SYMBOLIC_LINK</td><td align="left">被创建用来支持别名,这些别名可以来用帮助映射网络共享</td></tr><tr><td align="left">Type</td><td align="left">_OBJECT_TYPE</td><td align="left">通过元数据来描述所有其他对象常见属性的一个对象</td></tr></tbody></table><blockquote><p>其他对象参考 <span class="exturl" data-url="aHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS93aW5kb3dzL2Rlc2t0b3AvbXM3MjQ1MTUlMjh2PXZzLjg1JTI5LmFzcHg=" title="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724515%28v=vs.85%29.aspx">Windows Object Categories<i class="fa fa-external-link"></i></span></p></blockquote><p>除了以上这些对象之外, 还有 Device, Driver, Adapter 等用于设备驱动的对象类型, 这些对象类型并由有专用的系统调用, 而是借用 <code>NtCreateFile()</code> 作为创建/打开的方法</p><h2 id="对象结构"><a href="#对象结构" class="headerlink" title="对象结构"></a>对象结构</h2><p><img src="Structure-object0.jpg" alt="对象结构图0"><br><img src="Structure-object.jpg" alt="对象结构图"></p><p>如图所示, 每个对象都有一个对象头和一个对象体. 每个对象头中有一个索引, 指向一个被称为类型对象的特殊对象, 该对象包含的信息对于它的每个实例是公共的.</p><p>另外,还可以有多达 7 个可选的子头: </p><ul><li>名称信息头(<code>_OBJECT_HEADER_NAME_INFO</code>)</li><li>配额信息头(<code>_OBJECT_HEADER_QUOTA_INFO</code>)</li><li>进程信息头(<code>_OBJECT_HEADER_PROCESS_INFO</code>)</li><li>句柄信息头(<code>_OBJECT_HEADER_HANDLE_INFO</code>)</li><li>创建者信息头(<code>_OBJECT_HEADER_CREATOR_INFO</code>)</li><li>审计信息头(<code>_OBJECT_HEADER_AUDIT_INFO</code>)</li><li>填充信息头(<code>_OBJECT_HEADER_PADDING_INFO</code>)</li></ul><h2 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h2><p>我们来看下对象头的定义:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: kd&gt; <span class="built_in">dt</span> nt!_OBJECT_HEADER</span><br><span class="line">   +<span class="number">0x000</span> PointerCount     : Int8B</span><br><span class="line">   +<span class="number">0x008</span> HandleCount      : Int8B</span><br><span class="line">   +<span class="number">0x008</span> NextToFree       : Ptr64 Void</span><br><span class="line">   +<span class="number">0x010</span> <span class="keyword">Lock</span>             : _EX_PUSH_LOCK</span><br><span class="line">   +<span class="number">0x018</span> TypeIndex        : UChar</span><br><span class="line">   +<span class="number">0x019</span> TraceFlags       : UChar</span><br><span class="line">   +<span class="number">0x019</span> DbgRefTrace      : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x019</span> DbgTracePermanent : Pos <span class="number">1</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x01a</span> InfoMask         : UChar</span><br><span class="line">   +<span class="number">0x01b</span> Flags            : UChar</span><br><span class="line">   +<span class="number">0x01b</span> NewObject        : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x01b</span> KernelObject     : Pos <span class="number">1</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x01b</span> KernelOnlyAccess : Pos <span class="number">2</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x01b</span> ExclusiveObject  : Pos <span class="number">3</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x01b</span> PermanentObject  : Pos <span class="number">4</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x01b</span> DefaultSecurityQuota : Pos <span class="number">5</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x01b</span> SingleHandleEntry : Pos <span class="number">6</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x01b</span> DeletedInline    : Pos <span class="number">7</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x01c</span> Spare            : Uint4B</span><br><span class="line">   +<span class="number">0x020</span> ObjectCreateInfo : Ptr64 _OBJECT_CREATE_INFORMATION</span><br><span class="line">   +<span class="number">0x020</span> QuotaBlockCharged : Ptr64 Void</span><br><span class="line">   +<span class="number">0x028</span> SecurityDescriptor : Ptr64 Void</span><br><span class="line">   +<span class="number">0x030</span> Body             : _QUAD              <span class="comment">; 占位符, 对象体的位置</span></span><br></pre></td></tr></table></figure><p>Body 就是具体对象类型的数据结构本身, 即一个数据结构的起点.</p><h3 id="对象头中的域"><a href="#对象头中的域" class="headerlink" title="对象头中的域"></a>对象头中的域</h3><table><thead><tr><th align="left">域</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">HandleCount</td><td align="left">维护一个计数值, 记录了当前打开打开的指向该对象的句柄数</td></tr><tr><td align="left">PointerCount</td><td align="left">维护一个计数值, 记录了该对象的引用个数 (每个句柄也算一次引用). 内核模式组件可以不通过句柄, 而直接用指针来引用对象.</td></tr><tr><td align="left">SecurityDescriptor</td><td align="left">决定谁可以使用该对象, 以及允许他们如何使用它. (根据定义, 没有名称的对象是没有安全性的)</td></tr><tr><td align="left">TypeIndex</td><td align="left">包含一个指向类型对象的索引, 该类型对象包含了这种类型对象的公共属性, 所有的类型对象都存储在 <code>nt!ObTypeIndexTable</code> 表中</td></tr><tr><td align="left">InfoMask</td><td align="left">可选头掩码, 除了创建者信息子头外, 只要存在, 就位于对象的前面. 该掩码通过 <code>nt!ObpInfoMaskToOffset</code> 表被转换成一个负的偏移;每个可选头都有一个与之关联的 <code>1</code> 字节索引, 将该可选头置于相对其他子头出现的位置</td></tr><tr><td align="left">Flags</td><td align="left">对象的特征和对象属性</td></tr><tr><td align="left">Lock</td><td align="left">针对每个对象的锁, 当修改该对象头部的域或者任何子头的域时, 需要用到该锁</td></tr><tr><td align="left">TraceFlags</td><td align="left">追踪开启标志, 用来调试引用计数问题</td></tr></tbody></table><div class="note warning">            <p>ObfReferenceObject(), ObReferenceObjectByHandle(), ObReferenceObjectByName() 和 ObReferenceObjectByPointer() 增加的就是这个 PointerCount.<br>ObfDereferenceObject() 和 ObDereferenceObject() 用来减少这个值.</p><p>删除对象跟这个值有关, 如果一个对象是临时的, 那当它的引用记数为 0 的时候, 该对象会被系统删除, 一个驱动程序可以把一个临时对象的引用记数减少到0, 这样就可以达到删除该对象的目的.</p><p>如果一个对象是在创建时标上了 OBJ_PERMANENT 标志, 那它是一个永久的对象, 如果要删除一个永久性的对象, 需要经过下列步骤: </p><ol><li>调用 ObDereferenceObject 把一个永久性的对象的引用记数减少到0 </li><li>调用 ZwOpenXxx or ZwCreateXxx 来获得该永久性对象的一个句柄</li><li>或者得句柄后调用 ZwMakeTemporaryObject 把一个永久性的对象转化成一个临时的对象</li><li>用得到的句柄调用 ZwClose 删除该对象</li></ol><p>所以确定一个对象是临时的和永久的由 InitializeObjectAttributes 宏的 Attributes 决定.</p>          </div><h3 id="对象-Flags"><a href="#对象-Flags" class="headerlink" title="对象 Flags"></a>对象 Flags</h3><table><thead><tr><th align="left">属性标志</th><th align="left">头标志</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">OBJ_INHERIT</td><td align="left">保存在句柄表项中</td><td align="left">决定指向对象的句柄将来是否被子进程继承, 以及进程是否可以使用 DuplicateHandle 来执行句柄复制</td></tr><tr><td align="left">OBJ_PERMANENT</td><td align="left">OB_FLAG_PERMANENT_OBJECT</td><td align="left">定义与引用计数相关的对象保持力行为</td></tr><tr><td align="left">OBJ_EXCLUSIVE</td><td align="left">OB_FLAG_EXCLUSIVE_OBJECT</td><td align="left">决定一个对象只能被创建该对象的进程所使用</td></tr><tr><td align="left">OBJ_CASE_INSENSITIVE</td><td align="left">保存在句柄表项中</td><td align="left">指定在命名空间中查找该对象应该按大小写无关的方式进行</td></tr><tr><td align="left">OBJ_OPENIF</td><td align="left">不保存, 仅在运行时使用</td><td align="left">如果将此标志指定给创建对象的例程, 并且该对象已存在, 则例程应打开该对象. 否则, 创建对象的例程将返回 STATUS_OBJECT_NAME_COLLISION 的 NTSTATUS 代码.</td></tr><tr><td align="left">OBJ_OPENLINK</td><td align="left">不保存, 仅在运行时使用</td><td align="left">指定对象管理器应该打开一个指向符号链接的句柄, 而不是指向目标对象的句柄</td></tr><tr><td align="left">OBJ_KERNEL_HANDLE</td><td align="left">OB_FLAG_KERNEL_OBJECT</td><td align="left">指定指向该对象的句柄应该是一个内核句柄</td></tr><tr><td align="left">OBJ_FORCE_ACCESS_CHECK</td><td align="left">不保存, 仅在运行时使用</td><td align="left">指定即使该对象是用内核模式中打开的, 也要执行完全的访问检查</td></tr><tr><td align="left">OBJ_KERNEL_EXCLUSIVE</td><td align="left">OB_FLAG_KERNEL_ONLY_ACCESS</td><td align="left">禁止任何用户模式进程打开指向该对象的句柄, 用于保护 /Device/PhysicalMemory 内存区对象</td></tr><tr><td align="left">-</td><td align="left">OB_FLAG_DEFAULT_SECURITY_QUOTA</td><td align="left">指定该对象的安全描述符使用模式的 2KB 配额</td></tr><tr><td align="left">-</td><td align="left">OB_FLAG_SINGLE_HANDLE_ENTRY</td><td align="left">指定句柄信息可选头仅包含一项, 而不是一个数据库</td></tr><tr><td align="left">-</td><td align="left">OB_FLAG_NEW_OBJECT</td><td align="left">指定该对象已被创建, 但是尚未被插入到对象命名空间中</td></tr><tr><td align="left">-</td><td align="left">OB_FLAG_DEFER_DELETE_INLINE</td><td align="left">指定该对象正在通过一个延迟删除的辅助线程删除</td></tr></tbody></table><h2 id="可选对象头"><a href="#可选对象头" class="headerlink" title="可选对象头"></a>可选对象头</h2><p>一个对象的可选头包含了用于描述该对象各种类型的元数据. 很明显, 因为它们是可选的, 所以并不是所有的类型的对象都拥有可选头;<br>甚至于相同类型对象的不同实例也可能包含可选头的不同组合. </p><p>这些结构的位置是从对象头的开始减去一个并不固定的偏移量, 此偏移值取决于与对象头相关联的可选头的数量.</p><p>对于所有可选头各种可能的情形, 都存在一个响应的偏移量, 但是因为可选头总是按照固定不变的顺序来分配,<br>所以对于一个给定的头, 它可能出现的位置的数量, 与优先于它而出现的最多可选头数量相同.</p><p>偏移的计算公式为: </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Offset = ObpInfoMaskToOffset[OBJECT_HEADER-&gt;InfoMask &amp; (DesiredHeaderBit | (DesiredHeaderBit<span class="number">-1</span>))]</span><br><span class="line"></span><br><span class="line"><span class="comment">// (DesiredHeaderBit | (DesiredHeaderBit-1)) 表示包含在此可选头结构之前的可选头结构.</span></span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left">名称</th><th align="left">结构</th><th align="right">掩位码</th><th align="left">偏移</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">创建者信息</td><td align="left">_OBJECT_HEADER_CREATOR_INFO</td><td align="right">0 (0x01)</td><td align="left">ObpInfoMaskToOffset[0x01]</td><td align="left">对于所有同一类型的对象, 链接成一个列表, 并记录下创建该对象的进程, 以及一个后向跟踪项</td></tr><tr><td align="left">名称信息</td><td align="left">_OBJECT_HEADER_NAME_INFO</td><td align="right">1 (0x02)</td><td align="left">ObpInfoMaskToOffset[0x03]</td><td align="left">包含对象名称和一个指向对象目录的指针. 对象名称使用该对象对于其他进程也可见, 从而可以共享; 对象目录提供了存储对象名称的层次结构.</td></tr><tr><td align="left">句柄信息</td><td align="left">_OBJECT_HEADER_HANDLE_INFO</td><td align="right">2 (0X04)</td><td align="left">ObpInfoMaskToOffset[0X07]</td><td align="left">包含一个进程项数据库 (或只有一项), 这些进程都有一个已打开的句柄指向该对象 (以及一个针对每个进程的句柄计数)</td></tr><tr><td align="left">配额信息</td><td align="left">_OBJECT_HEADER_QUOTA_INFO</td><td align="right">3 (0x08)</td><td align="left">ObpInfoMaskToOffset[0x0F]</td><td align="left">列出了当一个进程打开指向该对象的句柄时需要消耗的资源花费</td></tr><tr><td align="left">进程信息</td><td align="left">_OBJECT_HEADER_PROCESS_INFO</td><td align="right">4 (0x10)</td><td align="left">ObpInfoMaskToOffset[0x1F]</td><td align="left">如果这是一个排它性对象, 则包含一个指向所有者进程的指针</td></tr><tr><td align="left">审计信息</td><td align="left">_OBJECT_HEADER_AUDIT_INFO</td><td align="right">5 (0x20)</td><td align="left">ObpInfoMaskToOffset[0x3F]</td><td align="left">未知</td></tr><tr><td align="left">填充信息?</td><td align="left">_OBJECT_HEADER_PADDING_INFO</td><td align="right">6 (0x40)</td><td align="left">ObpInfoMaskToOffset[0x7F]</td><td align="left">未知</td></tr></tbody></table><p>对象可选头出现的条件</p><table><thead><tr><th align="left">名称</th><th align="left">条件</th></tr></thead><tbody><tr><td align="left">创建者信息</td><td align="left">对象类型必须已经打开维护类型列表标志. 如果驱动程序检验器被启用, 则驱动程序对象已设置此标志. 然而, 若全局标志维护对象类型列表打开, 所有对象的维护类型列表标志也随之打开, 类型对象总是设置该标志</td></tr><tr><td align="left">名称信息</td><td align="left">对象创建时必须指定名称</td></tr><tr><td align="left">句柄信息</td><td align="left">对象类型必须已打开维护句柄计数标志. 文件对象, ALPC 对象, 窗口站对象和桌面对象已在其对象类型结构中设置了此标志</td></tr><tr><td align="left">配额信息</td><td align="left">对象必须不是由初始系统进程或空闲进程创建的</td></tr><tr><td align="left">进程信息</td><td align="left">对象创建时必须指定排他性对象标志</td></tr><tr><td align="left">审计信息</td><td align="left">开启对象访问审核功能时使用? 本地组策略有这么个选项…</td></tr><tr><td align="left">填充信息</td><td align="left">未知</td></tr></tbody></table><h2 id="“对象类型”-对象-OBJECT-TYPE"><a href="#“对象类型”-对象-OBJECT-TYPE" class="headerlink" title="“对象类型” 对象 (_OBJECT_TYPE)"></a>“对象类型” 对象 (<code>_OBJECT_TYPE</code>)</h2><p>对象类型对象包含一些对于某种特定类型的所有对象皆为常数的数据.</p><p><code>_OBJECT_HEADER</code> 的 <code>TypeIndex</code> 成员是 <code>nt!ObTypeIndexTable</code> (一个类型对象 <code>_OBJECT_TYPE</code> 的数组) 的索引.</p><p>我们来看一下结构定义:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: kd&gt; dtx -r nt!_OBJECT_TYPE</span><br><span class="line">   +<span class="number">0x000</span> TypeList         : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x010</span> Name             : _UNICODE_STRING</span><br><span class="line">   +<span class="number">0x020</span> DefaultObject    : Ptr64 Void</span><br><span class="line">   +<span class="number">0x028</span> Index            : UChar</span><br><span class="line">   +<span class="number">0x02c</span> TotalNumberOfObjects : Uint4B</span><br><span class="line">   +<span class="number">0x030</span> TotalNumberOfHandles : Uint4B</span><br><span class="line">   +<span class="number">0x034</span> HighWaterNumberOfObjects : Uint4B</span><br><span class="line">   +<span class="number">0x038</span> HighWaterNumberOfHandles : Uint4B</span><br><span class="line">   +<span class="number">0x040</span> TypeInfo         : _OBJECT_TYPE_INITIALIZER</span><br><span class="line">      +<span class="number">0x000</span> Length           : Uint2B</span><br><span class="line">      +<span class="number">0x002</span> ObjectTypeFlags  : UChar</span><br><span class="line">      +<span class="number">0x002</span> CaseInsensitive  : Pos <span class="number">0</span>, <span class="number">1</span> Bit            <span class="comment">; 是否大小写敏感</span></span><br><span class="line">      +<span class="number">0x002</span> UnnamedObjectsOnly : Pos <span class="number">1</span>, <span class="number">1</span> Bit          <span class="comment">; 是否永远不会有名称</span></span><br><span class="line">      +<span class="number">0x002</span> UseDefaultObject : Pos <span class="number">2</span>, <span class="number">1</span> Bit            <span class="comment">; 是否使用默认对象</span></span><br><span class="line">      +<span class="number">0x002</span> SecurityRequired : Pos <span class="number">3</span>, <span class="number">1</span> Bit            <span class="comment">; 是否要求安全描述符</span></span><br><span class="line">      +<span class="number">0x002</span> MaintainHandleCount : Pos <span class="number">4</span>, <span class="number">1</span> Bit         <span class="comment">; 是否一共维护句柄数据库 (句柄信息可选头)</span></span><br><span class="line">      +<span class="number">0x002</span> MaintainTypeList : Pos <span class="number">5</span>, <span class="number">1</span> Bit            <span class="comment">; 是否应该维护类型列表链接关系 (创建者信息可选头)</span></span><br><span class="line">      +<span class="number">0x002</span> SupportsObjectCallbacks : Pos <span class="number">6</span>, <span class="number">1</span> Bit     <span class="comment">; 是否支持对象过滤回调</span></span><br><span class="line">      +<span class="number">0x002</span> CacheAligned     : Pos <span class="number">7</span>, <span class="number">1</span> Bit</span><br><span class="line">      +<span class="number">0x004</span> ObjectTypeCode   : Uint4B</span><br><span class="line">      +<span class="number">0x008</span> InvalidAttributes : Uint4B</span><br><span class="line">      +<span class="number">0x00c</span> GenericMapping   : _GENERIC_MAPPING</span><br><span class="line">         +<span class="number">0x000</span> GenericRead      : Uint4B</span><br><span class="line">         +<span class="number">0x004</span> GenericWrite     : Uint4B</span><br><span class="line">         +<span class="number">0x008</span> GenericExecute   : Uint4B</span><br><span class="line">         +<span class="number">0x00c</span> GenericAll       : Uint4B</span><br><span class="line">      +<span class="number">0x01c</span> ValidAccessMask  : Uint4B</span><br><span class="line">      +<span class="number">0x020</span> RetainAccess     : Uint4B</span><br><span class="line">      +<span class="number">0x024</span> PoolType         : </span><br><span class="line">         NonPagedPool = 0n0</span><br><span class="line">         NonPagedPoolExecute = 0n0</span><br><span class="line">         PagedPool = 0n1</span><br><span class="line">         NonPagedPoolMustSucceed = 0n2</span><br><span class="line">         DontUseThisType = 0n3</span><br><span class="line">         NonPagedPoolCacheAligned = 0n4</span><br><span class="line">         PagedPoolCacheAligned = 0n5</span><br><span class="line">         NonPagedPoolCacheAlignedMustS = 0n6</span><br><span class="line">         MaxPoolType = 0n7</span><br><span class="line">         NonPagedPoolBase = 0n0</span><br><span class="line">         NonPagedPoolBaseMustSucceed = 0n2</span><br><span class="line">         NonPagedPoolBaseCacheAligned = 0n4</span><br><span class="line">         NonPagedPoolBaseCacheAlignedMustS = 0n6</span><br><span class="line">         NonPagedPoolSession = 0n32</span><br><span class="line">         PagedPoolSession = 0n33</span><br><span class="line">         NonPagedPoolMustSucceedSession = 0n34</span><br><span class="line">         DontUseThisTypeSession = 0n35</span><br><span class="line">         NonPagedPoolCacheAlignedSession = 0n36</span><br><span class="line">         PagedPoolCacheAlignedSession = 0n37</span><br><span class="line">         NonPagedPoolCacheAlignedMustSSession = 0n38</span><br><span class="line">         NonPagedPoolNx = 0n512</span><br><span class="line">         NonPagedPoolNxCacheAligned = 0n516</span><br><span class="line">         NonPagedPoolSessionNx = 0n544</span><br><span class="line">      +<span class="number">0x028</span> DefaultPagedPoolCharge : Uint4B</span><br><span class="line">      +<span class="number">0x02c</span> DefaultNonPagedPoolCharge : Uint4B</span><br><span class="line">      +<span class="number">0x030</span> DumpProcedure    : Ptr64        void </span><br><span class="line">      +<span class="number">0x038</span> OpenProcedure    : Ptr64        long </span><br><span class="line">      +<span class="number">0x040</span> CloseProcedure   : Ptr64        void </span><br><span class="line">      +<span class="number">0x048</span> DeleteProcedure  : Ptr64        void </span><br><span class="line">      +<span class="number">0x050</span> ParseProcedure   : Ptr64        long </span><br><span class="line">      +<span class="number">0x058</span> SecurityProcedure : Ptr64        long </span><br><span class="line">      +<span class="number">0x060</span> QueryNameProcedure : Ptr64        long </span><br><span class="line">      +<span class="number">0x068</span> OkayToCloseProcedure : Ptr64        unsigned char </span><br><span class="line">      +<span class="number">0x070</span> WaitObjectFlagMask : Uint4B</span><br><span class="line">      +<span class="number">0x074</span> WaitObjectFlagOffset : Uint2B</span><br><span class="line">      +<span class="number">0x076</span> WaitObjectPointerOffset : Uint2B</span><br><span class="line">   +<span class="number">0x0b8</span> TypeLock         : _EX_PUSH_LOCK</span><br><span class="line">   +<span class="number">0x0c0</span> Key              : Uint4B                     <span class="comment">; 一个 4 字节的标签用于唯一标识分配包含特定类型对象的内存</span></span><br><span class="line">   +<span class="number">0x0c8</span> CallbackList     : _LIST_ENTRY</span><br></pre></td></tr></table></figure><p><code>_OBJECT_TYPE</code> 结构和 <code>_OBJECT_TYPE_INITIALIZER</code> 结构中的域:</p><table><thead><tr><th align="left">域</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">Name</td><td align="left">类型对象的名称 (Process, Event, Port 等等)</td></tr><tr><td align="left">PoolType</td><td align="left">指明了这种类型的对象应该从换页的还是非换页的内存分配</td></tr><tr><td align="left">DefaultPagedPoolCharge &amp; DefaultNonPagedPoolCharge</td><td align="left">默认的配额花费, 默认从进程配额中扣除的换页内存值和非换页内存值</td></tr><tr><td align="left">ValidAccessMask</td><td align="left">线程在打开某个指向该类型的对象时, 可以请求的访问类型</td></tr><tr><td align="left">GenericMapping</td><td align="left">通用访问权限的映射关系, 在四种通用的访问权限和特属于该类型的访问权限之间的映射关系</td></tr><tr><td align="left">ObjectTypeFlags</td><td align="left">对象标志, 具体标志在结构中已注解</td></tr><tr><td align="left">ObjectTypeCode</td><td align="left">用于描述这种对象的类型 (对应于另一种方法, 比较名称值). 文件对象设置该类型码为 1, 同步对象设置为 2, 线程对象设置为 4, ALPC 也利用该域来保存一条消息关联的句柄属性信息</td></tr><tr><td align="left">InvalidAttributes</td><td align="left">指明了对象属性标志对此对象类型无效</td></tr><tr><td align="left">DefaultObject</td><td align="left">指定了在等待此对象过程中应该使用的对象管理器内部事件(如果对象类型创建者请求一个默认对象的话). 注意: 特定的对象, 比如文件对象和 ALPC 端口对象, 已经包含了他们自己内嵌的分发器对象. 在这种情况下, 该域是对象体内部的偏移量. 例如, FILE_OBJECT 结构内部的事件位于内嵌的 Event 域中.</td></tr><tr><td align="left">XXXXProcedure</td><td align="left">在一个对象的生命期的特点上, 对象管理器自动调用一个或者多个例程来满足功能</td></tr></tbody></table><div class="note success">            <p>同步是一个对于 Windows 应用程序可见的属性, 它指的是, 一个线程通过等待某个对象从一种状态改成成另一种状态, 从而达到同步其执行过程的能力.<br>一个线程可以通过执行体的作业, 进程, 线程, 文件, 事件, 信号量, 互斥体和定时器对象来进行同步.其他的执行体对象不支持同步.</p><p>一个对象支持同步的能力基于以下三种可能性:</p><ul><li>该执行体对象是一个分发器对象的包装对象, 它包含一个分发器头; 分发器头是一个内核结构.</li><li>对象类型的创建者请求一个默认对象, 而对象管理器提供默认对象.</li><li>执行体对象有一个内嵌的分发器对象, 比如在对象体内部某处的一个事件; 该对象呢的所有者在注册此对象类型时向对象管理器提供了此内嵌对象的偏移量.</li></ul>          </div><h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><p><code>_OBJECT_TYPE_INITIALIZER</code> 结构中 XXXXProcedure 域, 即方法, 是一组内部例程构成的.<br>之所以设计这些对象方法, 是为了针对这样的事实: 某些特定的对象操作是通用的 (关闭, 复制, 安全等). 要将这些通用的操作完全一般化将要求对象管理器设计者必须预知所有的对象类型.</p><p>对象方法:</p><table><thead><tr><th align="left">方法</th><th align="left">何时调用</th></tr></thead><tbody><tr><td align="left">Open</td><td align="left">当对象句柄被打开时</td></tr><tr><td align="left">Close</td><td align="left">当对象句柄被关闭时</td></tr><tr><td align="left">Delete</td><td align="left">在对象管理器删除对象之前</td></tr><tr><td align="left">QueryName</td><td align="left">当线程请求在一个从属命名空间中查询一个对象的名称时(比如文件对象)</td></tr><tr><td align="left">Parse</td><td align="left">当对象管理器在一个从属命名空间中搜索一个对象名称时</td></tr><tr><td align="left">Dump</td><td align="left">未使用</td></tr><tr><td align="left">OkayToClose</td><td align="left">当对象管理器接到指令要关闭句柄时, 针对恶意或者不正确关闭句柄的一个额外保护层</td></tr><tr><td align="left">Security</td><td align="left">当进程读取或改变一个对象在其从属命名空间中的保护属性时</td></tr></tbody></table><p>这一规则的一个例外是安全(Security)例程, 该例程除非另行指明, 否则默认指向 <code>SeDefaultObjectMethod</code>. 此默认例程不需要知道对象的内部结构, 因为它只处理对象的安全描述符.<br>而安全描述符的指针存储在所有对象都适用的对象头, 而不是对象体中.</p><h2 id="对象句柄和进程句柄表"><a href="#对象句柄和进程句柄表" class="headerlink" title="对象句柄和进程句柄表"></a>对象句柄和进程句柄表</h2><p>当一个进程根据名称来创建或者打开一个对象时, 它接收到一个句柄, 代表了对此对象的访问. 句柄的设计使得应用程序不用直接与系统数据结构打交道.</p><p>对象句柄还提供了额外的好处:</p><ol><li>除了所指向的内容不同, 文件句柄, 事件句柄和进程句柄没有区别, 使得可以用一个统一的接口来引用对象, 而无须关心类型.</li><li>对象管理器有独占的权限来创建句柄, 以及找到一个句柄所指的对象. 意味着可以审查调用者的权限.</li></ol><p>对象句柄是一个索引, 指向进程特定的句柄表中的表项, 在 <code>_EPROCESS-&gt;ObjectTable</code> 中指向进程的句柄表.<br>第一个句柄索引是4, 第二个是8, 依此类推.</p><div class="note danger">            <p>系统组件和设备驱动程序通常需要打开一些不应该让用户模式应用程序访问的对象句柄, 这可以通过在内核句柄表(<code>nt!ObpKernelHandleTable</code>)中创建句柄来实现.<br>该表中的句柄只有在内核模式下才可以访问, 但是可以在任何一个进程的环境下. So, 不会招致任何性能影响.</p><p>另外, 内核句柄会被置标志位 <code>KERNEL_HANDLE_MASK</code>. 在 x86 系统中, <code>KERNEL_HANDLE_MASK = 0x80000000</code>, 在 x64 系统中 <code>KERNEL_HANDLE_MASK = 0xFFFFFFFF80000000</code>.</p>          </div><blockquote><p>另外, <code>PspCidTable</code> 这个PID表中的 <code>_HANDLE_TABLE_ENTRY</code> 指向的是对象体, 而 <code>_EPROCESS-&gt;ObjectTable</code> 指向的是对象头.</p></blockquote><p>一个进程的句柄表包含了所有已被该进程打开了句柄的那些对象的指针, 句柄表的实现方式是一个三层结构, 类似于x86内存管理单元实现的从内存地址到物理地址的转译方式.</p><p>子句柄表中包含的表项的数据等于能填满一页的表项数减去一项, 这一项用于处理审计.</p><h3 id="句柄结构"><a href="#句柄结构" class="headerlink" title="句柄结构"></a>句柄结构</h3><p>句柄表项是通过句柄来索引的, 所以我们先看一下句柄的结构</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> STRICT</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> *HANDLE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_HANDLE(name) struct name##__ &#123; int unused; &#125;; typedef struct name##__ *name</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> PVOID HANDLE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_HANDLE(name) typedef HANDLE name</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">typedef</span> HANDLE *PHANDLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXHANDLE</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG_PTR TagBits : <span class="number">2</span>;  <span class="comment">//  Application available tag bits</span></span><br><span class="line">            ULONG_PTR Index : <span class="number">30</span>;   <span class="comment">//  The handle table entry index</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        HANDLE GenericHandleOverlay;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HANDLE_VALUE_INC 4          <span class="comment">// Amount to increment the Value to get to the next handle</span></span></span><br><span class="line"></span><br><span class="line">        ULONG_PTR Value;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125; EXHANDLE, *PEXHANDLE;</span><br></pre></td></tr></table></figure></div><h3 id="句柄表结构"><a href="#句柄表结构" class="headerlink" title="句柄表结构"></a>句柄表结构</h3><p><img src="Structure-Handle.jpg" alt="Windows进程句柄表结构"></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: kd&gt; <span class="built_in">dt</span> nt!_HANDLE_TABLE</span><br><span class="line">   +<span class="number">0x000</span> NextHandleNeedingPool : Uint4B                    <span class="comment">; 当前句柄表的最大句柄值 + 1, 即下一个句柄表扩展的起始句柄值</span></span><br><span class="line">   +<span class="number">0x004</span> ExtraInfoPages   : Int4B</span><br><span class="line">   +<span class="number">0x008</span> TableCode        : Uint8B                         <span class="comment">; 指向顶级句柄表树节点的指针, 其中低三位用来表示有几层句柄表</span></span><br><span class="line">   +<span class="number">0x010</span> QuotaProcess     : Ptr64 _EPROCESS                <span class="comment">; 句柄表的内存资源记录在此进程中</span></span><br><span class="line">   +<span class="number">0x018</span> HandleTableList  : _LIST_ENTRY                    <span class="comment">; 全局句柄表 (`nt!HandleTableListHead`) 的列表, 该字段由全局锁保护</span></span><br><span class="line">   +<span class="number">0x028</span> UniqueProcessId  : Uint4B                         <span class="comment">; 创建进程的ID, 用于回调函数</span></span><br><span class="line">   +<span class="number">0x02c</span> Flags            : Uint4B</span><br><span class="line">   +<span class="number">0x02c</span> StrictFIFO       : Pos <span class="number">0</span>, <span class="number">1</span> Bit                   <span class="comment">; 是否使用 FIFO 风格的重用, 即先释放先重用</span></span><br><span class="line">   +<span class="number">0x02c</span> EnableHandleExceptions : Pos <span class="number">1</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x02c</span> Rundown          : Pos <span class="number">2</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x02c</span> Duplicated       : Pos <span class="number">3</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x030</span> HandleContentionEvent : _EX_PUSH_LOCK             <span class="comment">; 若在访问句柄时发生竞争, 则在此推锁上等待</span></span><br><span class="line">   +<span class="number">0x038</span> HandleTableLock  : _EX_PUSH_LOCK</span><br><span class="line">   +<span class="number">0x040</span> FreeLists        : [<span class="number">1</span>] _HANDLE_TABLE_FREE_LIST    <span class="comment">; 空闲句柄表链表</span></span><br><span class="line">   +<span class="number">0x040</span> ActualEntry      : [<span class="number">32</span>] UChar</span><br><span class="line">   +<span class="number">0x060</span> DebugInfo        : Ptr64 _HANDLE_TRACE_DEBUG_INFO</span><br></pre></td></tr></table></figure><p><strong>TableCode</strong> 域是一个指针, 指向句柄表的最高层表项页面, 它的低 2 位的值代表了当前句柄表的层数.<br>也就是说, 如果 TableCode 的最低 2 位为0, 说明句柄表只有一层, 此种情况下该进程最多只能容纳 <code>LOWLEVEL_THRESHOLD</code> 个句柄, 即 TableCode 指向一个底层句柄表页面, 该页面是一个句柄表项(<code>nt!_HANDLE_TABLE_ENTRY</code>)的数组;<br>如果 TableCode 的最低 2 位为 1, 则说明句柄表有两层, 此种情况下该进程可容纳的句柄数是 <code>MIDLEVEL_THRESHOLD</code>, 即 TableCode 指向一个中层句柄表页面, 该页面包含 <code>MIDLEVEL_COUNT</code> 个指针, 每个指针指向一个低层句柄表页面;<br>如果 TableCode 的最低 2 位为 2, 则说明句柄表有三层, 此种情况下三层结构可容纳的句柄数是 <code>HIGHLEVEL_THRESHOLD</code>.  即 TableCode 指向一个高层句柄表页面, 该页面包含 <code>HIGHLEVEL_COUNT</code> 个指针, 每个指针指向一个中层句柄表页面;<br>但Windows 执行体限定每个进程的句柄数不得超过 <code>MAX_HANDLES</code>.</p><p>TableCode 可以理解成是 <code>_HANDLE_TABLE_ENTRY</code> 多维数组.</p><p>下面是相关的几个宏定义</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define the page size for the AMD64 as 4096 (0x1000).</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE_SIZE 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TABLE_PAGE_SIZE PAGE_SIZE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Absolute maximum number of handles allowed</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_HANDLES (1&lt;&lt;24)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOWLEVEL_COUNT (TABLE_PAGE_SIZE / sizeof(HANDLE_TABLE_ENTRY))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIDLEVEL_COUNT (PAGE_SIZE / sizeof(PHANDLE_TABLE_ENTRY))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HIGHLEVEL_COUNT  MAX_HANDLES / (LOWLEVEL_COUNT * MIDLEVEL_COUNT)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOWLEVEL_THRESHOLD LOWLEVEL_COUNT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIDLEVEL_THRESHOLD (MIDLEVEL_COUNT * LOWLEVEL_COUNT)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HIGHLEVEL_THRESHOLD (MIDLEVEL_COUNT * MIDLEVEL_COUNT * LOWLEVEL_COUNT)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HIGHLEVEL_SIZE (HIGHLEVEL_COUNT * sizeof (PHANDLE_TABLE_ENTRY))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEVEL_CODE_MASK 3</span></span><br></pre></td></tr></table></figure></div><p>好, 现在我们来看一下 <code>ExpLookupHandleTableEntry</code> 是怎么实现根据 HANDLE 从 HandleTable 中找到 HandleTableEntry 的.</p><blockquote><p>这个代码是自己逆向 Windows 8.1 x64 来的. 除了比 WRK 的简洁点, 实际上是一样的.</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE_TABLE_ENTRY *<span class="title">ExpLookupHandleTableEntry</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HANDLE_TABLE *aHandleTable,</span></span></span><br><span class="line"><span class="function"><span class="params">    EXHANDLE aHandle)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE_TABLE_ENTRY *vEntry = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    aHandle.TagBits = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (aHandle.Value &lt; aHandleTable-&gt;NextHandleNeedingPool)</span><br><span class="line">    &#123;</span><br><span class="line">        ULONG_PTR vTableCode = aHandleTable-&gt;TableCode &amp; (~<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">char</span> vLevel = aHandleTable-&gt;TableCode &amp; <span class="number">3</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> *vEntryArray = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = aHandle.Value &amp; <span class="number">0x3FF</span>;          <span class="comment">// Level 0 Index, 10bit</span></span><br><span class="line">        <span class="keyword">int</span> j = (aHandle.Value &gt;&gt; <span class="number">10</span>) &amp; <span class="number">0x1FF</span>;  <span class="comment">// Level 1 Index, 9bit</span></span><br><span class="line">        <span class="keyword">int</span> k = (aHandle.Value &gt;&gt; <span class="number">19</span>);          <span class="comment">// Level 2 Index, other</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == vLevel)</span><br><span class="line">        &#123;</span><br><span class="line">            vEntryArray = (<span class="keyword">char</span>*)vTableCode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == vLevel)</span><br><span class="line">        &#123;</span><br><span class="line">            vEntryArray = (<span class="keyword">char</span>*)(((HANDLE_TABLE_ENTRY**)vTableCode)[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == vLevel)</span><br><span class="line">        &#123;</span><br><span class="line">            vEntryArray = (<span class="keyword">char</span>*)(((HANDLE_TABLE_ENTRY***)vTableCode)[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        vEntry = (HANDLE_TABLE_ENTRY*)&amp;(vEntryArray[ aHandle.Value * <span class="keyword">sizeof</span>(HANDLE_TABLE_ENTRY) / HANDLE_VALUE_INC ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> vEntry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="句柄表项结构"><a href="#句柄表项结构" class="headerlink" title="句柄表项结构"></a>句柄表项结构</h3><p><img src="Structure-Handle-Entry.jpg" alt="句柄表项结构"></p><p>句柄表项的标志位含义:</p><ul><li>L: 锁标志位,说明了该表项当前是否正在使用.</li><li>I: 继承标志位, 指明了该进程创建的进程是否可以在其句柄表中有一份该句柄的副本.</li><li>A: 审计标志位, 关闭该对象时是否应该产生一个审计消息</li><li>P: 关闭保护标志位, 此位保存在访问掩码的未使用部分, 指明了调用者是否允许关闭该句柄.(NtSetInformationObject 系统调用来设置.)</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: kd&gt; <span class="built_in">dt</span> nt!_HANDLE_TABLE_ENTRY</span><br><span class="line">   +<span class="number">0x000</span> VolatileLowValue : Int8B</span><br><span class="line">   +<span class="number">0x000</span> LowValue         : Int8B</span><br><span class="line">   +<span class="number">0x000</span> InfoTable        : Ptr64 _HANDLE_TABLE_ENTRY_INFO</span><br><span class="line">   +<span class="number">0x000</span> Unlocked         : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x000</span> RefCnt           : Pos <span class="number">1</span>, <span class="number">16</span> <span class="meta">Bits</span></span><br><span class="line">   +<span class="number">0x000</span> Attributes       : Pos <span class="number">17</span>, <span class="number">3</span> <span class="meta">Bits</span>                 <span class="comment">; 这就是上面图说的 A, I, L 三个属性位...</span></span><br><span class="line">   +<span class="number">0x000</span> ObjectPointerBits : Pos <span class="number">20</span>, <span class="number">44</span> <span class="meta">Bits</span>               <span class="comment">; 对象地址的中间 44bit 部分. 首部 16bit 部分为 0xFFFF, 尾部 4bit 部分为 0. </span></span><br><span class="line">   +<span class="number">0x008</span> HighValue        : Int8B</span><br><span class="line">   +<span class="number">0x008</span> NextFreeHandleEntry : Ptr64 _HANDLE_TABLE_ENTRY</span><br><span class="line">   +<span class="number">0x008</span> LeafHandleValue  : _EXHANDLE</span><br><span class="line">   +<span class="number">0x008</span> GrantedAccessBits : Pos <span class="number">0</span>, <span class="number">25</span> <span class="meta">Bits</span>                <span class="comment">; 对象权限访问掩码</span></span><br><span class="line">   +<span class="number">0x008</span> NoRightsUpgrade  : Pos <span class="number">25</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x008</span> Spare            : Pos <span class="number">26</span>, <span class="number">6</span> <span class="meta">Bits</span></span><br><span class="line">   +<span class="number">0x00c</span> TypeInfo         : Uint4B                         <span class="comment">; TypeInfo == _OBJECT_HEADER.TypeIndex == _OBJECT_TYPE.Index, 这三个字段是一样的</span></span><br></pre></td></tr></table></figure><p>内核对象的地址算法:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object = (Entry-&gt;ObjectPointerBits &lt;&lt; <span class="number">4</span> ) | <span class="number">0xFFFF000000000000</span>;</span><br></pre></td></tr></table></figure></div><p>其中, 在普通的句柄表项里面存储的是对象头, 所以得到对象体要加上对象头的大小; 而在 PspCidTable 中的句柄表项里面存储的是对象体;</p><p>那么, 这个算法是怎么得到的呢? 在 <code>ObReferenceObjectByHandleWithTag</code> 函数中调用了 <code>ObpReferenceObjectByHandle</code> 来根据句柄得到对象的. </p><p>但是我逆向 <code>ObpReferenceObjectByHandle</code> 函数, 只发现了一半的处理?? 还差 <code>or 0xFFFF000000000000</code> 的代码?? 如果有哪位同学知道, 麻烦告知一下~~</p><p>这行就是我逆向 <code>ObpReferenceObjectByHandle</code> 得到的核心代码, 但是只能得到不完整的地址..</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*vObjectHeader = (_OBJECT_HEADER *)(((<span class="keyword">signed</span> __int64)vObjectHandle &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFFFFFFFFFFFFF0</span>ui64);</span><br></pre></td></tr></table></figure></div><h3 id="用-Windbg-从-Handle-得到-Object"><a href="#用-Windbg-从-Handle-得到-Object" class="headerlink" title="用 Windbg 从 Handle 得到 Object"></a>用 Windbg 从 Handle 得到 Object</h3><p>好~ 那么, 我们就来用 Windbg 来验证一下前面研究的成果好了~</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 我通过 SysinternalsSuite 工具包里面的 TestLimit 工具来设置生成指定数量的句柄, 使其能够建立三级表</span></span><br><span class="line"><span class="comment">; Testlimit64.exe -h -c 4194304</span></span><br><span class="line"><span class="comment">; 4194304 即 0x00400000, 再乘以4就是最大句柄了. 然后我取了倒数第二个句柄 0x00fffff8 (0x00400000 * 4 - 8) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 我们可以通过 !handle 验证下这个句柄</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: kd&gt; !handle <span class="number">0x00fffff8</span> <span class="number">0</span> 0n1184</span><br><span class="line"></span><br><span class="line">PROCESS ffffe00007d36080</span><br><span class="line"><span class="symbol">    SessionId:</span> <span class="number">1</span>  Cid: 04a0    Peb: 7ff5ffff9000  ParentCid: 0a40</span><br><span class="line"><span class="symbol">    DirBase:</span> 48b40000  ObjectTable: ffffc00002aade40  HandleCount: &lt;Data <span class="keyword">Not</span> Accessible&gt;</span><br><span class="line"><span class="symbol">    Image:</span> Testlimit64.exe</span><br><span class="line"></span><br><span class="line"><span class="symbol">fffff8:</span> Object: ffffe00003482190  GrantedAccess: <span class="number">00000000</span> (Inherit) (Audit)</span><br><span class="line"></span><br><span class="line"><span class="comment">; 那么有了句柄, 我们接下来就是先拆分各级 Index, 然后再得到 Entry</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: kd&gt; .formats <span class="number">0x00fffff8</span> </span><br><span class="line">Evaluate expression:</span><br><span class="line"><span class="symbol">  Hex:</span>     <span class="number">00000000</span><span class="string">`00fffff8</span></span><br><span class="line"><span class="string">  Decimal: 16777208</span></span><br><span class="line"><span class="string">  Octal:   0000000000000077777770</span></span><br><span class="line"><span class="string">  Binary:  00000000 00000000 00000000 00000000 00000000 11111111 11111111 11111000</span></span><br><span class="line"><span class="string">  Chars:   ........</span></span><br><span class="line"><span class="string">  Time:    Tue Jul 14 12:20:08 1970</span></span><br><span class="line"><span class="string">  Float:   low 2.35099e-038 high 0</span></span><br><span class="line"><span class="string">  Double:  8.28904e-317</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">; 那么, 可以得到各级索引为 </span></span><br><span class="line"><span class="string">; L0: i = 0x3f8</span></span><br><span class="line"><span class="string">; L1: j = 0x1ff</span></span><br><span class="line"><span class="string">; L2: k = 0x1f</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">; 然后我们得到句柄表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1: kd&gt; dtx _EPROCESS ffffe00007d36080 ObjectTable</span></span><br><span class="line"><span class="string">nt!_EPROCESS</span></span><br><span class="line"><span class="string">   +0x408 ObjectTable : 0xffffc000`</span>02aade40 _HANDLE_TABLE</span><br><span class="line"><span class="number">1</span>: kd&gt; <span class="built_in">dx</span> -<span class="built_in">r1</span> (*((ntkrnlmp!_HANDLE_TABLE *)<span class="number">0xffffc00002aade40</span>))</span><br><span class="line">(*((ntkrnlmp!_HANDLE_TABLE *)<span class="number">0xffffc00002aade40</span>))                 [Type: _HANDLE_TABLE]</span><br><span class="line">    [+<span class="number">0x000</span>] NextHandleNeedingPool : <span class="number">0x1010400</span> [Type: unsigned long]</span><br><span class="line">    [+<span class="number">0x004</span>] ExtraInfoPages   : <span class="number">0</span> [Type: long]</span><br><span class="line">-&gt;  [+<span class="number">0x008</span>] TableCode        : <span class="number">0xffffc00008705292</span> [Type: unsigned __int64]</span><br><span class="line">    [+<span class="number">0x010</span>] QuotaProcess     : <span class="number">0xffffe00007d36080</span> [Type: _EPROCESS *]</span><br><span class="line">    [+<span class="number">0x018</span>] HandleTableList  [Type: _LIST_ENTRY]</span><br><span class="line">    [+<span class="number">0x028</span>] UniqueProcessId  : <span class="number">0x4a0</span> [Type: unsigned long]</span><br><span class="line">    [+<span class="number">0x02c</span>] Flags            : <span class="number">0x8</span> [Type: unsigned long]</span><br><span class="line">    [+<span class="number">0x02c</span> ( <span class="number">0</span>: <span class="number">0</span>)] StrictFIFO       : <span class="number">0x0</span> [Type: unsigned char]</span><br><span class="line">    [+<span class="number">0x02c</span> ( <span class="number">1</span>: <span class="number">1</span>)] EnableHandleExceptions : <span class="number">0x0</span> [Type: unsigned char]</span><br><span class="line">    [+<span class="number">0x02c</span> ( <span class="number">2</span>: <span class="number">2</span>)] Rundown          : <span class="number">0x0</span> [Type: unsigned char]</span><br><span class="line">    [+<span class="number">0x02c</span> ( <span class="number">3</span>: <span class="number">3</span>)] Duplicated       : <span class="number">0x1</span> [Type: unsigned char]</span><br><span class="line">    [+<span class="number">0x030</span>] HandleContentionEvent [Type: _EX_PUSH_LOCK]</span><br><span class="line">    [+<span class="number">0x038</span>] HandleTableLock  [Type: _EX_PUSH_LOCK]</span><br><span class="line">    [+<span class="number">0x040</span>] FreeLists        [Type: _HANDLE_TABLE_FREE_LIST [<span class="number">1</span>]]</span><br><span class="line">    [+<span class="number">0x040</span>] ActualEntry      [Type: unsigned char [<span class="number">32</span>]]</span><br><span class="line">    [+<span class="number">0x060</span>] DebugInfo        : <span class="number">0x0</span> [Type: _HANDLE_TRACE_DEBUG_INFO *]</span><br><span class="line"><span class="number">1</span>: kd&gt; ?? <span class="number">0xffffc00008705292</span> &amp; (~<span class="number">3</span>)</span><br><span class="line">unsigned int64 <span class="number">0xffffc000</span><span class="string">`08705290</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">; 然后我们就能得到 Entry 了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1: kd&gt; ?? *(nt!_HANDLE_TABLE_ENTRY*)&amp;((char*)(((nt!_HANDLE_TABLE_ENTRY ***)0xffffc000`</span><span class="number">08705290</span>)[<span class="number">0x1f</span>][<span class="number">0x1ff</span>]))[<span class="number">0x3f8</span>*<span class="number">4</span>]</span><br><span class="line">struct _HANDLE_TABLE_ENTRY</span><br><span class="line">   +<span class="number">0x000</span> VolatileLowValue : 0n-<span class="number">2305839400881225727</span></span><br><span class="line">   +<span class="number">0x000</span> LowValue         : 0n-<span class="number">2305839400881225727</span></span><br><span class="line">   +<span class="number">0x000</span> InfoTable        : <span class="number">0xe0000348</span><span class="string">`21600001 _HANDLE_TABLE_ENTRY_INFO</span></span><br><span class="line"><span class="string">   +0x000 Unlocked         : 0y1</span></span><br><span class="line"><span class="string">   +0x000 RefCnt           : 0y0000000000000000 (0)</span></span><br><span class="line"><span class="string">   +0x000 Attributes       : 0y000</span></span><br><span class="line"><span class="string">-&gt; +0x000 ObjectPointerBits : 0y11100000000000000000001101001000001000010110 (0xe0000348216)</span></span><br><span class="line"><span class="string">   +0x008 HighValue        : 0n51539607552</span></span><br><span class="line"><span class="string">   +0x008 NextFreeHandleEntry : 0x0000000c`</span><span class="number">00000000</span> _HANDLE_TABLE_ENTRY</span><br><span class="line">   +<span class="number">0x008</span> LeafHandleValue  : _EXHANDLE</span><br><span class="line">   +<span class="number">0x008</span> GrantedAccessBits : <span class="number">0y0000000000000000000000000</span> (<span class="number">0</span>)</span><br><span class="line">   +<span class="number">0x008</span> NoRightsUpgrade  : <span class="number">0y0</span></span><br><span class="line">   +<span class="number">0x008</span> Spare            : <span class="number">0y000000</span> (<span class="number">0</span>)</span><br><span class="line">   +<span class="number">0x00c</span> TypeInfo         : <span class="number">0xc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 最后根据 Entry 得到对象, 0x30 即对象头大小</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: kd&gt; !object ((<span class="number">0xe0000348216</span> &lt;&lt; <span class="number">4</span>) | <span class="number">0xffff000000000000</span>) + <span class="number">0x30</span></span><br><span class="line"><span class="symbol">Object:</span> ffffe00003482190  Type: (ffffe00000090a10) Event</span><br><span class="line"><span class="symbol">    ObjectHeader:</span> ffffe00003482160 (new version)</span><br><span class="line"><span class="symbol">    HandleCount:</span> <span class="number">4194302</span>  PointerCount: <span class="number">4194303</span></span><br><span class="line">    Directory Object: ffffc00003cbceb0  Name: TestLimit</span><br></pre></td></tr></table></figure><h2 id="对象名称"><a href="#对象名称" class="headerlink" title="对象名称"></a>对象名称</h2><p>在创建一群对象时, 一个重要的考虑是, 有必要设计一个成功的系统来跟踪记录这些对象. 为对象命名便是实现方案.</p><p>为了提高效率, 对象管理器只在两种情况下才查找一个名称:</p><ol><li>当一个进程创建一个命名的对象时, 对象管理器在把新的名称存储到全局命名空间以前, 首先查找此名称. 排除重复.</li><li>当一个进程打开一个指向命名对象的句柄时, 对象管理器查找该名称.</li></ol><h2 id="对象目录"><a href="#对象目录" class="headerlink" title="对象目录"></a>对象目录</h2><p>对象目录对象是对象管理器支持这种层次状命名结构的方法. 该对象类似于文件系统中的目录, 包含了其他对象的名称, 甚至可能包含其他的对象目录.</p><p>对象的名称存储在哪里取决于对象的类型.</p><p>标准对象目录:</p><table><thead><tr><th align="left">目录</th><th align="left">所存储的对象名称的类型</th></tr></thead><tbody><tr><td align="left">\ArcNames</td><td align="left">将 ARC 风格的路径映射到NT风格路径的符号链接</td></tr><tr><td align="left">\BaseNamedObjects</td><td align="left">全局的互斥体, 事件, 信号量, 可等待的定时器, ALPC 端口, 符号链接和内存区对象</td></tr><tr><td align="left">\Callback</td><td align="left">回调对象</td></tr><tr><td align="left">\Device</td><td align="left">设备对象</td></tr><tr><td align="left">\Driver</td><td align="left">驱动对象</td></tr><tr><td align="left">\FileSystem</td><td align="left">文件系统驱动程序对象和文件系统识别器设备对象. 过滤器管理器也在 Filters 子键下创建它自己的设备对象</td></tr><tr><td align="left">\GLOBAL??</td><td align="left">MS-DOS 设备名称 (\Session\0\DosDevices&lt;LUID&gt;\Global 目录是指向此目录的符号链接)</td></tr><tr><td align="left">\KernelObjects</td><td align="left">包含了可在某些特定条件下发出信号的事件对象: 低资源条件, 内存错误, 特定操作系统任务的完成; 也包含了代表会话的对象</td></tr><tr><td align="left">\KnownDlls</td><td align="left">已知DLL(在启动时由系统映射的DLL)的内存区名称和路径</td></tr><tr><td align="left">\KnownDlls32</td><td align="left">用于 Wow64 版本的已知DLL</td></tr><tr><td align="left">\Nls</td><td align="left">已映射的国家语言支持表的内存区名称</td></tr><tr><td align="left">\ObjectTypes</td><td align="left">对象类型的名称</td></tr><tr><td align="left">\PSXSS</td><td align="left">如果 UNIX 应用子系统被启用 (通过安装 SUA 组件), 则该目录包含了 UNIX 应用子系统所用到的 ALPC 端口</td></tr><tr><td align="left">\RPC Control</td><td align="left">远程过程调用所使用的 ALPC 端口, 和作为控制台隔离机制一部分的 Conhost.exe 所使用的事件</td></tr><tr><td align="left">\Security</td><td align="left">安全子系统的对象的名称所使用的 ALPC 端口和事件</td></tr><tr><td align="left">\Sessions</td><td align="left">针对每个会话的命名空间目录</td></tr><tr><td align="left">\UMDFCommunicationPorts</td><td align="left">用户模式驱动程序框架 (UMDF) 使用的 ALPC 端口</td></tr><tr><td align="left">\Windows</td><td align="left">Windows 子系统的 ALPC 端口, 共享的内存区和窗口站</td></tr></tbody></table><p>因为注入互斥体, 事件, 信号量, 可等待的定时器, 以及内存区这些基本内核对象将它们的名称存储在同一个对象目录下, 所以对象名称有可能被占用 (或者占坑攻击).</p><p>Windows 采用了私有命名空间的概念来缓解这一问题. 它允许用户模式应用可以通过 <code>CreatePrivateNamespace</code> API 来创建对象目录, 并将对象目录关联上边界描述符.<br>这里的边界描述符是一些用来保护这些目录的特殊数据结构, 其中包含了代表那些安全个体可以访问这些目录的 SID. 类似安全描述符.</p><h3 id="对象目录结构"><a href="#对象目录结构" class="headerlink" title="对象目录结构"></a>对象目录结构</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: kd&gt; dtx _OBJECT_DIRECTORY</span><br><span class="line">nt!_OBJECT_DIRECTORY</span><br><span class="line">   +<span class="number">0x000</span> HashBuckets      : [<span class="number">37</span>] Ptr64 _OBJECT_DIRECTORY_ENTRY</span><br><span class="line">   +<span class="number">0x128</span> <span class="keyword">Lock</span>             : _EX_PUSH_LOCK</span><br><span class="line">   +<span class="number">0x130</span> DeviceMap        : Ptr64 _DEVICE_MAP</span><br><span class="line">   +<span class="number">0x130</span> ShadowDirectory  : Ptr64 _OBJECT_DIRECTORY</span><br><span class="line">   +<span class="number">0x138</span> SessionId        : Uint4B</span><br><span class="line">   +<span class="number">0x140</span> NamespaceEntry   : Ptr64 Void</span><br><span class="line">   +<span class="number">0x148</span> Flags            : Uint4B</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: kd&gt; dtx _OBJECT_DIRECTORY_ENTRY</span><br><span class="line">nt!_OBJECT_DIRECTORY_ENTRY</span><br><span class="line">   +<span class="number">0x000</span> ChainLink        : Ptr64 _OBJECT_DIRECTORY_ENTRY</span><br><span class="line">   +<span class="number">0x008</span> Object           : Ptr64 Void</span><br><span class="line">   +<span class="number">0x010</span> HashValue        : Uint4B</span><br></pre></td></tr></table></figure><p>目录对象是一个有 37 个数组元素组成的哈希树,数组元素的类型是 <code>_OBJECT_DIRECTORY_ENTRY</code>.</p><p>我们以 “&quot;(<code>ObpRootDirectoryObject</code>) 根目录对象来看一下对象目录结构</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: kd&gt; <span class="built_in">dq</span> ObpRootDirectoryObject L1</span><br><span class="line">fffff803<span class="string">`03e51d90  ffffc000`</span>000090f0</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: kd&gt; dtx _OBJECT_DIRECTORY ffffc000<span class="string">`000090f0</span></span><br><span class="line"><span class="string">(*((_OBJECT_DIRECTORY *)0xffffc000000090f0))                 [Type: _OBJECT_DIRECTORY]</span></span><br><span class="line"><span class="string">    [+0x000] HashBuckets      [Type: _OBJECT_DIRECTORY_ENTRY * [37]]</span></span><br><span class="line"><span class="string">    [+0x128] Lock             [Type: _EX_PUSH_LOCK]</span></span><br><span class="line"><span class="string">    [+0x130] DeviceMap        : 0x0 [Type: _DEVICE_MAP *]</span></span><br><span class="line"><span class="string">    [+0x130] ShadowDirectory  : 0x0 [Type: _OBJECT_DIRECTORY *]</span></span><br><span class="line"><span class="string">    [+0x138] SessionId        : 0xffffffff [Type: unsigned long]</span></span><br><span class="line"><span class="string">    [+0x140] NamespaceEntry   : 0x0 [Type: void *]</span></span><br><span class="line"><span class="string">    [+0x148] Flags            : 0x0 [Type: unsigned long]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1: kd&gt; dx -r1 (*((ntkrnlmp!_OBJECT_DIRECTORY_ENTRY * (*)[37])0xffffc000000090f0))</span></span><br><span class="line"><span class="string">(*((ntkrnlmp!_OBJECT_DIRECTORY_ENTRY * (*)[37])0xffffc000000090f0))                 [Type: _OBJECT_DIRECTORY_ENTRY * [37]]</span></span><br><span class="line"><span class="string">    [0]              : 0x0 [Type: _OBJECT_DIRECTORY_ENTRY *]</span></span><br><span class="line"><span class="string">    [1]              : 0xffffc000011e45d0 [Type: _OBJECT_DIRECTORY_ENTRY *]</span></span><br><span class="line"><span class="string">    ... ; 省略</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1: kd&gt; dx -r1 (*((ntkrnlmp!_OBJECT_DIRECTORY_ENTRY *)0xffffc000011e45d0))</span></span><br><span class="line"><span class="string">(*((ntkrnlmp!_OBJECT_DIRECTORY_ENTRY *)0xffffc000011e45d0))                 [Type: _OBJECT_DIRECTORY_ENTRY]</span></span><br><span class="line"><span class="string">    [+0x000] ChainLink        : 0xffffc0000000cd50 [Type: _OBJECT_DIRECTORY_ENTRY *]</span></span><br><span class="line"><span class="string">    [+0x008] Object           : 0xffffe00007c29fc0 [Type: void *]</span></span><br><span class="line"><span class="string">    [+0x010] HashValue        : 0xb8888f8d [Type: unsigned long]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1: kd&gt; dx -r1 (*((ntkrnlmp!_OBJECT_DIRECTORY_ENTRY *)0xffffc0000000cd50))</span></span><br><span class="line"><span class="string">(*((ntkrnlmp!_OBJECT_DIRECTORY_ENTRY *)0xffffc0000000cd50))                 [Type: _OBJECT_DIRECTORY_ENTRY]</span></span><br><span class="line"><span class="string">    [+0x000] ChainLink        : 0x0 [Type: _OBJECT_DIRECTORY_ENTRY *]</span></span><br><span class="line"><span class="string">    [+0x008] Object           : 0xffffc0000000ce00 [Type: void *]</span></span><br><span class="line"><span class="string">    [+0x010] HashValue        : 0x6c1c47fb [Type: unsigned long]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1: kd&gt; !object 0xffffe00007c29fc0 </span></span><br><span class="line"><span class="string">Object: ffffe00007c29fc0  Type: (ffffe00000070b60) Mutant</span></span><br><span class="line"><span class="string">    ObjectHeader: ffffe00007c29f90 (new version)</span></span><br><span class="line"><span class="string">    HandleCount: 0  PointerCount: 1</span></span><br><span class="line"><span class="string">    Directory Object: ffffc000000090f0  Name: PendingRenameMutex</span></span><br></pre></td></tr></table></figure><p>Directory 下的所有对象通过一个 Hash 算法定位其在 HashBuckets 的哪条链表中, <code>_OBJECT_DIRECTORY_ENTRY</code> 通过 ChainLink 组成链表, 如果为 NULL 则表示为该链表最后一个项.</p><h2 id="内核池"><a href="#内核池" class="headerlink" title="内核池"></a>内核池</h2><p>内核池是可以被分割为更小块的用于存储任何类型的数据–内核模式组件(NT内核模块, 第三方设备驱动等等), 请求的一系列内存.<br>与堆比较相似, 每个分配的块都有一个包含统计和调试信息的头(<code>_POOL_HEADER</code>), 我们可以使用这些额外的数据来推断出该内存块属于哪个驱动程序, 并且我们还可以在一定程序上推断出包含该分配内存的结构或者对象的类型.</p><p><img src="pool.jpg" alt="池中的执行体对象"></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: kd&gt; dtx _POOL_HEADER</span><br><span class="line">nt!_POOL_HEADER</span><br><span class="line">   +<span class="number">0x000</span> PreviousSize     : Pos <span class="number">0</span>, <span class="number">8</span> <span class="meta">Bits</span></span><br><span class="line">   +<span class="number">0x000</span> PoolIndex        : Pos <span class="number">8</span>, <span class="number">8</span> <span class="meta">Bits</span></span><br><span class="line">   +<span class="number">0x002</span> BlockSize        : Pos <span class="number">0</span>, <span class="number">8</span> <span class="meta">Bits</span>      <span class="comment">; 分配总的大小, 包含池头部, 对象头部, 以及其他可选的头部</span></span><br><span class="line">   +<span class="number">0x002</span> PoolType         : Pos <span class="number">8</span>, <span class="number">8</span> <span class="meta">Bits</span>      <span class="comment">; 系统内存的类型(_POOL_TYPE, 分页,非分页的, 等等)</span></span><br><span class="line">   +<span class="number">0x000</span> Ulong1           : Uint4B</span><br><span class="line">   +<span class="number">0x004</span> PoolTag          : Uint4B             <span class="comment">; 内存 Tag, 仅执行体对象来说, 标志是从 _OBJECT_TYPE.Key 中得到的</span></span><br><span class="line">   +<span class="number">0x008</span> ProcessBilled    : Ptr64 _EPROCESS</span><br><span class="line">   +<span class="number">0x008</span> AllocatorBackTraceIndex : Uint2B</span><br><span class="line">   +<span class="number">0x00a</span> PoolTagHash      : Uint2B</span><br></pre></td></tr></table></figure><p>Windows 8.1 具有 46 种不同类型的内核对象, 所有这些内核对象都从两个池中的一个池分配, 即PagedPool和NonPagedPoolNx. 下面我们对每个对象的池类型做个总结</p><p>在前面, 我们学习过了对象目录, 所以我们可以直接使用 Windbg 的 <code>!object \ObjectTypes</code> 命令列出所有对象类型, 并查看其中一些对象的池类型</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: kd&gt; !object \ObjectTypes</span><br><span class="line"><span class="symbol">Object:</span> ffffc0000000ce00  Type: (ffffe00000097d60) Directory</span><br><span class="line"><span class="symbol">    ObjectHeader:</span> ffffc0000000cdd0 (new version)</span><br><span class="line"><span class="symbol">    HandleCount:</span> <span class="number">0</span>  PointerCount: <span class="number">48</span></span><br><span class="line">    Directory Object: ffffc000000090f0  Name: ObjectTypes</span><br><span class="line"></span><br><span class="line">    Hash Address          Type                      Name</span><br><span class="line">    ---- -------          ----                      ----</span><br><span class="line">     <span class="number">00</span>  ffffe000001bb5d0 Type                      TmTm</span><br><span class="line">     <span class="number">01</span>  ffffe000001779a0 Type                      Desktop</span><br><span class="line">         ffffe0000008b080 Type                      Process</span><br><span class="line">     <span class="number">03</span>  ffffe00000082080 Type                      DebugObject</span><br><span class="line">     <span class="number">04</span>  ffffe000001776e0 Type                      TpWorkerFactory</span><br><span class="line">     <span class="number">05</span>  ffffe000001baf20 Type                      Adapter</span><br><span class="line">         ffffe000000547e0 Type                      Token</span><br><span class="line">     <span class="number">06</span>  ffffe00007731a60 Type                      DxgkSharedResource</span><br><span class="line">     <span class="number">09</span>  ffffe00005ddbb10 Type                      PcwObject</span><br><span class="line">         ffffe0000305fa20 Type                      WmiGuid</span><br><span class="line">     <span class="number">11</span>  ffffe0000305ea20 Type                      EtwRegistration</span><br><span class="line">     <span class="number">12</span>  ffffe000001c89c0 Type                      Session</span><br><span class="line">         ffffe00000165d50 Type                      Timer</span><br><span class="line">     <span class="number">13</span>  ffffe00000070b60 Type                      Mutant</span><br><span class="line">     <span class="number">14</span>  ffffe00000177f20 Type                      IRTimer</span><br><span class="line">     <span class="number">16</span>  ffffe000001ba9a0 Type                      IoCompletion</span><br><span class="line">     <span class="number">17</span>  ffffe0000779df20 Type                      DxgkSharedSyncObject</span><br><span class="line">         ffffe00000177b00 Type                      WindowStation</span><br><span class="line">         ffffe00000177dc0 Type                      Profile</span><br><span class="line">     <span class="number">18</span>  ffffe000001bbf20 Type                      File</span><br><span class="line">     <span class="number">21</span>  ffffe00000165eb0 Type                      Semaphore</span><br><span class="line">     <span class="number">23</span>  ffffe00003066a20 Type                      EtwConsumer</span><br><span class="line">         ffffe00000177840 Type                      Composition</span><br><span class="line">     <span class="number">25</span>  ffffe000001bb470 Type                      TmTx</span><br><span class="line">         ffffe00000055b00 Type                      SymbolicLink</span><br><span class="line">     <span class="number">26</span>  ffffe00005d8b5b0 Type                      FilterConnectionPort</span><br><span class="line">         ffffe00003001ba0 Type                      Key</span><br><span class="line">         ffffe00000177c60 Type                      KeyedEvent</span><br><span class="line">         ffffe000001774e0 Type                      Callback</span><br><span class="line">     <span class="number">27</span>  ffffe000001bb080 Type                      WaitCompletionPacket</span><br><span class="line">     <span class="number">28</span>  ffffe0000008ff20 Type                      UserApcReserve</span><br><span class="line">         ffffe00000071520 Type                      Job</span><br><span class="line">     <span class="number">29</span>  ffffe000001badc0 Type                      Controller</span><br><span class="line">         ffffe000000986f0 Type                      IoCompletionReserve</span><br><span class="line">     <span class="number">30</span>  ffffe000001bac60 Type                      Device</span><br><span class="line">         ffffe00000097d60 Type                      Directory</span><br><span class="line">     <span class="number">31</span>  ffffe000001c8b20 Type                      <span class="meta">Section</span></span><br><span class="line">         ffffe000001c8f20 Type                      TmEn</span><br><span class="line">         ffffe00000098f20 Type                      Thread</span><br><span class="line">     <span class="number">32</span>  ffffe00000099610 Type                      Type</span><br><span class="line">     <span class="number">33</span>  ffffe00005d8b450 Type                      FilterCommunicationPort</span><br><span class="line">         ffffe0000305df20 Type                      PowerRequest</span><br><span class="line">     <span class="number">35</span>  ffffe000001bb310 Type                      TmRm</span><br><span class="line">         ffffe00000090a10 Type                      Event</span><br><span class="line">     <span class="number">36</span>  ffffe00003058f20 Type                      ALPC Port</span><br><span class="line">         ffffe000001bab00 Type                      Driver</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: kd&gt; dtx _OBJECT_TYPE ffffe000001bb5d0 TypeInfo.PoolType</span><br><span class="line">USBXHCI!_OBJECT_TYPE</span><br><span class="line">   +<span class="number">0x040</span> TypeInfo          : </span><br><span class="line">      +<span class="number">0x024</span> PoolType          : <span class="number">200</span> ( NonPagedPoolNx )</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: kd&gt; dtx _OBJECT_TYPE ffffe000000547e0 TypeInfo.PoolType</span><br><span class="line">USBXHCI!_OBJECT_TYPE</span><br><span class="line">   +<span class="number">0x040</span> TypeInfo          : </span><br><span class="line">      +<span class="number">0x024</span> PoolType          : <span class="number">1</span> ( PagedPool )</span><br></pre></td></tr></table></figure><blockquote><p>另外说一下, <code>!object \ObjectTypes</code> 命令中, 列出的 hash 值实际上就是 <code>\ObjectTypes</code> 对象目录中, HashBuckets 里面的数组索引.</p></blockquote><p>那么我已经总结好成一张表格了</p><table><thead><tr><th align="left">Pool Type</th><th align="left">Object</th></tr></thead><tbody><tr><td align="left">NonPagedPoolNx</td><td align="left">TmTm, Desktop, Process, DebugObject, TpWorkerFactory, Adapter, WmiGuid, EtwRegistration, Session, Timer, Mutant, IRTimer, IoCompletion, WindowStation, Profile, File, Semaphore, EtwConsumer, CompositionSurface, TmTx, FilterConnectionPort, Callback, WaitCompletionPacket, UserApcReserve, Job, Controller, IoCompletionReserve, Device, TmEn, Thread, Type, FilterCommunicationPort, PowerRequest, TmRm, Event, ALPC Port, Driver</td></tr><tr><td align="left">PagedPool</td><td align="left">Token, DxgkSharedResource, PcwObject, DxgkSharedSyncObject, SymbolicLink, Key, KeyedEvent, Directory, Section</td></tr></tbody></table><h2 id="引用参考"><a href="#引用参考" class="headerlink" title="引用参考"></a>引用参考</h2><blockquote><p><span class="exturl" data-url="aHR0cDovL3d3dy5mcmVlYnVmLmNvbS9zZWN0b29sLzEyNDgwMC5odG1s" title="http://www.freebuf.com/sectool/124800.html">利用Volatility进行Windows内存取证分析(二)：内核对象、内核池学习小记<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3d3dy5jb2RlbWFjaGluZS5jb20vYXJ0aWNsZV9vYmplY3RoZWFkZXIuaHRtbA==" title="http://www.codemachine.com/article_objectheader.html">Windows 7 Object Headers<i class="fa fa-external-link"></i></span></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对象管理是 Windows Executive 的一个子系统实现, 用于管理 Windows 资源. 资源包括物理设备, 文件, 文件目录, 注册表条目, 正在运行的进程等等. 所有子系统访问资源都必须通过对象管理子系统. &lt;/p&gt;
&lt;p&gt;对象实际上就是一组数据结构加操作(函数). &lt;/p&gt;
&lt;p&gt;各种 Object 的共有的信息 (例如, 对象类型, 对象的引用计数, 句柄数等信息) 保存在 OBJECT_HEADER 与其他的几个结构中. 换而言之, 在对象管理器内部, 不同类型的对象具有相同的 Object Header, 但 Object Body 部分却是不同的.&lt;/p&gt;
    
    </summary>
    
      <category term="Windows kernel learning" scheme="https://mirokaku.github.io/Blog/categories/Windows-kernel-learning/"/>
    
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/tags/Windows/"/>
    
      <category term="Kernel" scheme="https://mirokaku.github.io/Blog/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>PDU 编码规则</title>
    <link href="https://mirokaku.github.io/Blog/2017/PDU-Encode/"/>
    <id>https://mirokaku.github.io/Blog/2017/PDU-Encode/</id>
    <published>2017-05-18T03:36:02.000Z</published>
    <updated>2019-05-16T09:43:44.146Z</updated>
    
    <content type="html"><![CDATA[<p>PDU模式不仅支持中文短信，也能发送英文短信。PDU模式收发短信可以使用3种编码：7-bit、8-bit和UCS2编码。<br>7-bit编码用于发送普通的ASCII字符，8-bit编码通常用于发送数据消息，UCS2编码用于发送Unicode字符。</p><a id="more"></a><p>PDU 内容总长度 140 个字节 (1120位)，支持采用三种编码方式：7-bit、8-bit 和 UCS2 编码。<br>7-bit 编码——用于发送普通的 ASCII 字符，ASCII码表最大到0x7X，最高位为0，总 7-bit，实际编码时则可把8-bit的最高位比特使用起来，所以可支持1120/7=160个字符；<br>8-bit 编码——用于发送数据消息，比如图片和铃声、二进制数据等，此类数据无法使用 7-bit 编码，因为那样会丢掉一位，也不能用下面UCS2编码，因为不符合 UNICODE 编码检查（范围）。8-bit 编码最多支持 140 个字节数据。<br>UCS2 编码——用于发送 Unicode 字符，每个中文（韩文、日文），占用 2 字节，只要短信里包含这些多字节编码文字，那么即使还有英文，英文也需要安装 UCS2 编码，也占用 2 字节，所以，最多支持 70 个中文字（或中英混合短信）</p><h1 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h1><p>一般的PDU编码由A B C D E F G H I J K L M十三项组成:</p><p>SCA (短信中心) 结构部分：<br>AT指令中 AT+CMGS=<len> Len不包含此段位组的长度</len></p><table><thead><tr><th align="left">Index</th><th align="left">Item</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">A</td><td align="left"><code>&lt;sc_len&gt;</code></td><td align="left">B+C的长度, 1Byte</td></tr><tr><td align="left">B</td><td align="left"><code>&lt;type_addr&gt;</code></td><td align="left">SMSC地址类型, 1Byte</td></tr><tr><td align="left">C</td><td align="left"><code>&lt;number&gt;</code></td><td align="left">SMSC 号码</td></tr></tbody></table><p>TPUD 结构部分：</p><table><thead><tr><th align="left">Index</th><th align="left">Item</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">D</td><td align="left"><code>&lt;option&gt;</code></td><td align="left">基本参数(TP-MTI/VFP), 1Byte</td></tr><tr><td align="left">E</td><td align="left"><code>&lt;MR&gt;</code></td><td align="left">短信标识符(TP-MR), 1Byte</td></tr><tr><td align="left">F</td><td align="left"><code>v</code></td><td align="left">目标号码长度, 1Byte</td></tr><tr><td align="left">G</td><td align="left"><code>&lt;DA&gt;</code></td><td align="left">被叫号码类型, 1Byte</td></tr><tr><td align="left">H</td><td align="left"><code>^</code></td><td align="left">被叫号码, 长度由F中的数据决定</td></tr><tr><td align="left">I</td><td align="left"><code>&lt;PID&gt;</code></td><td align="left">协议标识(TP-PID), 1Byte</td></tr><tr><td align="left">J</td><td align="left"><code>&lt;DCS&gt;</code></td><td align="left">数据编码(TP-DCS), 1Byte</td></tr><tr><td align="left">K</td><td align="left"><code>&lt;VP&gt;</code></td><td align="left">有效期(TP-VP), 1Byte</td></tr><tr><td align="left">L</td><td align="left"><code>&lt;UDL&gt;</code></td><td align="left">用户数据长度(TP-UDL), 1Byte</td></tr><tr><td align="left">M</td><td align="left"><code>&lt;UD&gt;</code></td><td align="left">用户数据</td></tr></tbody></table><h2 id="SCA-结构部分详细说明"><a href="#SCA-结构部分详细说明" class="headerlink" title="SCA 结构部分详细说明"></a>SCA 结构部分详细说明</h2><p><code>&lt;sc_len&gt;</code>：表示 <sca>（短信中心号码）的长度，包含两个字符，指示 <type_addr> 和 <numbers> 所占字符的个数除于 2。</numbers></type_addr></sca></p><p><code>&lt;type_addr&gt;</code>：表示号码地址类型，包含两个字符，其结构如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bit7    bit6    bit5    bit4    bit3    bit2    bit1    bit0</span><br><span class="line">1          Type-of-number       Numbering-plan-identification</span><br><span class="line">1       0       0       1       0       0       0       1</span><br></pre></td></tr></table></figure></div><p>bit7 固定为 1</p><p>Type-of-number (bit6-bit4) 取值如下：</p><table><thead><tr><th align="left">value</th><th align="left">Descation</th></tr></thead><tbody><tr><td align="left">000</td><td align="left">若用户不能识别目标地址号码时，选用此值。此时地址号码由网络侧决定。</td></tr><tr><td align="left">001</td><td align="left">若用户能识别是国际号码或者或者认为是国内范围时，选用此值。</td></tr><tr><td align="left">010</td><td align="left">国内号码，不允许加前缀或者后缀。在用户发送国内电话时，选用此值。</td></tr><tr><td align="left">011</td><td align="left">本网络内的特定号码，用于管理或者服务，用户不能选用此值。</td></tr><tr><td align="left">101</td><td align="left">号码类型为 GSM 的缺省 7-bit 编码方式。</td></tr><tr><td align="left">110</td><td align="left">短小号码，暂不使用。</td></tr><tr><td align="left">111</td><td align="left">扩展保留，暂不使用。</td></tr></tbody></table><p>Numbering-plan-identification (bit3-bit0) 取值如下：<br>(注：当 bit6-bit4 取值为 000, 001, 010 时才有效，其他情况 bit3-bit0 无效)</p><table><thead><tr><th align="left">value</th><th align="left">Descation</th></tr></thead><tbody><tr><td align="left">0000</td><td align="left">号码由网络侧的号码方案确定</td></tr><tr><td align="left">0001</td><td align="left">ISDN/电话号码方案</td></tr><tr><td align="left">0011</td><td align="left">数据号码方案，暂不使用</td></tr><tr><td align="left">0100</td><td align="left">Telex 号码方案，暂不使用</td></tr><tr><td align="left">1000</td><td align="left">国内号码方案，暂不使用</td></tr><tr><td align="left">1001</td><td align="left">私人号码方案，暂不使用</td></tr><tr><td align="left">1010</td><td align="left">ERMES 号码方案，暂不使用</td></tr></tbody></table><p><code>&lt;numbers&gt;</code>：表示地址号码，一个字节储存两个数字，且 bit3 ~ bit0 储存第一个数字，bit7 ~ bit4 储存第二个数字，如果号码为奇数，则最后一位补F后，再进行反转。如果为偶数，则不需要补F。像是反序的 8421 BCD 码，可如下例所示：</p><p>例如有<br>13 81 23 45 67 8<br>存储为<br>21 18 32 54 76 F8</p><h2 id="TPDU-结构部分"><a href="#TPDU-结构部分" class="headerlink" title="TPDU 结构部分"></a>TPDU 结构部分</h2><p><code>&lt;option&gt;</code>：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RP    UDHI    SRR    VPF    RD    MTI</span><br><span class="line">bit7  bit6    bit5   bit4-3 bit2  bit1-0</span><br></pre></td></tr></table></figure></div><ul><li><code>&lt;MTI&gt;</code>：表示短消息类型。</li></ul><table><thead><tr><th align="left">bit1</th><th align="left">bit0</th><th align="left">Descrption</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">0</td><td align="left">SMS-DELIVER (SC 到 MT 方向)</td></tr><tr><td align="left">0</td><td align="left">0</td><td align="left">SMS-DELIVER-REPORT (MT 到 SC 方向)</td></tr><tr><td align="left">1</td><td align="left">0</td><td align="left">SMS-STATUS-REPORT (SC 到 MT 方向)</td></tr><tr><td align="left">1</td><td align="left">0</td><td align="left">SMS-COMMAND (MT 到 SC 方向)</td></tr><tr><td align="left">0</td><td align="left">1</td><td align="left">SMS-SUBMIT (MT 到 SC 方向)</td></tr><tr><td align="left">0</td><td align="left">1</td><td align="left">SMS-SUBMIT-REPROT (SC 到 MT 方向)</td></tr><tr><td align="left">1</td><td align="left">1</td><td align="left">保留</td></tr></tbody></table><ul><li><code>&lt;RD&gt;</code>：指示 SC 是否需要接受一个仍保存在 SC 中，与以前同一 OA 发出具有相同的 MR 和 DA 的短消息。</li></ul><p>0 接受<br>1 不接受</p><ul><li><code>&lt;VPF&gt;</code>：指示 VP 字段格式的有效性，格式指示。</li></ul><table><thead><tr><th align="left">bit1</th><th align="left">bit0</th><th align="left">Descrption</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">0</td><td align="left">VP 字段无效</td></tr><tr><td align="left">1</td><td align="left">0</td><td align="left">VP 字段有效，格式为 “relative”</td></tr><tr><td align="left">0</td><td align="left">1</td><td align="left">VP 字段有效，格式为 “enhanced”</td></tr><tr><td align="left">1</td><td align="left">1</td><td align="left">VP 字段有效，格式为 “absolute”</td></tr></tbody></table><ul><li><code>&lt;RP&gt;</code>：回复短信路径的设置指示，与短信发送时的设置相同。</li></ul><p>0 没有设置<br>1 设置，指示回复短信与发送时具有相同的 SC 号码设置，返回路径相同。</p><ul><li><code>UDHI</code>：用户数据头的指示。</li></ul><p>0 用户数据段只有短消息的内容<br>1 用户数据段除了短消息外，还包含有一个数据头</p><ul><li><code>&lt;SRR&gt;</code>：状态报告请求指示。</li></ul><p>0 不需要一个短信成功发送的状态报告信息<br>1 需要一个短信成功发送的状态报告信息</p><ul><li><code>&lt;MR&gt;</code>：表示短信标识符，取值范围为 0～255。</li></ul><p><code>&lt;DA&gt;</code>：目标地址信息，结构同 SCA，但是有一点不同需要注意！就是 len 字段不再是 type 和 number 的字节长度，而是 number 的字符长度  </p><p><code>&lt;PID&gt;</code>：协议指示。</p><ul><li>Bit7-6 :</li></ul><table><thead><tr><th align="left">Bit7</th><th align="left">Bit6</th><th align="left">(目前， Bit 7=0 和 Bit 6=0)</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">0</td><td align="left">分配 bits 0-5</td></tr><tr><td align="left">1</td><td align="left">0</td><td align="left">分配 bits 0-5</td></tr><tr><td align="left">0</td><td align="left">1</td><td align="left">保留</td></tr><tr><td align="left">1</td><td align="left">1</td><td align="left">分配 bits 0-5，为 SC 的特殊用途</td></tr></tbody></table><ul><li>Bit5 :</li></ul><p>0 无交互操作，但有 SME-to-CSME 协议<br>1 Telematic 交互操作 （此情况下， bit 4-0 的取值有效）</p><ul><li>Bit4-0 :</li></ul><p>若取值为 10010，则表示 Email ，其它取值暂不支持。</p><p><code>&lt;DSC&gt;</code>：表示用户数据的编码方式。</p><p>00 7-bit 编码 (英文)<br>04 8-bit 编码 (图片和铃声)<br>08 16-bit 编码 (UCS2)</p><p>Bit No.7与Bit No.6：<br>一般设置为00</p><p>Bit No.5：<br>0-文本未压缩<br>1-文本用GSM标准压缩算法压缩</p><p>Bit No.4：<br>0-指示Bit No.1 Bit No.0为保留位，不含信息类型信息<br>1-指示Bit No.1 Bit No.0含信息类型信息</p><p>Bit No.3与Bit No.2：<br>00-默认的字符集，每字符占7bit，此时最大可发送160字符<br>01-8bit，此时最大可发送140字符<br>10-USC2（16bit），发送双字节字符集<br>11-预留</p><p>Bit N0.1与Bit No.0：<br>00-Class 0，短消息直接显示在屏幕上<br>01-Class 1，<br>10-Class 2（SIM卡特定信息），<br>11-Class 3</p><p><code>&lt;VP&gt;</code>：表示有效期，时间从短消息被 SC 接收到开始计算。如果 <vpf>=00，则该字段缺失，时间表示如下：</vpf></p><table><thead><tr><th align="left">VP 取值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">0~143</td><td align="left">(VP + 1) x 5 minutes</td></tr><tr><td align="left">144~167</td><td align="left">12 hours + ((VP - 143) x 30 minutes)</td></tr><tr><td align="left">168~196</td><td align="left">(VP - 166) x 1 day</td></tr><tr><td align="left">197~255</td><td align="left">(VP - 192) x 1 week</td></tr></tbody></table><p><code>&lt;UDL&gt;</code>：表示用户数据长度，取值取决于具体的编码方式。</p><ul><li>若是 7-bit 缺省编码， <udl> 表示共有多少个 septets。</udl></li><li>若是 8-bit 编码， <udl> 表示共有多少个 Octets。</udl></li><li>若是 UCS2 编码， <udl> 表示共有多少个 Octets。</udl></li><li>若是有压缩的 7-bit 或 8-bit 或 UCS2 编码， <udl> 表示压缩后共有多少个 Octets。</udl></li><li>对压缩的短信编码， <ud> 的数据长度不超过 160 septets；对无压缩编码的短信， <ud> 长度不超过 140 Octets。</ud></ud></li></ul><p><code>&lt;UD&gt;</code>：表示用户数据，其有效数据由参数 <udl> 决定。</udl></p><h1 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">AT+CMGW=30</span><br><span class="line">0891683108705505F011000791680180F60008AA1200480065006C006C006F002055B555B5FF01</span><br><span class="line"></span><br><span class="line">AT 指令后面这个长度是 &lt;TPUD 结构的8位字节个数&gt;</span><br><span class="line"></span><br><span class="line">首先看下 SCA 结构 0891683108705505F0</span><br><span class="line"></span><br><span class="line">0x08</span><br><span class="line">SCA 号码类型和号码的长度</span><br><span class="line"></span><br><span class="line">0x91</span><br><span class="line">SCA 号码为国际号码，即 &quot;+&quot;</span><br><span class="line"></span><br><span class="line">683108705505F0</span><br><span class="line">可解析短信中心号码为 8613800755500</span><br><span class="line"></span><br><span class="line">然后看下 TPUD 结构 11000791680180F60008AA1200480065006C006C006F002055B555B5FF01</span><br><span class="line"></span><br><span class="line">0x11 options</span><br><span class="line">Bit No. 7       6       5       4       3       2       1       0</span><br><span class="line">        RP      UDHI    SRR     VPF     VPF     RD      MTI     MTI</span><br><span class="line">        0       0       0       1       0       0       0       1</span><br><span class="line"></span><br><span class="line">0x00 MR</span><br><span class="line">置为00即可</span><br><span class="line"></span><br><span class="line">0791680180F6 DA</span><br><span class="line">解析为 07 91 8610086</span><br><span class="line"></span><br><span class="line">0x00 PID</span><br><span class="line">对于标准情况下的MS-to-SC短消息传送，只需设置PID为00</span><br><span class="line"></span><br><span class="line">0x08 DCS</span><br><span class="line">USC2（16bit）双字节字符集</span><br><span class="line"></span><br><span class="line">0xAA 有效期</span><br><span class="line"></span><br><span class="line">第一种情况（相对的）：VPF=10  VP=AAH（四天），在这里是第一种</span><br><span class="line">第二种情况（绝对的）：VPF=11</span><br><span class="line"></span><br><span class="line">年月日时分秒时区</span><br><span class="line">30800290543320</span><br><span class="line">           表示：03-08-20 09:45:33</span><br><span class="line"></span><br><span class="line">0x12 UDL</span><br><span class="line">18 个8位字节</span><br><span class="line"></span><br><span class="line">0048 0065 006C 006C 006F 0020 55B5 55B5 FF01</span><br><span class="line">H    e    l    l    o    空格  喵   喵   ！</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PDU模式不仅支持中文短信，也能发送英文短信。PDU模式收发短信可以使用3种编码：7-bit、8-bit和UCS2编码。&lt;br&gt;7-bit编码用于发送普通的ASCII字符，8-bit编码通常用于发送数据消息，UCS2编码用于发送Unicode字符。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PDU" scheme="https://mirokaku.github.io/Blog/tags/PDU/"/>
    
  </entry>
  
  <entry>
    <title>Windows kernel learning: 3. Memory Management</title>
    <link href="https://mirokaku.github.io/Blog/2017/3-Memory-Management/"/>
    <id>https://mirokaku.github.io/Blog/2017/3-Memory-Management/</id>
    <published>2017-05-15T07:00:36.000Z</published>
    <updated>2017-05-19T17:11:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个操作系统要称为现代意义上的操作系统就必须提供对内核的保护, 对不同用户程序之间的隔离, 并允许软件的载入位置浮动.<br>而满足这些基本要求的手段, 就是采用基于页面映射的 “虚拟内存” 机制, 或者说提供 “分页内存管理”.</p><p>在硬件上, 这是由 CPU 芯片的 “存储管理单元” MMU 支持的. 而在软件商, 则由操作系统内核中的内存管理模块实现.</p><a id="more"></a><p>采用分页内存管理时, 程序中所使用的内存地址, 即 CPU 中的运算单元 ALU 所发出的都是 “虚拟地址”, “虚拟地址” 是不能直接用来访问物理内存的, 需要 MMU 将其 “映射” 到某个物理页面上转换成 “物理地址” 才能访问.</p><p><img src="MMU.jpg" alt="MMU示意图"></p><p>这种映射是以页面为单位的,而不是以单个地址为单位的. 此外, MMU 还担负着检查访问权限的任务, 可以根据 CPU 的当前状态和访问形式决定是否允许访问.</p><p>为什么要有这样的映射呢?</p><ul><li>每个进程的虚拟地址的范围是相同的, 但是实际映射的确是物理内存中不同的部位, 这样就实现了软件载入(物理)地址的浮动.</li><li>不同进程的虚拟地址被映射到物理内存中不同的页面集合, 每个进程都有自己的映射, 互相之间没有交集, 解决了进程间隔离的问题.</li><li>把 CPU 的运行状态分成 “用户态” 和 “内核态”, 其虚拟地址范围也分成两个部分, 一部分属于内核, 另一部分属于用户程序. 并使 CPU 运行于用户态时就没有访问内核部分的权限, 这就解决了保护内核的问题.</li></ul><p>MMU 怎么知道哪一个虚拟页面应当被映射到哪一个物理页面呢? 为此就需要有个 “页面映射表”.</p><p>页面映射表实际上是个以虚拟内存页面号为下标的数组, 数组中的元素称为页面映射表项, 表项的内容决定了相应的虚拟内存页面是否有映射, 映射到哪一个物理页面, 以及该物理页面的保护模式 (权限要求和所允许的访问模式).</p><p>每个进程都有自己的页面映射表. CPU 在执行哪一个进程的程序, 就使用哪一个进程的页面映射表. CPU 有个专门的控制寄存器 CR3, 这个寄存器总是指向当前进程的页面映射表 (使用物理地址).</p><p>CPU 根据实际需要把当前用到的页面映射表项告诉混存在内部的 TLB (地址转换便查缓冲区) 中, 是 CPU 内部一块专用的, 特殊的 (只读) 高速缓存. 每当需要使用一个页面映射表项时, MMU 首先在 TLB 中寻找, 找到就不需要访问物理内存了, 找不到才从物理内存装入所需的表项.</p><p>在 CPU 的页面映射机制中, MMU 的作用是:</p><ul><li>根据虚拟内存地址计算出该地址所属的页面;</li><li>再根据页面映射表的起始地址计算出该页面映射表项所在的物理地址;</li><li>根据物理地址在高速缓存的 TLB 中寻找该表象的内容;</li><li>如果该表项不在 TLB 中, 就从内存将其内容装载到 TLB 中;</li><li>检查该表项的 PA_PRESENT 标志位, 如果为1就表示映射的目标为某个物理页面, 因而可以访问这个页面, 但是需要进一步检查是否具有所要求的访问权限, 权限不足就会产生一次页面异常.</li><li>如果 PA_PRESENT 标志位为0, 则说明该虚拟内存页面的映像不在内存中, 当前指令因此失败, CPU 为此产生一次页面异常, 此时响应的异常处理程序采取响应措施:<ol><li>如果整个页面映射表象为 0, 就说明该虚拟内存页面尚无映射, 对策是检查该虚拟内存页面是否落在已分配使用的区间, 如果是就为其分配物理页面并建立映射,然后重新执行失败的指令; 如果不是就属于越界访问, 应该引起更高层次的出错处理, 直至终止当前进程的运行.</li><li>如果整个页面映射表项非 0, 就说明虚拟内存页面的映像存在某个页面倒换文件之中, 对策是为其分配物理页面, 从页面倒换文件读入该页面的映像, 并将该页面映射表项修改为指向此物理页面, 然后重新执行失败的指令.</li></ol></li></ul><p>不过系统的分页内存管理实际上是段式内存管理机制基础之上的分页内存管理, 即二者结合.<br>机器指令中所用的地址其实是以 “段 + 偏移” 的形式给定 “逻辑地址”, 每个段都有一个 64 位的段描述符块, 里面说明的段的起点, 长度, 访问权限的要求等信息. 而段寄存器的内容则为 “段选择项”,</p><p>程序实际用于数据存储的内存区间可以分为三类:</p><ul><li>全局数据所占用的空间, 这是在编译/链接的时候就静态的分配好的,并于整个可执行程序共存亡. 其分配和释放都是不可见的.</li><li>局部数据所占用的空间, 一般是在调用一个函数或分配局部变量的时候, 自动从栈上动态分配的, vu你在于这个函数的调用框架之中, 其寿命取决于 CPU 运行于这个函数中的时间. 这部分空间的分配和释放也是不可见的.</li><li>通过 malloc 一类的函数动态分配的堆缓冲区, 所占用的空间一直会存在到通过 free 一类的函数加以释放, 或者程序退出运行. 其空间的分配和释放是可见的, 运行中的程序完全掌握主动, 也承担责任.</li></ul><hr><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="处理器对虚拟地址的限制"><a href="#处理器对虚拟地址的限制" class="headerlink" title="处理器对虚拟地址的限制"></a>处理器对虚拟地址的限制</h3><p>一个 64 位的 CPU 可以寻址 2^64 字节的内存, 这是一个巨大的地址空间, 远超系统所需要的.<br>由于虚拟地址必须被翻译, 因此内存管理单元必须处理每个地址位, 因此其复杂性随地址大小而增加.</p><p>因此, <strong>当前的 x64 处理器实际上将可用位数限制为 48 位</strong>, 但是有个巧妙的方案.</p><p>简单的不允许使用位 48-63 将导致虚拟内存地址限制在 256TB 以下, 这将使操作系统设计复杂化.<br>例如在 32 位 Windows 中, 完整的 32 位虚拟地址可用, 系统代码和数据放置在虚拟地址空间的上半部分, 即高于 2GB, 从而在应用程序和系统代码之间有了清晰的分界. 如果地址限制在 256TB, 远远低于 8EB 一半的大小, 那么在 x64 中是不可能的.</p><p>所以高 16 位被用作符号扩展 (任何虚拟地址的48位至63位必须与47位一致)<br>这意味着我们有两个有效的地址范围:</p><ul><li><code>0 - 0x7FFF&#39;FFFFFFFF</code> 47~63 位都是0</li><li><code>0xFFFF8000&#39;00000000 - FFFFFFFF&#39;FFFFFFFF</code> 47~63 位都是 1</li></ul><p><img src="valid-address.jpg" alt="规范地址范围"><br><img src="valid-address2.jpg" alt="规范地址范围2"></p><p>x64 代码中使用的所有地址必须是规范形式的, 即从 63 位到实现位都是 0 或 1. 尝试使用非规范地址会导致页面错误异常.</p><h3 id="页面翻译概述"><a href="#页面翻译概述" class="headerlink" title="页面翻译概述"></a>页面翻译概述</h3><p>处理器使用内存中的一组表来确定与虚拟内存对应的物理地址.</p><p><img src="Virtual2Physical.jpg" alt="虚拟地址到物理地址的翻译 Long-Mode"></p><p>在长模式下, 可提供 4KB, 2MB 和 1GB 字节物理页大小.<br>在传统模式下, 可提供 4KB, 2MB 和 4MB 的大小.</p><blockquote><p>!!! 在这篇文章我只介绍长模式和传统模式的 4KB 页面分页模式.</p></blockquote><h4 id="页面翻译选项"><a href="#页面翻译选项" class="headerlink" title="页面翻译选项"></a>页面翻译选项</h4><p>有四个控制寄存器位来控制页面翻译选项:</p><ul><li><code>CR0.PG</code> CR0[bit31], 页面翻译启用</li><li><code>CR4.PAE</code> CR4[bit5], 物理地址扩展, 置1可将虚拟地址转换为长达52位的物理地址. 激活长时间模式前必须启用PAE</li><li><code>CR4.PSE</code> CR4[bit4], 页面大小扩展, 置1可以是操作系统在页面翻译过程中使用 4MB 物理页面. 页面大小的选择是在PDE的基础上进行的.<br>物理页面的大小的选择取决于CR4.PSE和CR4.PAE的值,具体如图. (处于长模式时, CR4.PSE 的值将被忽略, 因为 PAE 必须被启用)</li><li><code>EFER.LMA</code> 长模式激活</li><li><code>PDE.PS</code> PDE[bit7], 置1时, 使用大的物理页面(大小由 PAE 和 PSE 决定), 并且 PDE 成为翻译层次结构的最低级别.</li><li><code>PDPE.PS</code> PDPE[bit7], 置1时, 使用 1GB 的物理页面, 并且 PDPE 成为翻译层次结构的最低级别.</li></ul><p>不是所有模式都可以使用这些选项, 表总结了每种模式下可用的分页支持选项</p><p><img src="SupporPaging.jpg" alt="Supported Paging Alternatives (CR0.PG=1)"></p><h4 id="访问无效地址"><a href="#访问无效地址" class="headerlink" title="访问无效地址"></a>访问无效地址</h4><p>引用无效地址都会产生页面错误异常, 中断帧被推送到堆栈上, 保存的rip指向尝试内存引用的指令. 这个特殊的异常还会使用附加信息推送错误代码, 例如: 读取, 写入或指令提取.</p><p>此外, CR2 寄存器设置为代码尝试访问的地址.</p><h3 id="长模式页面翻译"><a href="#长模式页面翻译" class="headerlink" title="长模式页面翻译"></a>长模式页面翻译</h3><p>长模式页面翻译需要使用页面地址扩展 (CR4.PAE). 在启用 PAE 之前激活长模式会导致通用保护异常 (#GP) 发生.</p><p>64位寻址模式 (长模式), 是物理地址扩展 (PAE) 的超集; 因此不同于 x86 体系结构, 每级页表寻址长度变成 9 位, 由于在 x64 体系结构中, 普通页大小仍为 4KB, 然而数据却表示 64 位长, 因此一个 4KB 页在 x64 体系结构下只能包含 512 项内容, 所以为了保证页对齐和以页为单位的页表内容换入换出, 在 x64 下每级页表寻址部分的长度定为 9 位. </p><p>为了正确翻译 x64 的线性地址, 其页表也从 x86 的 2 级变成了 4 级, 翻译过程如图所示, 在 x64 体系结构中, 每级页表包含 512 项 (2^9) 下级目录的指针, 该指针称为页表项, 描述了存储下级.</p><h4 id="CR3-寄存器"><a href="#CR3-寄存器" class="headerlink" title="CR3 寄存器"></a>CR3 寄存器</h4><p>在长模式下, CR3寄存器用于指向PML4基地址. CR3在长模式下扩展为64位, 允许PML4表位于52位物理地址空间的任何位置.</p><p><img src="long-mode-cr3.jpg" alt="CR3 Long-Mode"></p><ul><li><p>Table Base Address Field: 位 51~12, 这个字段指向 PML4 基地址, PML4 表在 4KB 的边界上对齐, 低 12 位地址位假定为0, 总共为 52 位的基地址大小. 在支持小于 52 位物理地址空间的CPU上, 必须将未实现的高地址位清零.</p></li><li><p>PWT (Page-Level Writethrough): 页面转换表是否具有回写或Writethrough缓存策略. 为 0 时具有回写缓存策略, 为 1 时具有 Writethrough 缓存策略</p></li><li><p>PCD (Page-Level Cache Disable): 最高级别页面转换表是否可缓存. 为 0 时可缓存, 为 1 时不可缓存.</p></li></ul><h4 id="4KB-页面翻译"><a href="#4KB-页面翻译" class="headerlink" title="4KB 页面翻译"></a>4KB 页面翻译</h4><p><img src="long-mode-4-v2p.jpg" alt="4K Page Translation"></p><p><img src="long-mode-4-table-format.jpg" alt="Table Format"></p><ul><li><p>Present (P) Bit: 指示页面翻译表或物理页是否加载在物理内存中, 如果为 0 时访问表或页面将引发页面异常 (#PF). 此位为 0 时, 其他控制位无效. 且不会被缓存到 TLB 中.</p></li><li><p>Read/Write (R/W) Bit: 控制读写访问, 为 0 时只读, 为 1 时读写.</p></li><li><p>User/Supervisor (U/S) Bit: 用户权限控制, 为 0 时限制访问特权级别为内核态(CPL 0, 1, 2). 为 1 时, 可被用户态和内核态访问 (CPL 0, 1, 2, 3).</p></li><li><p>Page-Level Writethrough (PWT) Bit: 同 CR3.PWT 解释</p></li><li><p>Page-Level Cache Disable (PCD) Bit: 同 CR3.PCD 解释</p></li><li><p>Accessed (A) Bit: 指示是否访问了页面转换表或物理页, 此位在第一次读取或写入时置1, CPU 不会清除此位</p></li><li><p>Dirty (D) Bit: 该位仅存在于页面翻译层次结构的最低级别中. 它指示此地址的物理页面是否写入. 此位在第一次写入物理页面时置1, CPU 不会清除此位</p></li><li><p>Page Size (PS) Bit: 此位存在于 PDE 和 长模式的 PDPE 中. 当 此位设置在 PDPE/PDE 中, 那么这个 Entry 是页面翻译层次结构的最低级别.<br>当 PS 位在 PTE 以上的所有级别清除为0时, 页面转换层次结构的最低级别是 PTE, 物理页面大小为 4KB.</p></li><li><p>Global Page (G) Bit: 此位仅存在于页面翻译层次结构的最低级别. 指示物理页面是一个全局页面.<br>当 CR3 由 <code>MOV VRn</code> 指令显式加载或在任务切换期间隐含加载时, 全局页面 (G=1) 的 TLB 不会失效.<br>使用G位需要将 CR4.PGE=1</p></li><li><p>Available to Software (AVL) Bit: CPU 不解释不适用, 供系统使用</p></li><li><p>Page-Attribute Table (PAT) Bit: 页属性表支持位. 该位仅在页面翻译层次结构的最低级别中.  </p><ul><li>如果最低级别是 PTE (PDE.PS=0), 则 PAT 在 bit7</li><li>如果最低级别是 PDE (PDE.PS=1) 或 PDPE (PDPE.PS=1), 则 PAT 在 bit12<br>此位涉及更复杂的分页系统, 和页高速缓存有关, 可以不予理会, 在普通的4KB分页机制中, 处理器建议将其置0.</li></ul></li><li><p>No Execute (NX) Bit: 指示此物理页面的内容不可执行. 此位仅存在于 PAE 定义的转换表项中, 传统模式 PDPE 不包含此位.<br>只有在通过将 EFER.NXE 设置为1, 启用了无执行页面保护功能时, 才能设置NX位. 否则 NX 被视为保留位, 必须为0.</p></li></ul><p>根据图我们可以得到页面翻译过程为:</p><ol><li>PML4E(PDP) = CR3(PML4) + PML4_Index * 8</li><li>PDPE(PD)   = PDP + PDP_Index * 8</li><li>PDE(PT)    = PD + PD_Index * 8</li><li>PTE(PhysicalAddressBase) = PT + PT_Index * 8</li><li>PhysicalAddress = PhysicalAddressBase + PhysicalOffset.</li></ol><h3 id="传统模式页面翻译"><a href="#传统模式页面翻译" class="headerlink" title="传统模式页面翻译"></a>传统模式页面翻译</h3><p>传统模式支持两种形式</p><ul><li>Normal Paging (Non-PAE) - 当物理地址扩展被禁用时使用 (CR4.PAE = 0) . 页面转换表中的 Entry 是32位, 用于将32位虚拟地址转换为大到40位的物理地址.</li><li>PAE Paging - 当物理地址扩展被启用时使用 (CR4.PAE = 1). 页面转换表中的 Entry 是64位, 用于将32位虚拟地址转换为高达52位的物理地址.</li></ul><p>根据所使用的分页形式和物理页大小, 传统分页最多使用三层页面转换表. 使用虚拟地址位字段选择每个表内的 Entry.<br>传统模式页面翻译表:</p><ul><li>PT (Page Table, 页表) - 每个页表项 (PTE) 指向物理页. 如果使用 4KB 页面, 页表是页面翻译层次结构的最低级别. 翻译 2MB 或 4MB 的页面时, 不会使用PTE. </li><li>PD (Page Directory, 页面目录) - 如果使用 4KB 页面, 则每个 PDE 指向页表. 如果使用 2MB 或 4MB 的页面, 则 PDE 是页面翻译层次结构的最低级别, 并指向物理页面.<br>在 Non-PAE 形式中, 页面目录是翻译层次结构的最高级别. </li><li>PDP (Page Directory Pointer, 页面目录指针) - 每个 PDPE 指向页面目录. 页目录指针仅用于 PAE 分页 (CR4.PAE = 1), 是传统页面翻译层次结构中的最高级别. </li></ul><h4 id="CR3-寄存器-1"><a href="#CR3-寄存器-1" class="headerlink" title="CR3 寄存器"></a>CR3 寄存器</h4><p>CR3寄存器用于指向最高级页面转换表的基址, 基址是页面目录指针表或者页面目录表.</p><p><img src="legacy-mode-cr3.jpg" alt="CR3 Legacy-Mode"></p><p>CR3 各控制位解释参考长模式.</p><h4 id="Non-PAE-4KB-页面翻译"><a href="#Non-PAE-4KB-页面翻译" class="headerlink" title="Non-PAE 4KB 页面翻译"></a>Non-PAE 4KB 页面翻译</h4><p><img src="legacy-non-pae-4-v2p.jpg" alt="4-Kbyte Non-PAE Page Translation—Legacy Mode"><br><img src="legacy-non-pae-4-table-format.jpg" alt="4-Kbyte PxE—Non-PAE Paging Legacy-Mode"></p><p>PxE 各控制位解释参考长模式.</p><h4 id="PAE-4KB-页面翻译"><a href="#PAE-4KB-页面翻译" class="headerlink" title="PAE 4KB 页面翻译"></a>PAE 4KB 页面翻译</h4><p>PAE 自动使用页大小位, 所以 PAE形式忽略 CR4.PSE 的值.</p><p><img src="legacy-pae-4-v2p.jpg" alt="4-Kbyte PAE Page Translation—Legacy Mode"><br><img src="legacy-pae-4-table-format.jpg" alt="4-Kbyte PxE—PAE Paging Legacy-Mode"></p><h3 id="TLB-和-Paging-Structure-Cache-简单概述"><a href="#TLB-和-Paging-Structure-Cache-简单概述" class="headerlink" title="TLB 和 Paging-Structure Cache 简单概述"></a>TLB 和 Paging-Structure Cache 简单概述</h3><p>为了将虚拟地址转换为物理地址, 处理器必须执行 4 个存储器访问, 一个用于层次结构中的每个PS. 由于内存延迟比指令执行时间长得多, 因此这显着减慢了处理器的浪费.<br>为了避免这种情况, 使用两种类型的缓存：TLB 和 Paging-Structure Cache.</p><p>TLB (Translation Lookaside Buffers) 就是 Cache 的一类. TLB 缓存从虚拟地址到物理地址的完整翻译, 以及所有控制信息, 即页面是读/写还是只读, 是否可以在 Ring3 访问等. 如果虚拟的翻译地址在 TLB 中找到, 不需要访问内存中的分页结构.</p><p>Paging-Structure Cache, 它缓存页表的各级 Table-Entry. 它是与 TLB 互补的.</p><h3 id="举个例子-动动手"><a href="#举个例子-动动手" class="headerlink" title="举个例子, 动动手~"></a>举个例子, 动动手~</h3><p>好, 我们已经了解了上面的基础知识, 那么我们来动手实践一下来将虚拟地址转换成物理地址</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> vStr[] = &#123; <span class="string">"Hello Memory Manager!\n"</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0x%p\n"</span>, vStr);</span><br></pre></td></tr></table></figure></div><h4 id="动手翻译长模式虚拟地址"><a href="#动手翻译长模式虚拟地址" class="headerlink" title="动手翻译长模式虚拟地址"></a>动手翻译长模式虚拟地址</h4><blockquote><p>操作系统: Windows 8.1 x64</p></blockquote><p>我们用这两行代码来输出这个字符串的虚拟地址为 <code>0x0076FA1C</code>, 然后我们去找到对应的物理地址.</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 我们根据地址 0x0076FA1C 来拆分出各种页表页目录的 index 和 offset</span></span><br><span class="line"><span class="comment">; 000000000 000000000 000000011 101101111 101000011100 (0x0076FA1C)</span></span><br><span class="line"><span class="comment">;     0         0         3        16f        a1c</span></span><br><span class="line"><span class="comment">; PML4_Index        = 0</span></span><br><span class="line"><span class="comment">; PDP_Index         = 0</span></span><br><span class="line"><span class="comment">; PD_Index          = 3</span></span><br><span class="line"><span class="comment">; PT_Index          = 0x16f</span></span><br><span class="line"><span class="comment">; PhysicalOffset    = 0xa1c</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: kd&gt; r <span class="built_in">cr3</span></span><br><span class="line"><span class="built_in">cr3</span>=00000000768e1000</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: kd&gt; !<span class="built_in">dq</span> 00000000768e1000 &amp; 000fffff<span class="string">`fffff000</span></span><br><span class="line"><span class="string">#768e1000 1f200000`</span>7ad46867 <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#768e1010 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#768e1020 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#768e1030 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#768e1040 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#768e1050 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#768e1060 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#768e1070 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1: kd&gt; !dq 1f200000`</span>7ad46867 &amp; 000fffff<span class="string">`fffff000</span></span><br><span class="line"><span class="string">#7ad46000 00d00000`</span>37cc7867 <span class="number">01100000</span><span class="string">`7880a867</span></span><br><span class="line"><span class="string">#7ad46010 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#7ad46020 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#7ad46030 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#7ad46040 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#7ad46050 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#7ad46060 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#7ad46070 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1: kd&gt; !dq (00d00000`</span>37cc7867 &amp; 000fffff<span class="string">`fffff000) + 3 * 8</span></span><br><span class="line"><span class="string">#37cc7018 01d00000`</span>62d95867 <span class="number">06400000</span><span class="string">`6c0ad867</span></span><br><span class="line"><span class="string">#37cc7028 1c800000`</span>2b4ca867 <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#37cc7038 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#37cc7048 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#37cc7058 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#37cc7068 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#37cc7078 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#37cc7088 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1: kd&gt; !dq (01d00000`</span>62d95867 &amp; 000fffff<span class="string">`fffff000) + 16f * 8</span></span><br><span class="line"><span class="string">#62d95b78 93b00000`</span>751c5847 8aa00000<span class="string">`78bb8005</span></span><br><span class="line"><span class="string">#62d95b88 8ab00000`</span>1a3f9005 8ac00000<span class="string">`1e7fa005</span></span><br><span class="line"><span class="string">#62d95b98 8e800000`</span>7adfb005 <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#62d95ba8 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#62d95bb8 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#62d95bc8 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#62d95bd8 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#62d95be8 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">; 最后我们看到, 这个物理地址的内容就是我们输出的字符串~</span></span><br><span class="line"><span class="string">1: kd&gt; !db (93b00000`</span>751c5847 &amp; 000fffff<span class="string">`fffff000) + a1c</span></span><br><span class="line"><span class="string">#751c5a1c 48 65 6c 6c 6f 20 4d 65-6d 6f 72 79 20 4d 61 6e Hello Memory Man</span></span><br><span class="line"><span class="string">#751c5a2c 61 67 65 72 21 0a 00 cc-cc cc cc cc cc cc cc cc ager!...........</span></span><br><span class="line"><span class="string">#751c5a3c 2a 30 00 00 00 00 00 00-00 00 00 00 00 00 00 00 *0..............</span></span><br><span class="line"><span class="string">#751c5a4c cc cc cc cc 37 d0 ae cb-68 fa 76 00 0e fd 2c 00 ....7...h.v...,.</span></span><br><span class="line"><span class="string">#751c5a5c 01 00 00 00 88 e5 ad 00-e8 e5 ad 00 c0 fa 76 00 ..............v.</span></span><br><span class="line"><span class="string">#751c5a6c 70 fb 2c 00 a3 d0 ae cb-00 00 00 00 00 00 00 00 p.,.............</span></span><br><span class="line"><span class="string">#751c5a7c 00 70 58 7f e8 49 80 10-80 f5 ff ff 00 00 00 00 .pX..I..........</span></span><br><span class="line"><span class="string">#751c5a8c 00 00 00 00 09 a0 39 77-00 00 00 00 30 22 25 01 ......9w....0"%.</span></span><br></pre></td></tr></table></figure><h4 id="动手翻译传统模式虚拟地址"><a href="#动手翻译传统模式虚拟地址" class="headerlink" title="动手翻译传统模式虚拟地址"></a>动手翻译传统模式虚拟地址</h4><blockquote><p>操作系统: Windows 8.1 x86</p></blockquote><p>字符串的虚拟地址为 <code>0x00C2FA60</code></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; 根据 CR4.PAE(Bit5)=1 确定为 PAE 形式的分页</span></span><br><span class="line">kd&gt; .formats @<span class="built_in">cr4</span></span><br><span class="line">Evaluate expression:</span><br><span class="line"><span class="symbol">  Hex:</span>     001406e9</span><br><span class="line"><span class="symbol">  Decimal:</span> <span class="number">1312489</span></span><br><span class="line"><span class="symbol">  Octal:</span>   <span class="number">00005003351</span></span><br><span class="line"><span class="symbol">  Binary:</span>  <span class="number">00000000</span> <span class="number">00010100</span> <span class="number">00000110</span> <span class="number">11101001</span></span><br><span class="line"><span class="symbol">  Chars:</span>   ....</span><br><span class="line"><span class="symbol">  Time:</span>    Fri Jan <span class="number">16</span> <span class="number">12</span>:<span class="number">34</span>:<span class="number">49</span> <span class="number">1970</span></span><br><span class="line"><span class="symbol">  Float:</span>   low <span class="number">1.83919e-039</span> high <span class="number">0</span></span><br><span class="line"><span class="symbol">  Double:</span>  <span class="number">6.48456e-318</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 我们根据地址 0x00C2FA60 来拆分出各种页表页目录的 index 和 offset</span></span><br><span class="line"><span class="comment">; 00 000000110 000101111 101001100000</span></span><br><span class="line"><span class="comment">; 0     6          2f        a60</span></span><br><span class="line"><span class="comment">; PDP_Index         = 0</span></span><br><span class="line"><span class="comment">; PD_Index          = 6</span></span><br><span class="line"><span class="comment">; PT_Index          = 0x2f</span></span><br><span class="line"><span class="comment">; PhysicalOffset    = 0xa60</span></span><br><span class="line"></span><br><span class="line">kd&gt; r <span class="built_in">cr3</span></span><br><span class="line"><span class="built_in">cr3</span>=032f1440</span><br><span class="line"></span><br><span class="line">kd&gt; !<span class="built_in">dq</span> 032f1440 &amp; 000fffff<span class="string">`fffffFE0</span></span><br><span class="line"><span class="string"># 32f1440 00000000`</span>00bc2801 <span class="number">00000000</span><span class="string">`150c3801</span></span><br><span class="line"><span class="string"># 32f1450 00000000`</span><span class="number">14384801</span> <span class="number">00000000</span><span class="string">`17f07801</span></span><br><span class="line"><span class="string"># 32f1460 00000000`</span>2f262801 <span class="number">00000000</span><span class="string">`2f6a3801</span></span><br><span class="line"><span class="string"># 32f1470 00000000`</span>308e4801 <span class="number">00000000</span><span class="string">`301a7801</span></span><br><span class="line"><span class="string"># 32f1480 00000000`</span>2e68c801 <span class="number">00000000</span><span class="string">`2f20d801</span></span><br><span class="line"><span class="string"># 32f1490 00000000`</span>2c30e801 <span class="number">00000000</span><span class="string">`2f2d1801</span></span><br><span class="line"><span class="string"># 32f14a0 00000000`</span>3a84a801 <span class="number">00000000</span><span class="string">`3a849801</span></span><br><span class="line"><span class="string"># 32f14b0 00000000`</span>3a848801 <span class="number">00000000</span><span class="string">`3a845801</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">kd&gt; !dq (00000000`</span>00bc2801 &amp; 000fffff<span class="string">`fffff000) + 6 * 8</span></span><br><span class="line"><span class="string">#  bc2030 00000000`</span>17aee867 <span class="number">00000000</span><span class="string">`17883867</span></span><br><span class="line"><span class="string">#  bc2040 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#  bc2050 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#  bc2060 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string">#  bc2070 00000000`</span><span class="number">00000000</span> <span class="number">00000000</span><span class="string">`00000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">kd&gt; !dq (00000000`</span>17aee867 &amp; 000fffff<span class="string">`fffff000) + 2f * 8</span></span><br><span class="line"><span class="string">#17aee178 80000000`</span>1763b867 <span class="number">80000000</span><span class="string">`10613025</span></span><br><span class="line"><span class="string">#17aee188 00000000`</span>17d1d867 <span class="number">00000000</span><span class="string">`17c32867</span></span><br><span class="line"><span class="string">#17aee198 00000000`</span>178f3867 <span class="number">00000000</span><span class="string">`17db4867</span></span><br><span class="line"><span class="string">#17aee1a8 00000000`</span>182b5867 <span class="number">00000000</span><span class="string">`179b6867</span></span><br><span class="line"><span class="string">#17aee1b8 00000000`</span>167f7867 <span class="number">00000000</span><span class="string">`16df8867</span></span><br><span class="line"><span class="string">#17aee1c8 00000000`</span>17e79867 <span class="number">00000000</span><span class="string">`150ba867</span></span><br><span class="line"><span class="string">#17aee1d8 00000000`</span>17b3b867 <span class="number">00000000</span><span class="string">`16a7c867</span></span><br><span class="line"><span class="string">#17aee1e8 00000000`</span>1663d867 <span class="number">00000000</span><span class="string">`17dfe867</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">kd&gt; !db (80000000`</span>1763b867 &amp; 000fffff<span class="string">`fffff000) + a60</span></span><br><span class="line"><span class="string">#1763ba60 48 65 6c 6c 6f 20 4d 65-6d 6f 72 79 20 4d 61 6e Hello Memory Man</span></span><br><span class="line"><span class="string">#1763ba70 61 67 65 72 21 0a 00 cc-cc cc cc cc cc cc cc cc ager!...........</span></span><br><span class="line"><span class="string">#1763ba80 2a 30 00 00 00 00 00 00-00 00 00 00 00 00 00 00 *0..............</span></span><br><span class="line"><span class="string">#1763ba90 cc cc cc cc fe 81 6e a0-ac fa c2 00 0e fd c7 00 ......n.........</span></span><br><span class="line"><span class="string">#1763baa0 01 00 00 00 58 d4 e9 00-b8 d4 e9 00 04 fb c2 00 ....X...........</span></span><br><span class="line"><span class="string">#1763bab0 70 fb c7 00 62 80 6e a0-e5 96 c7 00 e5 96 c7 00 p...b.n.........</span></span><br><span class="line"><span class="string">#1763bac0 00 40 bb 7f 00 00 00 00-00 00 00 00 00 00 00 00 .@..............</span></span><br><span class="line"><span class="string">#1763bad0 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................</span></span><br></pre></td></tr></table></figure><p>嘿~是不是很神奇?</p><hr><h2 id="在-Windows-系统中与内存管理相关的基础概念"><a href="#在-Windows-系统中与内存管理相关的基础概念" class="headerlink" title="在 Windows 系统中与内存管理相关的基础概念"></a>在 Windows 系统中与内存管理相关的基础概念</h2><h3 id="页的几个术语"><a href="#页的几个术语" class="headerlink" title="页的几个术语"></a>页的几个术语</h3><ul><li><code>Virtual Page Offset</code>, VPO (虚拟页偏移) 也就是前面说的分页模式中虚拟地址在物理 Page Frame 内的 Offset 值.</li><li><code>Virtual Page Number</code>, VPN (虚拟页号) 与 VPO 相对应, 用来查找最终的物理地址 Page Frame 地址. 在其中忽略的各种 Table Entry 的 Index 的值.</li><li><code>Page Frame</code>, PF (页帧) 是在物理地址空间里, 一个页的起始地址 (基地址), 分为 4 种: 4K Page Frame, 2M Page Frame, 4M Page Frame, 1G Page Frame.</li><li><code>Page Frame Number</code>, PFN (页帧号) 是以 PF, 即以页为单位对内存进行编号, 该编号可作为页数组的索引. 计算方法为 PF / PageSize</li></ul><p>他们的关系如图:</p><p><img src="PxN.jpg" alt="PxN"></p><h3 id="Windows-虚拟地址空间"><a href="#Windows-虚拟地址空间" class="headerlink" title="Windows 虚拟地址空间"></a>Windows 虚拟地址空间</h3><p><img src="win-main-system-regions.jpg" alt="Windows x64 Main System Regions"></p><h3 id="IRQL"><a href="#IRQL" class="headerlink" title="IRQL"></a>IRQL</h3><p>在 &lt;&lt; Windows kernel learning: 1. Basis &gt;&gt; 中我们了解到有几种 IRQL. 其中定义了两个软件中断: APC 和 DPC.<br>他们具有相关的 IRQL 级别: APC 中断为 1, DPC 为 2. 当检查软件中断的代码发现有一个正在等待处理时, 且当前 IRQL 小于中断 IRQL 则调用处理程序, 从而模拟处理器对硬件中断的处理.</p><p>当处理器的 IRQL 大于等于 2 时, 该处理器被阻止执行上下文切换的线程调度代码.<br>处理器在 IRQL 为 1 时可以切换线程上下文, 并且当线程恢复时, IRQL 将恢复为线程被抢占时的值. </p><p>用户模式代码始终在 IRQL=PASSIVE 执行, 并且没有可用的 API 来更改当前的 IRQL. 所以, 用户模式代码总是可以中断, 并且线程上下文切换总是可能的.</p><p>处理程序代码绝不能降低 IRQL, 除非它在最后阶段即将要从中断返回. 当这种情况发生时, 处理程序必须恢复在中断发生前生效的 IRQL. 特别是, 它不能将 IRQL 设置为低于中断前的值.</p><p>一个代码块可以将IRQL显式提升到当前级别以上, 以禁止较高的IRQL中断. 这可以在处理程序和不是处理程序的任何一部分的代码中完成.</p><p>所有硬件中断都具有大于 DPC 的IRQL, 因此软件中断总是在硬件中断处理程序中被屏蔽 (但是只有在执行处理程序的处理器上才会被屏蔽, 其他处理器可能处于任何IRQL).</p><p>内核检查软件中断的一个阶段是在退出处理程序之前还原IRQL. 例如, 可能会发生以下事件序列:</p><ul><li>PASSIVE执行的代码被硬件中断中断.</li><li>处理程序代码请求软件 DPC 中断. 当前的 IRQL 大于 DPC, 因为它已经在处理程序逻辑开始处被提升为硬件中断的 IRQL, 所以 DPC 中断保持不变.</li><li>处理程序代码返回, 将 IRQL 还原为 PASSIVE.</li><li>降低 IRQL 的代码检查待处理的软件中断, 并找到DPC. 由于 IRQL 被设置为 PASSIVE, 所以可以对其中断. IRQL 设置为DPC, 并调用 DPC 中断的处理程序.</li><li>当处理程序返回时, IRQL 将再次恢复为 PASSIVE. 这一次没有进一步的中断等待, 并且被中断的代码被恢复.</li></ul><h3 id="APC-中断"><a href="#APC-中断" class="headerlink" title="APC 中断"></a>APC 中断</h3><p>APC (异步过程调用) 提供了一种在特定用户线程环境中执行用户程序和系统代码的途径. </p><p><strong>APC 例程可以访问资源(对象), 等待对象句柄, 引发页面错误, 以及调用系统服务.</strong></p><p>DPC 队列是系统范围的, 而 APC 队列是存在于每个线程中的.</p><p>有两种 APC 类型: 内核模式和用户模式.<br>内核模式的 APC 并不要求目标线程获得许可(Alertable State), 而用户模式的线程必须获得许可才可以执行.</p><p>内核模式的 APC 也有两种类型: 普通的和特殊的.<br>特殊的 APC 在 APC 级别上执行, 并且允许 APC 例程修改某些 APC 参数; 普通的 APC 在 PASSIVE 级别上执行, 并且执行被特殊APC 修改过的参数.</p><p>APC 插入和交付的图表</p><table><thead><tr><th align="left">APC 类型</th><th align="left">插入行为</th><th align="left">交付行为</th></tr></thead><tbody><tr><td align="left">特殊的 (内核模式)</td><td align="left">插入在内核模式 APC 列表的尾部</td><td align="left">只要 IRQL 降下来并且线程未在守护区域内, 就在 APC 级别上被交付. 相应的指针指向在插入 APC 时指定的参数</td></tr><tr><td align="left">普通的 (内核模式)</td><td align="left">插入在最后一个特殊 APC 的正后面 (也就是所有其他普通 APC 的头部)</td><td align="left">在关联的特殊 APC 被执行后, 在 PASSIVE 级别上被交付, 此特殊 APC 返回的参数也被传递过来</td></tr><tr><td align="left">普通的 (用户模式)</td><td align="left">插入在用户模式 APC 列表的尾部</td><td align="left">只要 IRQL 降下来, 并且线程未在临界区或守护区域内, 而且该线程处于 Alertable 的状态, 就在 PASSIVE 级别上被交付. 所关联的特殊 APC 返回的参数也被传递过来</td></tr><tr><td align="left">普通的 (用户模式) 线程退出 (PsExitSpecialApc)</td><td align="left">插入在用户模式 APC 列表的头部</td><td align="left">如果线程正在执行可被 Alertable 的用户模式等待, 则当返回用户模式时, 在 PASSIVE 级别上被交付, 线程终止特殊 APC 所返回的参数也被传递过来</td></tr></tbody></table><p>内核使用 APC 来询问线程环境, 以及终止目标线程.</p><p>设备驱动程序在拥有一把锁后, 常常会阻塞 APC, 或者进入一个临界区或守护区域, 以防止这种操作发生; 不然,该锁有可能永远不会被释放, 从而导致系统停住.</p><h3 id="DPC-中断"><a href="#DPC-中断" class="headerlink" title="DPC 中断"></a>DPC 中断</h3><p>DPC (延迟过程调用) 中断也用于请求异步执行回调, 但与 APC 中断不同, 因为:</p><ul><li>它是一个 “真正的” 中断, 一旦 IRQL 允许, 它可以在任意的线程上下文中执行.</li><li>它具有更高的 IRQL, 因此它在 APC 中断之前处理.</li></ul><p>内核利用 DPC 来处理定时器到期 (并解除那些正在等待定时器的线程), 以及在一个线程的时限到期以后重新调度处理器.<br>设备驱动程序利用 DPC 来处理中断, 为了给硬件中断提供及时服务, Windows 在设备驱动程序的配合下, 试图将 IRQL 曝出在设备 IRQL 级别之下. 达到这个目的的方法是, 让设备驱动程序 ISR (中断服务例程) 执行最少最必要的工作来响应它们的设备, 将易变的中断状态保存起来, 并将数据传输或者其他并非时间紧迫的中断处理活动延迟到一个位于 DPC 级别的 DPC 中执行.</p><p>正在等待执行的 DPC 例程被存储在由内核管理的队列中, 每个处理器都有一个这样的队列 (DPC 队列).</p><p>DPC 中断产生规则图表</p><table><thead><tr><th align="left">DPC 优先级</th><th align="left">DPC 被定为在 ISR 的处理器上</th><th align="left">DPC 被定为在另一个处理器上</th></tr></thead><tbody><tr><td align="left">低级</td><td align="left">DPC 队列长度超过了最大 DPC 队列长度值, 或者 DPC 请求率小于最小 DPC 请求率</td><td align="left">DPC 队列长度超过了最大 DPC 队列长度值, 或者系统空闲</td></tr><tr><td align="left">中级</td><td align="left">总是激发</td><td align="left">DPC 队列长度超过了最大 DPC 队列长度值, 或者系统空闲</td></tr><tr><td align="left">中-高级</td><td align="left">总是激发</td><td align="left">目标处理器空闲</td></tr><tr><td align="left">高级</td><td align="left">总是激发</td><td align="left">目标处理器空闲</td></tr></tbody></table><p><strong>DPC 例程可以调用内核函数, 但是不能调用系统服务, 产生页面错误, 或者创建或等待分发器对象.</strong></p><p>编写 DPC 例程规则: 不能访问换页的内存, 不能执行分发等待操作, 也不能对它们将来运行在哪个 IRQL 上做假设.<br>而且, 绝对不能使用 <code>KeAcquire/ReleaseSpinLockAtDpcLevel</code> API, 因为这些 API 函数假设运行在 DPC 级别上.</p><hr><h2 id="VMM-Virtual-Memory-Manager-数据结构"><a href="#VMM-Virtual-Memory-Manager-数据结构" class="headerlink" title="VMM (Virtual Memory Manager) 数据结构"></a>VMM (Virtual Memory Manager) 数据结构</h2><h3 id="VAD-Virtual-Address-Descriptor"><a href="#VAD-Virtual-Address-Descriptor" class="headerlink" title="VAD (Virtual Address Descriptor)"></a>VAD (Virtual Address Descriptor)</h3><p>VAD 用于在用户模式范围内跟踪保留和提交的地址 (内核空间并不受 VAD 的管理).<br>VAD 会存储保留或提交的每个地址范围, 以及保护状态和访问权限.</p><p>VAD 以 AVL 自平衡树的结构组织, 其中每个节点是 VAD 实例, 最多可以有两个子节点.<br>左边的 Children 如果存在, 是一个地址范围小于 parent 节点地址范围的 VAD; 右边的 Children 大于 parent 节点地址范围. </p><p>VAD 是此树的根, 每一个 <code>nt!_RTL_BALANCED_NODE</code> 中便是一段虚拟内存描述信息.</p><p>比如说 0x1000 这一段内存是保留的, 0x2000这一段内存是提交的, 那我们怎么知道它是保留还是提交就体现在这个 <code>nt!_RTL_BALANCED_NODE</code> 上, 也就是每一块虚拟内存 (我说的是一块, 不是一页) 都会一一对应着一个节点 (这个问题很关键, 很关键)</p><p>通过调试的数据结构可以看到, <code>nt!_MMVAD</code> 的首字段是 <code>nt!_MMVAD_SHORT</code>, 而 <code>nt!_MMVAD_SHORT</code> 首字段是 <code>nt!_RTL_BALANCED_NODE</code>. 所以, 每个节点实际上就是 <code>nt!_MMVAD</code> 结构</p><p>让我们看下相关的数据结构</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: kd&gt; dt nt!_RTL_BALANCED_NODE</span><br><span class="line">   +<span class="number">0x000</span> Children         : [<span class="number">2</span>] Ptr64 _RTL_BALANCED_NODE</span><br><span class="line">   +<span class="number">0x000</span> Left             : Ptr64 _RTL_BALANCED_NODE</span><br><span class="line">   +<span class="number">0x008</span> Right            : Ptr64 _RTL_BALANCED_NODE</span><br><span class="line">   +<span class="number">0x010</span> Red              : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x010</span> Balance          : Pos <span class="number">0</span>, <span class="number">2</span> Bits</span><br><span class="line">   +<span class="number">0x010</span> ParentValue      : Uint8B</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: kd&gt; dt nt!_MMVAD_SHORT -r</span><br><span class="line">   +<span class="number">0x000</span> VadNode          : _RTL_BALANCED_NODE</span><br><span class="line">      +<span class="number">0x000</span> Children         : [<span class="number">2</span>] Ptr64 _RTL_BALANCED_NODE</span><br><span class="line">         +<span class="number">0x000</span> Children         : [<span class="number">2</span>] Ptr64 _RTL_BALANCED_NODE</span><br><span class="line">         +<span class="number">0x000</span> Left             : Ptr64 _RTL_BALANCED_NODE</span><br><span class="line">         +<span class="number">0x008</span> Right            : Ptr64 _RTL_BALANCED_NODE</span><br><span class="line">         +<span class="number">0x010</span> Red              : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">         +<span class="number">0x010</span> Balance          : Pos <span class="number">0</span>, <span class="number">2</span> Bits</span><br><span class="line">         +<span class="number">0x010</span> ParentValue      : Uint8B</span><br><span class="line">      +<span class="number">0x000</span> Left             : Ptr64 _RTL_BALANCED_NODE</span><br><span class="line">      +<span class="number">0x008</span> Right            : Ptr64 _RTL_BALANCED_NODE</span><br><span class="line">      +<span class="number">0x010</span> Red              : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">      +<span class="number">0x010</span> Balance          : Pos <span class="number">0</span>, <span class="number">2</span> Bits</span><br><span class="line">      +<span class="number">0x010</span> ParentValue      : Uint8B</span><br><span class="line">   +<span class="number">0x000</span> NextVad          : Ptr64 _MMVAD_SHORT</span><br><span class="line">   +<span class="number">0x018</span> StartingVpn      : Uint4B</span><br><span class="line">   +<span class="number">0x01c</span> EndingVpn        : Uint4B</span><br><span class="line">   +<span class="number">0x020</span> StartingVpnHigh  : UChar</span><br><span class="line">   +<span class="number">0x021</span> EndingVpnHigh    : UChar</span><br><span class="line">   +<span class="number">0x022</span> CommitChargeHigh : UChar</span><br><span class="line">   +<span class="number">0x023</span> LargeImageBias   : UChar</span><br><span class="line">   +<span class="number">0x024</span> ReferenceCount   : Int4B</span><br><span class="line">   +<span class="number">0x028</span> PushLock         : _EX_PUSH_LOCK</span><br><span class="line">      +<span class="number">0x000</span> Locked           : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">      +<span class="number">0x000</span> Waiting          : Pos <span class="number">1</span>, <span class="number">1</span> Bit</span><br><span class="line">      +<span class="number">0x000</span> Waking           : Pos <span class="number">2</span>, <span class="number">1</span> Bit</span><br><span class="line">      +<span class="number">0x000</span> MultipleShared   : Pos <span class="number">3</span>, <span class="number">1</span> Bit</span><br><span class="line">      +<span class="number">0x000</span> Shared           : Pos <span class="number">4</span>, <span class="number">60</span> Bits</span><br><span class="line">      +<span class="number">0x000</span> Value            : Uint8B</span><br><span class="line">      +<span class="number">0x000</span> Ptr              : Ptr64 Void</span><br><span class="line">   +<span class="number">0x030</span> u                : &lt;unnamed-tag&gt;</span><br><span class="line">      +<span class="number">0x000</span> LongFlags        : Uint4B</span><br><span class="line">      +<span class="number">0x000</span> VadFlags         : _MMVAD_FLAGS</span><br><span class="line">         +<span class="number">0x000</span> VadType          : Pos <span class="number">0</span>, <span class="number">3</span> Bits</span><br><span class="line">         +<span class="number">0x000</span> Protection       : Pos <span class="number">3</span>, <span class="number">5</span> Bits</span><br><span class="line">         +<span class="number">0x000</span> PreferredNode    : Pos <span class="number">8</span>, <span class="number">6</span> Bits</span><br><span class="line">         +<span class="number">0x000</span> NoChange         : Pos <span class="number">14</span>, <span class="number">1</span> Bit</span><br><span class="line">         +<span class="number">0x000</span> PrivateMemory    : Pos <span class="number">15</span>, <span class="number">1</span> Bit</span><br><span class="line">         +<span class="number">0x000</span> Teb              : Pos <span class="number">16</span>, <span class="number">1</span> Bit</span><br><span class="line">         +<span class="number">0x000</span> PrivateFixup     : Pos <span class="number">17</span>, <span class="number">1</span> Bit</span><br><span class="line">         +<span class="number">0x000</span> Spare            : Pos <span class="number">18</span>, <span class="number">13</span> Bits</span><br><span class="line">         +<span class="number">0x000</span> DeleteInProgress : Pos <span class="number">31</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x034</span> u1               : &lt;unnamed-tag&gt;</span><br><span class="line">      +<span class="number">0x000</span> LongFlags1       : Uint4B</span><br><span class="line">      +<span class="number">0x000</span> VadFlags1        : _MMVAD_FLAGS1</span><br><span class="line">         +<span class="number">0x000</span> CommitCharge     : Pos <span class="number">0</span>, <span class="number">31</span> Bits</span><br><span class="line">         +<span class="number">0x000</span> MemCommit        : Pos <span class="number">31</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x038</span> EventList        : Ptr64 _MI_VAD_EVENT_BLOCK</span><br><span class="line">      +<span class="number">0x000</span> Next             : Ptr64 _MI_VAD_EVENT_BLOCK</span><br><span class="line">      +<span class="number">0x008</span> WaitReason       : Uint4B</span><br><span class="line">      +<span class="number">0x010</span> Gate             : _KGATE</span><br><span class="line">         +<span class="number">0x000</span> Header           : _DISPATCHER_HEADER</span><br><span class="line">      +<span class="number">0x010</span> SecureInfo       : _MMADDRESS_LIST</span><br><span class="line">         +<span class="number">0x000</span> u1               : &lt;unnamed-tag&gt;</span><br><span class="line">         +<span class="number">0x008</span> EndVa            : Ptr64 Void</span><br><span class="line">      +<span class="number">0x010</span> BitMap           : _RTL_BITMAP_EX</span><br><span class="line">         +<span class="number">0x000</span> SizeOfBitMap     : Uint8B</span><br><span class="line">         +<span class="number">0x008</span> Buffer           : Ptr64 Uint8B</span><br><span class="line">      +<span class="number">0x010</span> InPageSupport    : Ptr64 _MMINPAGE_SUPPORT</span><br><span class="line">         +<span class="number">0x000</span> ListEntry        : _LIST_ENTRY</span><br><span class="line">         +<span class="number">0x010</span> ListHead         : _LIST_ENTRY</span><br><span class="line">         +<span class="number">0x020</span> Event            : _KEVENT</span><br><span class="line">         +<span class="number">0x038</span> CollidedEvent    : _KEVENT</span><br><span class="line">         +<span class="number">0x050</span> IoStatus         : _IO_STATUS_BLOCK</span><br><span class="line">         +<span class="number">0x060</span> ReadOffset       : _LARGE_INTEGER</span><br><span class="line">         +<span class="number">0x068</span> PteContents      : _MMPTE</span><br><span class="line">         +<span class="number">0x070</span> Thread           : Ptr64 _ETHREAD</span><br><span class="line">         +<span class="number">0x078</span> LockedProtoPfn   : Ptr64 _MMPFN</span><br><span class="line">         +<span class="number">0x080</span> WaitCount        : Int4B</span><br><span class="line">         +<span class="number">0x084</span> ByteCount        : Uint4B</span><br><span class="line">         +<span class="number">0x088</span> u3               : &lt;unnamed-tag&gt;</span><br><span class="line">         +<span class="number">0x08c</span> u1               : &lt;unnamed-tag&gt;</span><br><span class="line">         +<span class="number">0x090</span> FilePointer      : Ptr64 _FILE_OBJECT</span><br><span class="line">         +<span class="number">0x098</span> ControlArea      : Ptr64 _CONTROL_AREA</span><br><span class="line">         +<span class="number">0x0a0</span> Autoboost        : Ptr64 Void</span><br><span class="line">         +<span class="number">0x0a8</span> FaultingAddress  : Ptr64 Void</span><br><span class="line">         +<span class="number">0x0b0</span> PointerPte       : Ptr64 _MMPTE</span><br><span class="line">         +<span class="number">0x0b8</span> BasePte          : Ptr64 _MMPTE</span><br><span class="line">         +<span class="number">0x0c0</span> Pfn              : Ptr64 _MMPFN</span><br><span class="line">         +<span class="number">0x0c8</span> PrefetchMdl      : Ptr64 _MDL</span><br><span class="line">         +<span class="number">0x0d0</span> Mdl              : _MDL</span><br><span class="line">         +<span class="number">0x100</span> Page             : [<span class="number">16</span>] Uint8B</span><br><span class="line">      +<span class="number">0x010</span> PhysicalMemory   : _MI_PHYSMEM_BLOCK</span><br><span class="line">         +<span class="number">0x000</span> IoTracker        : Ptr64 _MMIO_TRACKER</span><br><span class="line">      +<span class="number">0x010</span> LargePage        : Ptr64 _MI_LARGEPAGE_MEMORY_INFO</span><br><span class="line">         +<span class="number">0x000</span> ListHead         : _LIST_ENTRY</span><br><span class="line">         +<span class="number">0x010</span> ColoredPageInfoBase : Ptr64 _COLORED_PAGE_INFO</span><br><span class="line">         +<span class="number">0x018</span> PagesNeedZeroing : Uint4B</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: kd&gt; dt nt!_MMVAD -r</span><br><span class="line">   +<span class="number">0x000</span> Core             : _MMVAD_SHORT</span><br><span class="line">   +<span class="number">0x040</span> u2               : &lt;unnamed-tag&gt;</span><br><span class="line">      +<span class="number">0x000</span> LongFlags2       : Uint4B</span><br><span class="line">      +<span class="number">0x000</span> VadFlags2        : _MMVAD_FLAGS2</span><br><span class="line">         +<span class="number">0x000</span> FileOffset       : Pos <span class="number">0</span>, <span class="number">24</span> Bits</span><br><span class="line">         +<span class="number">0x000</span> Large            : Pos <span class="number">24</span>, <span class="number">1</span> Bit</span><br><span class="line">         +<span class="number">0x000</span> TrimBehind       : Pos <span class="number">25</span>, <span class="number">1</span> Bit</span><br><span class="line">         +<span class="number">0x000</span> Inherit          : Pos <span class="number">26</span>, <span class="number">1</span> Bit</span><br><span class="line">         +<span class="number">0x000</span> CopyOnWrite      : Pos <span class="number">27</span>, <span class="number">1</span> Bit</span><br><span class="line">         +<span class="number">0x000</span> NoValidationNeeded : Pos <span class="number">28</span>, <span class="number">1</span> Bit</span><br><span class="line">         +<span class="number">0x000</span> Spare            : Pos <span class="number">29</span>, <span class="number">3</span> Bits</span><br><span class="line">   +<span class="number">0x048</span> Subsection       : Ptr64 _SUBSECTION</span><br><span class="line">      +<span class="number">0x000</span> ControlArea      : Ptr64 _CONTROL_AREA</span><br><span class="line">         +<span class="number">0x000</span> Segment          : Ptr64 _SEGMENT</span><br><span class="line">         +<span class="number">0x008</span> ListHead         : _LIST_ENTRY</span><br><span class="line">         +<span class="number">0x018</span> NumberOfSectionReferences : Uint8B</span><br><span class="line">         +<span class="number">0x020</span> NumberOfPfnReferences : Uint8B</span><br><span class="line">         +<span class="number">0x028</span> NumberOfMappedViews : Uint8B</span><br><span class="line">         +<span class="number">0x030</span> NumberOfUserReferences : Uint8B</span><br><span class="line">         +<span class="number">0x038</span> u                : &lt;unnamed-tag&gt;</span><br><span class="line">         +<span class="number">0x040</span> FilePointer      : _EX_FAST_REF</span><br><span class="line">         +<span class="number">0x048</span> ControlAreaLock  : Int4B</span><br><span class="line">         +<span class="number">0x04c</span> ModifiedWriteCount : Uint4B</span><br><span class="line">         +<span class="number">0x050</span> WaitList         : Ptr64 _MI_CONTROL_AREA_WAIT_BLOCK</span><br><span class="line">         +<span class="number">0x058</span> u2               : &lt;unnamed-tag&gt;</span><br><span class="line">         +<span class="number">0x068</span> LockedPages      : Uint8B</span><br><span class="line">         +<span class="number">0x070</span> FileObjectLock   : _EX_PUSH_LOCK</span><br><span class="line">      +<span class="number">0x008</span> SubsectionBase   : Ptr64 _MMPTE</span><br><span class="line">         +<span class="number">0x000</span> u                : &lt;unnamed-tag&gt;</span><br><span class="line">      +<span class="number">0x010</span> NextSubsection   : Ptr64 _SUBSECTION</span><br><span class="line">         +<span class="number">0x000</span> ControlArea      : Ptr64 _CONTROL_AREA</span><br><span class="line">         +<span class="number">0x008</span> SubsectionBase   : Ptr64 _MMPTE</span><br><span class="line">         +<span class="number">0x010</span> NextSubsection   : Ptr64 _SUBSECTION</span><br><span class="line">         +<span class="number">0x018</span> PtesInSubsection : Uint4B</span><br><span class="line">         +<span class="number">0x020</span> UnusedPtes       : Uint4B</span><br><span class="line">         +<span class="number">0x020</span> GlobalPerSessionHead : _RTL_AVL_TREE</span><br><span class="line">         +<span class="number">0x028</span> u                : &lt;unnamed-tag&gt;</span><br><span class="line">         +<span class="number">0x02c</span> StartingSector   : Uint4B</span><br><span class="line">         +<span class="number">0x030</span> NumberOfFullSectors : Uint4B</span><br><span class="line">      +<span class="number">0x018</span> PtesInSubsection : Uint4B</span><br><span class="line">      +<span class="number">0x020</span> UnusedPtes       : Uint4B</span><br><span class="line">      +<span class="number">0x020</span> GlobalPerSessionHead : _RTL_AVL_TREE</span><br><span class="line">         +<span class="number">0x000</span> Root             : Ptr64 _RTL_BALANCED_NODE</span><br><span class="line">      +<span class="number">0x028</span> u                : &lt;unnamed-tag&gt;</span><br><span class="line">         +<span class="number">0x000</span> LongFlags        : Uint4B</span><br><span class="line">         +<span class="number">0x000</span> SubsectionFlags  : _MMSUBSECTION_FLAGS</span><br><span class="line">      +<span class="number">0x02c</span> StartingSector   : Uint4B</span><br><span class="line">      +<span class="number">0x030</span> NumberOfFullSectors : Uint4B</span><br><span class="line">   +<span class="number">0x050</span> FirstPrototypePte : Ptr64 _MMPTE</span><br><span class="line">      +<span class="number">0x000</span> u                : &lt;unnamed-tag&gt;</span><br><span class="line">         +<span class="number">0x000</span> Long             : Uint8B</span><br><span class="line">         +<span class="number">0x000</span> VolatileLong     : Uint8B</span><br><span class="line">         +<span class="number">0x000</span> Hard             : _MMPTE_HARDWARE</span><br><span class="line">         +<span class="number">0x000</span> Flush            : _HARDWARE_PTE</span><br><span class="line">         +<span class="number">0x000</span> Proto            : _MMPTE_PROTOTYPE</span><br><span class="line">         +<span class="number">0x000</span> Soft             : _MMPTE_SOFTWARE</span><br><span class="line">         +<span class="number">0x000</span> TimeStamp        : _MMPTE_TIMESTAMP</span><br><span class="line">         +<span class="number">0x000</span> Trans            : _MMPTE_TRANSITION</span><br><span class="line">         +<span class="number">0x000</span> Subsect          : _MMPTE_SUBSECTION</span><br><span class="line">         +<span class="number">0x000</span> List             : _MMPTE_LIST</span><br><span class="line">   +<span class="number">0x058</span> LastContiguousPte : Ptr64 _MMPTE</span><br><span class="line">   +<span class="number">0x060</span> ViewLinks        : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x070</span> VadsProcess      : Ptr64 _EPROCESS</span><br><span class="line">   +<span class="number">0x078</span> u4               : &lt;unnamed-tag&gt;</span><br><span class="line">      +<span class="number">0x000</span> SequentialVa     : _MI_VAD_SEQUENTIAL_INFO</span><br><span class="line">         +<span class="number">0x000</span> Length           : Pos <span class="number">0</span>, <span class="number">12</span> Bits</span><br><span class="line">         +<span class="number">0x000</span> Vpn              : Pos <span class="number">12</span>, <span class="number">52</span> Bits</span><br><span class="line">      +<span class="number">0x000</span> ExtendedInfo     : Ptr64 _MMEXTEND_INFO</span><br><span class="line">         +<span class="number">0x000</span> CommittedSize    : Uint8B</span><br><span class="line">         +<span class="number">0x008</span> ReferenceCount   : Uint4B</span><br></pre></td></tr></table></figure></div><p>可以在 Windbg 使用 <code>!vad</code> 命令来显示 VAD 所有内容:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: kd&gt; !process <span class="number">0</span> <span class="number">1</span> explorer.exe</span><br><span class="line">PROCESS ffffe000080b5900</span><br><span class="line"><span class="symbol">    SessionId:</span> <span class="number">1</span>  Cid: 05c0    Peb: 7ff6baea6000  ParentCid: 05b0</span><br><span class="line"><span class="symbol">    DirBase:</span> 2693f000  ObjectTable: ffffc00001b4b240  HandleCount: &lt;Data <span class="keyword">Not</span> Accessible&gt;</span><br><span class="line"><span class="symbol">    Image:</span> explorer.exe</span><br><span class="line">-&gt;  VadRoot ffffe0000a4fa3d0 Vads <span class="number">487</span> Clone <span class="number">0</span> Private <span class="number">21876</span>. Modified <span class="number">2328</span>. Locked <span class="number">4293</span>.</span><br><span class="line">    DeviceMap ffffc00001809d90</span><br><span class="line">    Token                             ffffc00001b5e060</span><br><span class="line">    ElapsedTime                       <span class="number">00</span>:<span class="number">03</span>:<span class="number">05.489</span></span><br><span class="line">    UserTime                          <span class="number">00</span>:<span class="number">00</span>:<span class="number">00.562</span></span><br><span class="line">    KernelTime                        <span class="number">00</span>:<span class="number">00</span>:<span class="number">01.171</span></span><br><span class="line">    QuotaPoolUsage[PagedPool]         <span class="number">1164104</span></span><br><span class="line">    QuotaPoolUsage[NonPagedPool]      <span class="number">65696</span></span><br><span class="line">    Working Set Sizes (now,min,max)  (<span class="number">45742</span>, <span class="number">50</span>, <span class="number">345</span>) (182968KB, 200KB, 1380KB)</span><br><span class="line">    PeakWorkingSetSize                <span class="number">47348</span></span><br><span class="line">    VirtualSize                       <span class="number">502</span> Mb</span><br><span class="line">    PeakVirtualSize                   <span class="number">532</span> Mb</span><br><span class="line">    PageFaultCount                    <span class="number">61975</span></span><br><span class="line">    MemoryPriority                    FOREGROUND</span><br><span class="line">    BasePriority                      <span class="number">8</span></span><br><span class="line">    CommitCharge                      <span class="number">25753</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: kd&gt; !vad <span class="number">0xffffe0000a4fa3d0</span> </span><br><span class="line">VAD           Level     Start       End Commit</span><br><span class="line">ffffe00008100830  <span class="number">7</span>       de0       def      <span class="number">0</span> Mapped       READWRITE          Pagefile <span class="meta">section</span>, shared commit <span class="number">0x10</span></span><br><span class="line">ffffe000080f5bd0  <span class="number">8</span>       df0       dfc      <span class="number">2</span> Private      READWRITE          </span><br><span class="line">ffffe00008093c50  <span class="number">6</span>       e00       e0e      <span class="number">0</span> Mapped       READONLY           Pagefile <span class="meta">section</span>, shared commit <span class="number">0xf</span></span><br><span class="line">ffffe0000810a500  <span class="number">8</span>       e10       e8f     <span class="number">13</span> Private      READWRITE          </span><br><span class="line">ffffe000080b4e40  <span class="number">7</span>       e90       e93      <span class="number">0</span> Mapped       READONLY           Pagefile <span class="meta">section</span>, shared commit <span class="number">0x4</span></span><br><span class="line">ffffe00008093a70  <span class="number">8</span>       ea0       ea2      <span class="number">0</span> Mapped       READONLY           Pagefile <span class="meta">section</span>, shared commit <span class="number">0x3</span></span><br><span class="line">ffffe000080e62f0  <span class="number">5</span>       eb0       eb1      <span class="number">2</span> Private      READWRITE          </span><br><span class="line">ffffe000080f2d10  <span class="number">7</span>       ec0       f3d      <span class="number">0</span> Mapped       READONLY           \Windows\System32\locale.nls</span><br><span class="line">...</span><br><span class="line">ffffe000078a8d60  <span class="number">9</span> 7ffc64010 7ffc64079      <span class="number">2</span> Mapped  Exe  EXECUTE_WRITECOPY  \Windows\System32\ws2_32.dll</span><br><span class="line">ffffe000080f0200  <span class="number">8</span> 7ffc64080 7ffc64234     <span class="number">10</span> Mapped  Exe  EXECUTE_WRITECOPY  \Windows\System32\ntdll.dll</span><br><span class="line"></span><br><span class="line">Total VADs: <span class="number">487</span>, average level: <span class="number">8</span>, maximum depth: <span class="number">10</span></span><br><span class="line">Total private commit: <span class="number">0x635e</span> pages (<span class="number">101752</span> KB)</span><br><span class="line">Total shared commit:  <span class="number">0x12e9</span> pages (<span class="number">19364</span> KB)</span><br></pre></td></tr></table></figure><p>实际上, VadRoot 的地址存在于 <code>_EPROCESS-&gt;VadRoot-&gt;Root</code> 中的</p><p><code>!vad</code> 输出各项含义:</p><ul><li>VAD, _MMVAD 数据结构的地址</li><li>Level, 树的深度</li><li>Start/End, 表示为虚拟页号(VPN, Virtual Page Number), 即地址除以页面大小 (4KB) 的值.<br>例如第一行定义从 <code>0xde0000</code> 开始, 以 <code>0xdeffff</code> 结束, 注意结束地址是最后一页的 VPN, 所以最后一个字节的地址是 <code>0x1F000 + 0xFFF</code></li><li>Commit, 范围内已提交的页面数, 我们可以选择保留一个范围, 然后只提交其中一部分.</li><li>分配类型.</li><li>页面上允许的访问类型.</li></ul><p>当 PML4E 当前位清零时, 对应的 VA 范围不存在 PDPT, PD 或 PT. 没有存储该范围的 PDPT 的物理页面, 没有存储 PD 的页面等.<br>同样, PML4E 可以指向现有的 PDPT, 但是 PDPTE 可以使当前位清零, 因此对于该特定范围不存在 PD 或 PT.</p><p>对于 <code>_MMVAD_SHORT.u.VadFlags.MemCommit = 1</code>, VMM必须在PTE内部记录其已被分解的信息, 因为VAD标志将范围标记为完全提交. 对于这样的范围, 将VAD标志设置为1, 并且按照说明设置分解的PTE. </p><p>对于 <code>_MMVAD_SHORT.u.VadFlags.MemCommit = 0</code> 的范围, VMM可以设想将PTE设置为0: 范围不会在VAD中标记为已提交, 因此PTE设置为0表示未提交的页面. 然而, 实际发生的情况是, PTE设置为 <code>0x00000000&#39;00000200</code>. </p><hr><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个操作系统要称为现代意义上的操作系统就必须提供对内核的保护, 对不同用户程序之间的隔离, 并允许软件的载入位置浮动.&lt;br&gt;而满足这些基本要求的手段, 就是采用基于页面映射的 “虚拟内存” 机制, 或者说提供 “分页内存管理”.&lt;/p&gt;
&lt;p&gt;在硬件上, 这是由 CPU 芯片的 “存储管理单元” MMU 支持的. 而在软件商, 则由操作系统内核中的内存管理模块实现.&lt;/p&gt;
    
    </summary>
    
      <category term="Windows kernel learning" scheme="https://mirokaku.github.io/Blog/categories/Windows-kernel-learning/"/>
    
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/tags/Windows/"/>
    
      <category term="Kernel" scheme="https://mirokaku.github.io/Blog/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>IDA + VMWare 调试 Windows 内核</title>
    <link href="https://mirokaku.github.io/Blog/2017/IDA-VM-MSKernel/"/>
    <id>https://mirokaku.github.io/Blog/2017/IDA-VM-MSKernel/</id>
    <published>2017-05-12T11:00:18.000Z</published>
    <updated>2019-05-16T11:05:52.862Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>配置虚拟机</p><p> 打开虚拟机 <code>vmx</code> 文件, 增加下面内容</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">debugStub.listen.guest32.remote = "TRUE"    // 默认端口 8832</span><br><span class="line">debugStub.listen.guest64.remote = "TRUE"    // 默认端口 8864</span><br><span class="line">monitor.debugOnStartGuest32     = "TRUE"    // 在第一条指令 (在BIOS! 中警告) 中断进入调试存根, 这将在第一条指令在0xFFFF0处停止VM, 您可以设置下一个断点来破坏* 0x7c00引导加载程序由BIOS加载</span><br><span class="line">debugStub.hideBreakpoints       = "TRUE"    // 启用使用硬件断点而不是软件（INT3）断点</span><br><span class="line">bios.bootDelay                  = "3000"    // 延迟启动BIOS代码</span><br></pre></td></tr></table></figure></li><li><p>配置调试器</p><p> <code>IDA -&gt; Debugger -&gt; Attach -&gt; Remote GDB debugger</code><br> <code>hostname</code> 填 <code>localhost</code>, <code>port</code> 填上面给出的默认端口</p></li><li><p>设置内存布局</p><p> <code>Alt + S</code> 设置内存布局 <code>0x0 ~ 0xFFFFFFF0</code> or x64: <code>0x0 ~ 0xFFFFFFFFFFFFFFF0</code></p></li></ol><blockquote><p>如果是要调试 BIOS 代码, 那么应创建一个从 0xF0000 到 0x10000 的 16 位段</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;配置虚拟机&lt;/p&gt;
&lt;p&gt; 打开虚拟机 &lt;code&gt;vmx&lt;/code&gt; 文件, 增加下面内容&lt;/p&gt;
 &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="Kernel" scheme="https://mirokaku.github.io/Blog/tags/Kernel/"/>
    
      <category term="Debug" scheme="https://mirokaku.github.io/Blog/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>Windows kernel learning: 2. System Call</title>
    <link href="https://mirokaku.github.io/Blog/2017/2-System-Call/"/>
    <id>https://mirokaku.github.io/Blog/2017/2-System-Call/</id>
    <published>2017-05-12T05:41:43.000Z</published>
    <updated>2017-05-18T06:29:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>CPU 既可以运行于非特权的”用户空间”, 也可以运行于特权的”系统空间”.</p><p>CPU 要从系统空间转入用户空间是容易的, 因为运行于系统空间的CPU可以通过一些特权指令改变其运行状态. 但是从用户空间转入系统空间就不容易了, 因为运行于用户空间的 CPU 是不能执行特权指令的.</p><p>一般而言,只有下面几种手段可以从用户空间转入系统空间:</p><ul><li><p>中断 (Interrupt): 在开启了中断的情况下,只要有中断请求到来, CPU 就会自动转入系统空间, 并指定对应的中断例程, 从而为中断请求提供服务. 中断发生在两条指令之间, 所以不会使正在执行的指令半途而废, 中断是无法预知且异步的.</p></li><li><p>异常 (Exception): 异常和中断极其相似, 只是一行发生在执行一条指令的过程中, 而不是两条指令之间. 实践中, 可以通过故意引起异常而进入内核.</p></li><li><p>自陷 (Trap): 为了让 CPU 能主动地进入系统空间, 绝大多数 CPU 都设有专门的 “自陷” 指令, 系统调用通常都是通过自陷指令实现的. 自陷指令在形式上也与中断相似,就像是 CPU 主动发出的中断请求.</p></li><li><p>快速系统调用 (fast call): 可以说是对自陷机制的改进.</p></li></ul><p>这篇笔记主要就是写自陷和快速系统调用机制.</p><a id="more"></a><h2 id="系统调用机制概述"><a href="#系统调用机制概述" class="headerlink" title="系统调用机制概述"></a>系统调用机制概述</h2><h3 id="自陷指令-int-2eh"><a href="#自陷指令-int-2eh" class="headerlink" title="自陷指令 int 2eh"></a>自陷指令 int 2eh</h3><p>在 Pentium Ⅱ 之前的 x86 处理器上, Windows 使用 <code>int 2eh</code> 自陷指令进入内核实现系统调用. Windows 填充 IDT 的46 号表项, 使其指向系统服务分发器. 使用 EAX 寄存器传递系统服务号, EDX 寄存器指向调用者传递给系统服务的参数列表.</p><h3 id="sysenter-sysexit"><a href="#sysenter-sysexit" class="headerlink" title="sysenter/sysexit"></a>sysenter/sysexit</h3><p>在之后, Windows 使用专门的 <code>sysenter</code> 指令, 这是 Intel 特别为快速系统分发而定义的指令, 与此配套, CPU 中增加了三个 MSR (Machine Specific Register) 寄存器: <code>SYSENTER_CS_MSR</code>, <code>SYSENTER_EIP_MSR</code>, <code>SYSENTER_ESP_MSR</code>. </p><p>这些寄存器可以通过 <code>wrmsr</code> 指令来设置, 执行 <code>wrmsr</code> 指令时, 通过寄存器 edx, eax 指定设置的值, edx 指定值的高 32 位, eax 指定值的低 32 位, 在设置上述寄存器时, edx 都是 0, 通过寄存器 ecx 指定填充的 MSR 寄存器, <code>SYSENTER_CS_MSR</code>, <code>SYSENTER_ESP_MSR</code>, <code>SYSENTER_EIP_MSR</code> 寄存器分别对应 <code>0x174, 0x175, 0x176</code>, 需要注意的是, <code>wrmsr/rdmsr</code> 指令只能在 Ring 0 执行.</p><p>与自陷指令一样, sysenter 使用 EAX 寄存器传递系统服务号, EDX 寄存器指向调用者传递给系统服务的参数列表.</p><h3 id="syscall-sysret"><a href="#syscall-sysret" class="headerlink" title="syscall/sysret"></a>syscall/sysret</h3><p>在之后的 x64 体系架构上, Windows 使用 <code>syscall</code> 指令进行系统调用,将系统调用号通过EAX寄存器来传递, 前四个参数放在寄存器中传递, 剩下的参数都被放入栈中.</p><p>为了支持 <code>syscall/sysret</code>, AMD 新增了4个 MSR 寄存器:</p><ul><li>STAR</li><li>LSTAR</li><li>CSTAR</li><li>SFMASK</li></ul><p><img src="syscall_msr.jpg" alt="syscall msr"><br><img src="syscall_star.jpg" alt="syscall star"></p><p>通过上图我们已经明白了 STAR 寄存器的用途：</p><p>在 <code>legacy x86</code> 下提供 <code>eip</code> 值（仅在 <code>egacy x86</code> 模式下）<br>为 <code>syscall</code> 指令提供目标代码的 <code>CS</code> 和 <code>SS</code> selector<br>为 <code>sysret</code> 指令提供返回代码的 <code>CS</code> 和 <code>SS</code> selector</p><p>因此, STAR 寄存器分为三部分：</p><ol><li>[31:00] - SYSCALL_EIP - legacy 模式的 EIP</li><li>[47:32] - SYSCALL_CS</li><li>[63:48] - SYSRET_CS</li></ol><ul><li>SYSRET_CS：32-bit code segment descriptor selector (包括 legacy x86 的 16-bit 代码)</li><li>SYSRET_CS+8：stack segment descriptor selector</li><li>SYSRET_CS+16：64-bit code segment descriptor selector</li></ul><p>SFMASK 寄存器中的值为1的位,就会在 EFLAGS 寄存器中置零.</p><p>在 Intel 下 STSR 被称作 <code>IA32_STAR</code>, LSTAR 被称作 <code>IA32_LSTAR</code>,  SFMASK 被称作 <code>IA32_SFMASK</code>,  虽然是冠以 IA32 体系, 但是请相信它们是 64 位的. 除前面所说的只能在 64 位环境执行, 其它方面完全是兼容 AMD 的. </p><p>在 Windows 中, LSTAR 实际指向 KiSystemCall64, CSTAR 指向 KiSystemCall32.</p><h3 id="对于-sysenter-和-syscall-的关系"><a href="#对于-sysenter-和-syscall-的关系" class="headerlink" title="对于 sysenter 和 syscall 的关系:"></a>对于 <code>sysenter</code> 和 <code>syscall</code> 的关系:</h3><blockquote><p>在 AMD 与 Intel 的 processor 上还是有区别的: </p><p>在 AMD 的 processor 上: syscall/sysret 指令在 long mode 和 protected mode ( 指的是 Legacy x86 和 compatibility mode ) 上都是有效的 ( valid ).</p><p>在 Intel processor 上: syscall/sysret 指令只能在 64-bit 模式上使用, compatibility 模式和 Legacy x86 模式上都是无效的. 可是 sysret 指令虽然不能在 compatibility 模式下执行, 但 sysret 却可以返回到 compaitibility 模式. 这一点只能是认为了兼容 AMD 的 sysret 指令. </p><p>怎么办, 这会不会出现兼容上的问题? 这里有一个折衷的处理办法: </p><p>在 64 位环境里统一使用 syscall/sysret 指令, 在 32 位环境里统一使用 sysenter/sysexit 指令</p><p>然而依旧会产生一些令人不愉快的顾虑, 没错, 在 compatibility 模式下谁都不兼容谁:</p><p>Intel 的 syscall/sysret 指令不能在 compatibility 模式下执行; AMD 的 sysenter/sysexit 指令也不能在 compatibility 模式下执行.</p><p>因此: 在 compatibility 模式下必须切换到 64 位模式, 然后使用 syscall/sysret 指令</p><p>详见: <span class="exturl" data-url="aHR0cDovL3d3dy5tb3VzZW9zLmNvbS9hcmNoL3N5c2NhbGxfc3lzcmV0Lmh0bWw=" title="http://www.mouseos.com/arch/syscall_sysret.html">mik-使用 syscall/sysret 指令<i class="fa fa-external-link"></i></span></p></blockquote><h2 id="系统调用机制的切换过程"><a href="#系统调用机制的切换过程" class="headerlink" title="系统调用机制的切换过程"></a>系统调用机制的切换过程</h2><h3 id="int-2eh-指令"><a href="#int-2eh-指令" class="headerlink" title="int 2eh 指令"></a><code>int 2eh</code> 指令</h3><p>CPU 的运行状态从用户态切换成内核态. 从任务状态段 TSS 中装入本线程的内核栈寄存器 SS 和 ESP, 再保存现场, 依次 PUSH SS, ESP, EFLAGS, CS, EIP, 然后执行 IDT[0x2e] 中的系统服务分发器开始执行内核中的程序. 最后系统调用返回则通过中断返回指令 <code>iret</code> 实现上述的逆过程.</p><h3 id="sysenter-sysexit-指令"><a href="#sysenter-sysexit-指令" class="headerlink" title="sysenter/sysexit 指令"></a><code>sysenter/sysexit</code> 指令</h3><p>在 Ring3 的代码调用了 <code>sysenter</code> 指令之后, CPU 会做出如下的操作：</p><ol><li>将 <code>SYSENTER_CS_MSR</code> 的值装载到 cs 寄存器</li><li>将 <code>SYSENTER_EIP_MSR</code> 的值装载到 eip 寄存器</li><li>将 <code>SYSENTER_CS_MSR</code> 的值加 8（Ring0 的堆栈段描述符）装载到 ss 寄存器. </li><li>将 <code>SYSENTER_ESP_MSR</code> 的值装载到 esp 寄存器</li><li>将特权级切换到 Ring0</li><li>如果 EFLAGS 寄存器的 VM 标志被置位, 则清除该标志</li><li>开始执行指定的 Ring0 代码</li></ol><p>在 Ring0 代码执行完毕, 调用 <code>SYSEXIT</code> 指令退回 Ring3 时, CPU 会做出如下操作：</p><ol><li>将 <code>SYSENTER_CS_MSR</code> 的值加 16（Ring3 的代码段描述符）装载到 cs 寄存器</li><li>将寄存器 edx 的值装载到 eip 寄存器</li><li>将 <code>SYSENTER_CS_MSR</code> 的值加 24（Ring3 的堆栈段描述符）装载到 ss 寄存器</li><li>将寄存器 ecx 的值装载到 esp 寄存器</li><li>将特权级切换到 Ring3</li><li>继续执行 Ring3 的代码</li></ol><h3 id="syscall-sysret-指令"><a href="#syscall-sysret-指令" class="headerlink" title="syscall/sysret 指令"></a><code>syscall/sysret</code> 指令</h3><p>用伪代码来表示</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">MSR_EFER EFER;</span><br><span class="line">MSR_STAR STAR;</span><br><span class="line">MSR_LSTAR LSTAR;</span><br><span class="line">MSR_CSTAR CSTAR;</span><br><span class="line">MSR_SFMASK SFMASK;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">syscall</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (EFER.SCE == <span class="number">0</span>)        <span class="comment">/* system call extensions is disable */</span></span><br><span class="line">        do_exception_UD();    <span class="comment">/* #UD exception */</span></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (EFER.LMA == <span class="number">1</span>) &#123;      <span class="comment">/* long mode is active */</span></span><br><span class="line">        rcx = rip;            <span class="comment">/* save rip for syscall return */</span></span><br><span class="line">        r11 = rflags;         <span class="comment">/* save rflags to r11 */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * CS.L == 1 for 64-bit mode, rip from MSR_LSTAR</span></span><br><span class="line"><span class="comment">         * CS.L == 0 for compatibility, rip from MSR_CSTAR</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rip = CS.attribute.L ? LSTAR : CSTAR;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * processor set CS register </span></span><br><span class="line"><span class="comment">         */</span>       </span><br><span class="line">        CS.selector = STAR.SYSCALL_CS;       <span class="comment">/* load selector from MSR_STAR.SYSCALL_CS */</span></span><br><span class="line">        CS.selector.RPL = <span class="number">0</span>;                 <span class="comment">/* RPL = 0 */</span></span><br><span class="line">        CS.attribute.S = <span class="number">1</span>;                  <span class="comment">/* user segment descriptor */</span></span><br><span class="line">        CS.attribute.C_D = <span class="number">1</span>;                <span class="comment">/* code segment */</span></span><br><span class="line">        CS.attribute.L = <span class="number">1</span>;                  <span class="comment">/* 64-bit */</span></span><br><span class="line">        CS.attribute.D = <span class="number">0</span>;                  <span class="comment">/* 64-bit */</span></span><br><span class="line">        CS.attribute.DPL = <span class="number">0</span>;                <span class="comment">/* CPL = 0 */</span>                   </span><br><span class="line">        CS.attribute.P = <span class="number">1</span>;                  <span class="comment">/* present = 1 */</span></span><br><span class="line">        CS.base = <span class="number">0</span>;</span><br><span class="line">        CS.limit = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * processor set SS register</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         SS.selector = STAR.SYSCALL_CS + <span class="number">8</span>;</span><br><span class="line">         SS.attribute.S = <span class="number">1</span>;</span><br><span class="line">         SS.attribute.C_D = <span class="number">0</span>;</span><br><span class="line">         SS.attribute.P = <span class="number">1</span>;</span><br><span class="line">         SS.attribute.DPL = <span class="number">0</span>;</span><br><span class="line">         SS.base = <span class="number">0</span>;</span><br><span class="line">         SS.limit = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line"></span><br><span class="line">         <span class="comment">/* set rflags */</span></span><br><span class="line">         rflags = rflags &amp; ~ SFMASK;</span><br><span class="line">         rflags.RF = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">         <span class="comment">/* goto rip ... */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* legacy mode */</span></span><br><span class="line"></span><br><span class="line">        rcx = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)eip;            <span class="comment">/* eip extend to 64 load into rcx */</span></span><br><span class="line">        rip = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)STAR.EIP;       <span class="comment">/* get eip from MSR_STAR.EIP */</span></span><br><span class="line">       </span><br><span class="line">        CS.selector = STAR.SYSCALL_CS;</span><br><span class="line">        CS.selector.RPL = <span class="number">0</span>;</span><br><span class="line">        CS.attribute.S = <span class="number">1</span>;                  <span class="comment">/* user descriptor */</span></span><br><span class="line">        CS.attribute.C_D = <span class="number">1</span>;                <span class="comment">/* code segment */</span></span><br><span class="line">        CS.attribute.D = <span class="number">1</span>;                  <span class="comment">/* 32-bit */</span></span><br><span class="line">        CS.attribute.C = <span class="number">0</span>;                  <span class="comment">/* non-conforming */</span></span><br><span class="line">        CS.attribute.R = <span class="number">1</span>;                  <span class="comment">/* read/execute */</span></span><br><span class="line">        CS.attribute.DPL = <span class="number">0</span>;                <span class="comment">/* CPL = 0 */</span>                   </span><br><span class="line">        CS.attribute.P = <span class="number">1</span>;                  <span class="comment">/* present = 1 */</span></span><br><span class="line">        CS.attribute.G = <span class="number">1</span>;                  <span class="comment">/* G = 1 */</span></span><br><span class="line">        CS.base = <span class="number">0</span>;</span><br><span class="line">        CS.limit = <span class="number">0xFFFFFFFF</span>;                     </span><br><span class="line"></span><br><span class="line">        SS.selector = STAR.SYSCALL_CS + <span class="number">8</span>;</span><br><span class="line">        SS.attribute.S = <span class="number">1</span>;                 <span class="comment">/* user descriptor */</span></span><br><span class="line">        SS.attribute.C_D = <span class="number">0</span>;               <span class="comment">/* data segment */</span></span><br><span class="line">        SS.attribute.D = <span class="number">1</span>;                 <span class="comment">/* 32-bit esp */</span></span><br><span class="line">        SS.attribute.E = <span class="number">0</span>;                 <span class="comment">/* expand-up */</span></span><br><span class="line">        SS.attribute.W = <span class="number">1</span>;                 <span class="comment">/* read/write */</span></span><br><span class="line">        SS.attribute.P = <span class="number">1</span>;                 <span class="comment">/* present */</span></span><br><span class="line">        SS.attribute.DPL = <span class="number">0</span>;               <span class="comment">/* DPL = 0 */</span></span><br><span class="line">        SS.attribute.G = <span class="number">1</span>;                 <span class="comment">/* G = 1 */</span></span><br><span class="line">        SS.base = <span class="number">0</span>;</span><br><span class="line">        SS.limit = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line"></span><br><span class="line">        rflags.VM = <span class="number">0</span>;</span><br><span class="line">        rflags.IF = <span class="number">0</span>;</span><br><span class="line">        rflags.RF = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* goto rip */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sysret</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (EFER.SCE == <span class="number">0</span>)                          <span class="comment">/* System Call Extension is disable */</span></span><br><span class="line">        do_exception_UD();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CR0.PE == <span class="number">0</span> || CS.attribute.DPL != <span class="number">0</span>)   <span class="comment">/* protected mode is disable or CPL != 0 */</span></span><br><span class="line">        do_exception_GP();    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CS.attribute.L == <span class="number">1</span>)                    <span class="comment">/* 64-bit mode */</span></span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="keyword">if</span> (REX.W == <span class="number">1</span>)                         <span class="comment">/* 64-bit operand size */</span></span><br><span class="line">        &#123;</span><br><span class="line">             <span class="comment">/* </span></span><br><span class="line"><span class="comment">              * return to 64-bit code !</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">             CS.selector = STAR.SYSRET_CS + <span class="number">16</span>; <span class="comment">/* 64-bit code segment selector */</span></span><br><span class="line">             CS.selector.RPL = <span class="number">3</span>;               <span class="comment">/* CPL = 3 */</span></span><br><span class="line">             CS.attribute.L = <span class="number">1</span>;</span><br><span class="line">             CS.attribute.D = <span class="number">0</span>;</span><br><span class="line">             CS.attribute.P = <span class="number">1</span>;</span><br><span class="line">             CS.attribute.DPL = <span class="number">3</span>;</span><br><span class="line">             CS.base = <span class="number">0</span>;</span><br><span class="line">             CS.limit = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">           </span><br><span class="line">             rip = rcx;                     <span class="comment">/* restore rip for return */</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">/*</span></span><br><span class="line"><span class="comment">              * return to compatibility !</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">             CS.selector = STAR.SYSRET_CS;  <span class="comment">/* 32-bit code segment selector */</span></span><br><span class="line">             CS.selector.RPL = <span class="number">3</span>;</span><br><span class="line">             CS.attribute.L = <span class="number">0</span>;            <span class="comment">/* compatibility mode */</span></span><br><span class="line">             CS.attribute.D = <span class="number">1</span>;            <span class="comment">/* 32-bit code */</span></span><br><span class="line">             CS.attribute.P = <span class="number">1</span>;</span><br><span class="line">             CS.attribute.C = <span class="number">0</span>;</span><br><span class="line">             CS.attribute.R = <span class="number">1</span>;</span><br><span class="line">             CS.attribute.DPL = <span class="number">3</span>;</span><br><span class="line">             CS.base = <span class="number">0</span>;</span><br><span class="line">             CS.limit = <span class="number">0xFFFFFFFF</span>; </span><br><span class="line"></span><br><span class="line">             rip = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)ecx;              </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        SS.selector = START.SYSRET_CS + <span class="number">8</span>;  <span class="comment">/* SS selector for return */</span></span><br><span class="line">        rflags = r11;                       <span class="comment">/* restore rflags */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* goto rip */</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                                <span class="comment">/* compatibility or legacy mode */</span></span><br><span class="line"></span><br><span class="line">         CS.selector = STAR.SYSRET_CS;      <span class="comment">/* 32-bit code segment selector */</span></span><br><span class="line">         CS.selector.RPL = <span class="number">3</span></span><br><span class="line">         CS.attribute.L = <span class="number">0</span>;                <span class="comment">/* compatibility mode */</span></span><br><span class="line">         CS.attribute.D = <span class="number">1</span>;                <span class="comment">/* 32-bit code */</span></span><br><span class="line">         CS.attribute.P = <span class="number">1</span>;</span><br><span class="line">         CS.attribute.C = <span class="number">0</span>;</span><br><span class="line">         CS.attribute.R = <span class="number">1</span>;</span><br><span class="line">         CS.attribute.DPL = <span class="number">3</span>;</span><br><span class="line">         CS.base = <span class="number">0</span>;</span><br><span class="line">         CS.limit = <span class="number">0xFFFFFFFF</span>; </span><br><span class="line"></span><br><span class="line">         SS.selector = STAR.SYSRET_CS + <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">         rflags.IF = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">         rip = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)ecx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="System-Service-Descriptor-Table-SSDT-amp-Shadow-SSDT"><a href="#System-Service-Descriptor-Table-SSDT-amp-Shadow-SSDT" class="headerlink" title="System Service Descriptor Table (SSDT) &amp; Shadow SSDT"></a>System Service Descriptor Table (SSDT) &amp; Shadow SSDT</h2><p>现在我们知道, Ring3 通过 <code>syscall</code> 进行系统调用到 Ring0, 那么 <code>syscall</code> 是怎么找到对应的内核服务函数的呢? 就是通过 SSDT 和 Shadow SSDT 这两张表来找到的.</p><p>SSDT 的全称是 System Services Descriptor Table, 系统服务描述符表. 这个表就是一个把 Ring3 的 Win32 API 和 Ring0 的内核 API 联系起来. SSDT 并不仅仅只包含一个庞大的地址索引表, 它还包含着一些其它有用的信息, 诸如地址索引的基地址, 服务函数个数等. 通过修改此表的函数地址可以对常用Windows 函数及 API 进行 Hook, 从而实现对一些关心的系统动作进行过滤, 监控的目的. 一些 HIPS, 防毒软件, 系统监控, 注册表监控软件往往会采用此接口来实现自己的监控模块. </p><p>例如, Windows API OpenProcess是从Kernel32导出的, 所以调用首先转到了Kernel32的OpenProcess函数. 在OpenProcess中又调用了ntdll!NtOpenProcess函数. 然后通过快速系统调用进入内核, 根据传进来的索引在SSDT中得到函数的地址, 然后调用函数. </p><p>在 NT 4.0 以上的 Windows 操作系统中, 默认就存在两个系统服务描述表, 这两个调度表对应了两类不同的系统服务, 这两个调度表为：KeServiceDescriptorTable 和 KeServiceDescriptorTableShadow, 其中 KeServiceDescriptorTable 主要是处理来自 Ring3 层得 Kernel32.dll中的系统调用, 而 KeServiceDescriptorTableShadow 则主要处理来自 User32.dll 和 GDI32.dll 以及 Win32u.dll 中的系统调用, 并且 KeServiceDescriptorTable 在ntoskrnl.exe(Windows 操作系统内核文件, 包括内核和执行体层)是导出的, 而 KeServiceDescriptorTableShadow 则是没有被 Windows 操作系统所导出, 而关于 SSDT 的全部内容则都是通过 KeServiceDescriptorTable 来完成的 ~</p><p>ntoskrnl.exe中的一个导出项 KeServiceDescriptorTable 即是SSDT的真身, 亦即它在内核中的数据实体. SSDT的数 据结构定义如下: </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSYSTEM_SERVICE_TABLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PULONG  ServiceTableBase;                               <span class="comment">// SSDT (System Service Dispatch Table)的基地址</span></span><br><span class="line">    PULONG  ServiceCounterTableBase;                        <span class="comment">// 用于 checked builds, 包含 SSDT 中每个服务被调用的次数</span></span><br><span class="line">    ULONG   NumberOfService;                                <span class="comment">// 服务函数的个数, NumberOfService * 4 就是整个地址表的大小</span></span><br><span class="line">    ULONG   ParamTableBase;                                 <span class="comment">// SSPT(System Service Parameter Table)的基地址, 该表格包含了每个服务所需的参数字节数</span></span><br><span class="line">&#125; KSYSTEM_SERVICE_TABLE, *PKSYSTEM_SERVICE_TABLE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KSERVICE_TABLE_DESCRIPTOR</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    KSYSTEM_SERVICE_TABLE   ntoskrnl;                       <span class="comment">// ntoskrnl.exe 的服务函数</span></span><br><span class="line">    KSYSTEM_SERVICE_TABLE   win32k;                         <span class="comment">// win32k.sys 的服务函数(GDI32.dll/User32.dll 的内核支持)</span></span><br><span class="line">    KSYSTEM_SERVICE_TABLE   notUsed1;</span><br><span class="line">    KSYSTEM_SERVICE_TABLE   notUsed2;</span><br><span class="line">&#125;KSERVICE_TABLE_DESCRIPTOR, *PKSERVICE_TABLE_DESCRIPTOR;</span><br></pre></td></tr></table></figure></div><p>然而, x86 与 x64 有些许差别, x86 中 ServiceTableBase 存储的就是系统服务函数地址.<br>而 x64 中 ServiceTableBase 存储的是相对于ServiceTableBase的系统服务函数的偏移, 同样使用4字节表示一项.<br>由于函数的起始地址最低四位都是0, 所以微软将 SSDT 中的低四位用来记录这个函数有多少个参数需要在<strong>栈</strong>中传递, 即 <code>ArgumentCount - 4</code> (RCX, RDX, R8, R9).</p><p>那么根据 KiSystemServiceStart 函数可得到算法:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x86: Address = ServiceTableBase + (SystemCallNumber * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">x64: Address = ServiceTableBase + (((<span class="keyword">int</span>*)(ServiceTableBase + (SystemCallNumber &amp; <span class="number">0x0FFF</span>) * <span class="number">4</span>))[<span class="number">0</span>] &gt;&gt; <span class="number">4</span>)</span><br></pre></td></tr></table></figure></div><h2 id="拿个栗子说事儿"><a href="#拿个栗子说事儿" class="headerlink" title="拿个栗子说事儿"></a>拿个栗子说事儿</h2><h3 id="Windows-8-1-x64-syscall-sysret"><a href="#Windows-8-1-x64-syscall-sysret" class="headerlink" title="Windows 8.1 x64, syscall/sysret"></a>Windows 8.1 x64, syscall/sysret</h3><p>首先我们来看下 <code>syscall/sysret</code> 相关的几个寄存器</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1: kd&gt; rdmsr c0000081</span><br><span class="line">msr[c0000081] = 00230010`00000000</span><br><span class="line">1: kd&gt; rdmsr c0000082</span><br><span class="line">msr[c0000082] = fffff800`2a492200</span><br><span class="line">1: kd&gt; ln fffff800`2a492200</span><br><span class="line">Browse module</span><br><span class="line">Set bu breakpoint</span><br><span class="line"></span><br><span class="line">(fffff800`2a492200)   nt!KiSystemCall64   |  (fffff800`2a492348)   nt!KiSystemServiceStart</span><br><span class="line">Exact matches:</span><br><span class="line">    nt!KiSystemCall64 (&lt;no parameter info&gt;)</span><br><span class="line">1: kd&gt; rdmsr c0000083</span><br><span class="line">msr[c0000083] = fffff800`2a491f40</span><br><span class="line">1: kd&gt; ln fffff800`2a491f40</span><br><span class="line">Browse module</span><br><span class="line">Set bu breakpoint</span><br><span class="line"></span><br><span class="line">(fffff800`2a491f40)   nt!KiSystemCall32   |  (fffff800`2a492080)   nt!KiSystemServiceHandler</span><br><span class="line">Exact matches:</span><br><span class="line">    nt!KiSystemCall32 (&lt;no parameter info&gt;)</span><br><span class="line">1: kd&gt; rdmsr c0000084</span><br><span class="line">msr[c0000084] = 00000000`00004700</span><br></pre></td></tr></table></figure></div><p>首先看一下 STAR 寄存器. 通过 <code>rdmsr c0000081</code> 得到 <code>0023001000000000</code>, 根据 STAR 的结构得知:</p><ul><li>sysret  CS        : 0023</li><li>sysret  SS        : 002B ; CS + 8</li><li>sysret  CS 64bit  : 0033 ; CS + 16</li><li>syscall CS        : 0010 </li><li>syscall SS        : 0018 ; CS + 8</li><li>syscall 32bit EIP : 00000000</li></ul><p>我们通过分别对 ntdll!NtCreateFile 和 nt!NtCreateFile 下断点来验证一下:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint <span class="number">1</span> hit</span><br><span class="line">ntdll!NtCreateFile:</span><br><span class="line"><span class="number">0033</span>:00007ff8<span class="string">`8d282670 48894c2408      mov     qword ptr [rsp+8],rcx</span></span><br><span class="line"><span class="string">1: kd&gt; r</span></span><br><span class="line"><span class="string">rax=0000000000000000 rbx=000000000eb94a60 rcx=000000001128eb80</span></span><br><span class="line"><span class="string">rdx=0000000000100001 rsi=00000000133ea660 rdi=00007ff875680088</span></span><br><span class="line"><span class="string">rip=00007ff88d282670 rsp=000000001128eb08 rbp=000000001128eba9</span></span><br><span class="line"><span class="string"> r8=000000001128eba8  r9=000000001128ebe0 r10=00000000133e6050</span></span><br><span class="line"><span class="string">r11=00000000133ea668 r12=0000000000000001 r13=00007ff875680088</span></span><br><span class="line"><span class="string">r14=0000000000000000 r15=000000000eb58e90</span></span><br><span class="line"><span class="string">iopl=0         nv up ei pl zr na po nc</span></span><br><span class="line"><span class="string">cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246</span></span><br><span class="line"><span class="string">ntdll!NtCreateFile:</span></span><br><span class="line"><span class="string">0033:00007ff8`</span>8d282670 48894c2408      <span class="keyword">mov</span>     <span class="built_in">qword</span> <span class="built_in">ptr</span> [<span class="built_in">rsp</span>+<span class="number">8</span>],<span class="built_in">rcx</span> <span class="built_in">ss</span>:002b:<span class="number">00000000</span><span class="string">`1128eb10=000000000eb94a60</span></span><br><span class="line"><span class="string">1: kd&gt; g</span></span><br><span class="line"><span class="string">Breakpoint 2 hit</span></span><br><span class="line"><span class="string">nt!NtCreateFile:</span></span><br><span class="line"><span class="string">fffff802`</span>2b5f8784 488bc4          <span class="keyword">mov</span>     <span class="built_in">rax</span>,<span class="built_in">rsp</span></span><br><span class="line"><span class="number">1</span>: kd&gt; r</span><br><span class="line"><span class="built_in">rax</span>=<span class="number">0000000000000000</span> <span class="built_in">rbx</span>=ffffe0000883e080 <span class="built_in">rcx</span>=000000001128eb80</span><br><span class="line"><span class="built_in">rdx</span>=<span class="number">0000000000100001</span> <span class="built_in">rsi</span>=000000001128eb28 <span class="built_in">rdi</span>=ffffd00026fb2aa8</span><br><span class="line"><span class="built_in">rip</span>=fffff8022b5f8784 <span class="built_in">rsp</span>=ffffd00026fb2a88 <span class="built_in">rbp</span>=ffffd00026fb2b80</span><br><span class="line"> <span class="built_in">r8</span>=000000001128eba8  <span class="built_in">r9</span>=000000001128ebe0 <span class="built_in">r10</span>=fffff8022b5f8784</span><br><span class="line"><span class="built_in">r11</span>=fffff8022af1a478 <span class="built_in">r12</span>=<span class="number">0000000000000001</span> <span class="built_in">r13</span>=00007ff875680088</span><br><span class="line"><span class="built_in">r14</span>=<span class="number">0000000000000000</span> <span class="built_in">r15</span>=000000000eb58e90</span><br><span class="line">iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl zr na po nc</span><br><span class="line"><span class="built_in">cs</span>=<span class="number">0010</span>  <span class="built_in">ss</span>=<span class="number">0018</span>  <span class="built_in">ds</span>=002b  <span class="built_in">es</span>=002b  <span class="built_in">fs</span>=<span class="number">0053</span>  <span class="built_in">gs</span>=002b             efl=<span class="number">00000246</span></span><br><span class="line">nt!NtCreateFile:</span><br><span class="line">fffff802<span class="string">`2b5f8784 488bc4          mov     rax,rsp</span></span><br></pre></td></tr></table></figure><p>可以看到<br>ntdll!NtCreateFile 的 CS, SS 寄存器的值分别对应 sysret 的 CS 64it, SS.<br>nt!NtCreateFile 的 CS, SS 寄存器的值分别对应 syscall 的 CS, SS.</p><p>接下来, 我们来看看 syscall 是如何从 Ring3 切换到 Ring0 的.<br>我们来看下 LSTAR 指向的函数, 即 nt!KiSystemCall64 :</p><p>不知道什么原因, 我只要对这个函数下断点就会导致 VMWare 虚拟机显示CPU异常而退出…<br>所以我们直接用 IDA 看代码</p><h4 id="KiSystemCall64"><a href="#KiSystemCall64" class="headerlink" title="KiSystemCall64"></a>KiSystemCall64</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>000000000028F200     KiSystemCall64  proc <span class="built_in">near</span>               <span class="comment">; DATA XREF: .pdata:000000000088430C</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F200                                             <span class="comment">; KiInitializeBootStructures+348</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F200</span><br><span class="line"><span class="symbol">.text:</span>000000000028F200     var_1C0         = <span class="built_in">qword</span> <span class="built_in">ptr</span> -<span class="number">1C0h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F200     var_1B8         = <span class="built_in">qword</span> <span class="built_in">ptr</span> -<span class="number">1B8h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F200     var_1B0         = <span class="built_in">qword</span> <span class="built_in">ptr</span> -<span class="number">1B0h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F200     var_1A8         = <span class="built_in">qword</span> <span class="built_in">ptr</span> -<span class="number">1A8h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F200     var_1A0         = <span class="built_in">qword</span> <span class="built_in">ptr</span> -<span class="number">1A0h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F200     var_178         = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">178h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F200     TF_Xmm1Offset   = <span class="built_in">byte</span> <span class="built_in">ptr</span> -<span class="number">110h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F200     arg_F8          = <span class="built_in">qword</span> <span class="built_in">ptr</span>  <span class="number">100h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F200</span><br><span class="line"><span class="symbol">.text:</span>000000000028F200 <span class="number">000</span>                 <span class="keyword">swapgs</span>                           <span class="comment">; GS.Base 与 MSR[C0000102] (KernelGSBase) 交换, 此时指向内核 GS</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F203 <span class="number">000</span>                 <span class="keyword">mov</span>     <span class="built_in">gs</span>:<span class="number">10h</span>, <span class="built_in">rsp</span>              <span class="comment">; 保存用户态栈到 _KPCR.UserRsp</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F20C <span class="number">000</span>                 <span class="keyword">mov</span>     <span class="built_in">rsp</span>, <span class="built_in">gs</span>:<span class="number">1A8h</span>             <span class="comment">; 从 _KPCR.Prcb.RspBase 加载内核态栈</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F215 <span class="number">000</span>                 <span class="keyword">push</span>    <span class="number">2Bh</span>                      <span class="comment">; 开始构建 TrapFrame, TrapFrame.SegSs = 0x2B</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F217 <span class="number">008</span>                 <span class="keyword">push</span>    <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">gs</span>:<span class="number">10h</span>         <span class="comment">; TrapFrame.Rsp = _KPCR.UserRsp (用户态栈)</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F21F <span class="number">010</span>                 <span class="keyword">push</span>    <span class="built_in">r11</span>                      <span class="comment">; TrapFrame.EFlags = r11 (用户态 rflags)</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F221 <span class="number">018</span>                 <span class="keyword">push</span>    <span class="number">33h</span>                      <span class="comment">; TrapFrame.SegCs = 0x33</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F223 <span class="number">020</span>                 <span class="keyword">push</span>    <span class="built_in">rcx</span>                      <span class="comment">; TrapFrame.Rip = rcx (这个是用户态 syscall 下一条指令的地址)</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F224 <span class="number">028</span>                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, <span class="built_in">r10</span>                 <span class="comment">; 把 FirstArgument 赋值给 rcx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F227 <span class="number">028</span>                 <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="number">8</span>                   <span class="comment">; 调整栈, 跳过 TrapFrame.ErrorCode</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F22B <span class="number">030</span>                 <span class="keyword">push</span>    <span class="built_in">rbp</span>                      <span class="comment">; TrapFrame.Rbp = rbp</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F22C <span class="number">038</span>                 <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="number">158h</span>                <span class="comment">; 调整 TrapFrame 起始地址, 0x158 + 0x38 = 0x190 即这个结构体从尾部开始填充数据, 然后其他未处理的部分直接调整栈来分配足够的空间.</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F233 <span class="number">190</span>                 <span class="keyword">lea</span>     <span class="built_in">rbp</span>, [<span class="built_in">rsp</span>+<span class="number">190h</span>+TF_Xmm1Offset] <span class="comment">; 不理解为啥要从这个 TrapFrame.Xmm1 字段开始</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F23B <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+<span class="number">0C0h</span>], <span class="built_in">rbx</span>          <span class="comment">; TrapFrame.Rbx = rbx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F242 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+<span class="number">0C8h</span>], <span class="built_in">rdi</span>          <span class="comment">; TrapFrame.Rdi = rdi</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F249 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+<span class="number">0D0h</span>], <span class="built_in">rsi</span>          <span class="comment">; TrapFrame.Rsi = rsi</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F250 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>-<span class="number">55h</span>], <span class="number">2</span>    <span class="comment">; TrapFrame.ExceptionActive = 2</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F254 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rbx</span>, <span class="built_in">gs</span>:<span class="number">188h</span>             <span class="comment">; rbx = _KPCR.Prcb.CurrentThread (_KTHREAD)</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F25D <span class="number">190</span>                 <span class="keyword">prefetchw</span> <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbx</span>+<span class="number">90h</span>]     <span class="comment">; 提示 CPU 预加载 _KPCR.Prcb.CurrentThread.TrapFrame</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F264 <span class="number">190</span>                 <span class="keyword">stmxcsr</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>-<span class="number">54h</span>]      <span class="comment">; TrapFrame.MxCsr = mxcsr</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F268 <span class="number">190</span>                 <span class="keyword">ldmxcsr</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">gs</span>:<span class="number">180h</span>        <span class="comment">; mxcsr = _KPCR.Prcb.MxCsr</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F271 <span class="number">190</span>                 <span class="keyword">cmp</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbx</span>+<span class="number">3</span>], <span class="number">0</span>      <span class="comment">; _KPCR.Prcb.CurrentThread.DispatchHeader.DebugActive</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F275 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">80h</span>], <span class="number">0</span>    <span class="comment">; TrapFrame.ErrorCode = 0</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F27E <span class="number">190</span>                 <span class="keyword">jz</span>      NoDebugActive            <span class="comment">; 一般从这里跳, 未调试</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F284 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">50h</span>], <span class="built_in">rax</span>           <span class="comment">; TrapFrame.Rax = rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F288 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">48h</span>], <span class="built_in">rcx</span>           <span class="comment">; TrapFrame.Rcx = rcx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F28C <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">40h</span>], <span class="built_in">rdx</span>           <span class="comment">; TrapFrame.Rdx = rdx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F290 <span class="number">190</span>                 <span class="keyword">test</span>    <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbx</span>+<span class="number">3</span>], <span class="number">3</span>      <span class="comment">; _KPCR.Prcb.CurrentThread.DispatchHeader.DebugActive(0x3).(ActiveDR7 &amp; Instrumented)</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F294 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">38h</span>], <span class="built_in">r8</span>            <span class="comment">; TrapFrame.R8 = r8</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F298 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">30h</span>], <span class="built_in">r9</span>            <span class="comment">; TrapFrame.R9 = r9</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F29C <span class="number">190</span>                 <span class="keyword">jz</span>      short NoSaveDebugRegisterState</span><br><span class="line"><span class="symbol">.text:</span>000000000028F29E <span class="number">190</span>                 <span class="keyword">call</span>    KiSaveDebugRegisterState</span><br><span class="line"><span class="symbol">.text:</span>000000000028F2A3</span><br><span class="line"><span class="symbol">.text:</span>000000000028F2A3     NoSaveDebugRegisterState:               <span class="comment">; CODE XREF: KiSystemCall64+9C</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2A3 <span class="number">190</span>                 <span class="keyword">test</span>    <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbx</span>+<span class="number">3</span>], <span class="number">4</span>      <span class="comment">; _KPCR.Prcb.CurrentThread.DispatchHeader.DebugActive(0x4).Minimal</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2A7 <span class="number">190</span>                 <span class="keyword">jz</span>      short NoDebugActiveMinimal</span><br><span class="line"><span class="symbol">.text:</span>000000000028F2A9 <span class="number">190</span>                 <span class="keyword">sti</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2AA <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, [<span class="built_in">rbp</span>-<span class="number">50h</span>]  <span class="comment">; _QWORD</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2AD <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rdx</span>, <span class="built_in">rsp</span>        <span class="comment">; _QWORD</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2B0 <span class="number">190</span>                 <span class="keyword">call</span>    <span class="built_in">cs</span>:__imp_PicoSystemCallDispatch</span><br><span class="line"><span class="symbol">.text:</span>000000000028F2B6 <span class="number">190</span>                 <span class="keyword">jmp</span>     KiSystemServiceExit</span><br><span class="line"><span class="symbol">.text:</span>000000000028F2BB     <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2BB</span><br><span class="line"><span class="symbol">.text:</span>000000000028F2BB     NoDebugActiveMinimal:                   <span class="comment">; CODE XREF: KiSystemCall64+A7</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2BB <span class="number">190</span>                 <span class="keyword">test</span>    <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbx</span>+<span class="number">3</span>], <span class="number">80h</span>    <span class="comment">; _KPCR.Prcb.CurrentThread.DispatchHeader.DebugActive(0x80).UmsPrimary</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2BF <span class="number">190</span>                 <span class="keyword">jz</span>      short NoDebugActiveUmsPrimary</span><br><span class="line"><span class="symbol">.text:</span>000000000028F2C1 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">0C0000102h</span>          <span class="comment">; KernelGSBase</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2C6 <span class="number">190</span>                 <span class="keyword">rdmsr</span>                            <span class="comment">; 由于开头调用了 swapgs, 所以返回的是 用户态 GS</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2C8 <span class="number">190</span>                 <span class="keyword">shl</span>     <span class="built_in">rdx</span>, <span class="number">20h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2CC <span class="number">190</span>                 <span class="keyword">or</span>      <span class="built_in">rax</span>, <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2CF <span class="number">190</span>                 <span class="keyword">cmp</span>     [<span class="built_in">rbx</span>+<span class="number">0F0h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2D6 <span class="number">190</span>                 <span class="keyword">jz</span>      short NoDebugActiveUmsPrimary</span><br><span class="line"><span class="symbol">.text:</span>000000000028F2D8 <span class="number">190</span>                 <span class="keyword">cmp</span>     [<span class="built_in">rbx</span>+<span class="number">200h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2DF <span class="number">190</span>                 <span class="keyword">jz</span>      short NoDebugActiveUmsPrimary</span><br><span class="line"><span class="symbol">.text:</span>000000000028F2E1 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rdx</span>, [<span class="built_in">rbx</span>+<span class="number">1F0h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F2E8 <span class="number">190</span>                 <span class="keyword">bts</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbx</span>+<span class="number">74h</span>], <span class="number">9</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2ED <span class="number">190</span>                 <span class="keyword">dec</span>     <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">rbx</span>+<span class="number">1E6h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F2F4 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdx</span>+<span class="number">80h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2FB <span class="number">190</span>                 <span class="keyword">sti</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F2FC <span class="number">190</span>                 <span class="keyword">call</span>    KiUmsCallEntry</span><br><span class="line"><span class="symbol">.text:</span>000000000028F301 <span class="number">190</span>                 <span class="keyword">jmp</span>     short loc_28F30E</span><br><span class="line"><span class="symbol">.text:</span>000000000028F303     <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F303</span><br><span class="line"><span class="symbol">.text:</span>000000000028F303     NoDebugActiveUmsPrimary:                <span class="comment">; CODE XREF: KiSystemCall64+BF</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F303                                             <span class="comment">; KiSystemCall64+D6 ...</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F303 <span class="number">190</span>                 <span class="keyword">test</span>    <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbx</span>+<span class="number">3</span>], <span class="number">40h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F307 <span class="number">190</span>                 <span class="keyword">jz</span>      short loc_28F30E</span><br><span class="line"><span class="symbol">.text:</span>000000000028F309 <span class="number">190</span>                 <span class="keyword">bts</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbx</span>+<span class="number">74h</span>], <span class="number">11h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F30E</span><br><span class="line"><span class="symbol">.text:</span>000000000028F30E     loc_28F30E:                             <span class="comment">; CODE XREF: KiSystemCall64+101</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F30E                                             <span class="comment">; KiSystemCall64+107</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F30E <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rbp</span>-<span class="number">50h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F312 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, [<span class="built_in">rbp</span>-<span class="number">48h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F316 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rdx</span>, [<span class="built_in">rbp</span>-<span class="number">40h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F31A <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r8</span>, [<span class="built_in">rbp</span>-<span class="number">38h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F31E <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r9</span>, [<span class="built_in">rbp</span>-<span class="number">30h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F322                     <span class="built_in">db</span>      <span class="number">66h</span>, <span class="number">66h</span>, <span class="number">66h</span>, <span class="number">66h</span>, <span class="number">66h</span>, <span class="number">66h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F322 <span class="number">190</span>                 <span class="keyword">nop</span>     <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">rax</span>+<span class="built_in">rax</span>+<span class="number">00000000h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F330</span><br><span class="line"><span class="symbol">.text:</span>000000000028F330     NoDebugActive:                          <span class="comment">; CODE XREF: KiSystemCall64+7E</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F330 <span class="number">190</span>                 <span class="keyword">sti</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F331 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbx</span>+<span class="number">88h</span>], <span class="built_in">rcx</span>           <span class="comment">; _KPCR.Prcb.CurrentThread.FirstArgument</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F338 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbx</span>+<span class="number">80h</span>], <span class="built_in">eax</span>           <span class="comment">; _KPCR.Prcb.CurrentThread.SystemCallNumber</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F33E <span class="number">190</span>                 <span class="keyword">cmp</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbx</span>+<span class="number">232h</span>], <span class="number">1</span>   <span class="comment">; 检查 PreviousMode 应该为 UserMode</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F345 <span class="number">190</span>                 <span class="keyword">jz</span>      short KiSystemServiceStart</span><br><span class="line"><span class="symbol">.text:</span>000000000028F347 <span class="number">190</span>                 <span class="keyword">int</span>     <span class="number">3</span>               <span class="comment">; Trap to Debugger</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F348</span><br><span class="line"><span class="symbol">.text:</span>000000000028F348     KiSystemServiceStart:                   <span class="comment">; CODE XREF: KiSystemCall64+145</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F348                                             <span class="comment">; DATA XREF: KiServiceInternal+5A ...</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F348 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbx</span>+<span class="number">90h</span>], <span class="built_in">rsp</span>           <span class="comment">; _KPCR.Prcb.CurrentThread.TrapFrame = TrapFrame</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F34F <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">eax</span>                 <span class="comment">; _KPCR.Prcb.CurrentThread.SystemCallNumber</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F351 <span class="number">190</span>                 <span class="keyword">shr</span>     <span class="built_in">edi</span>, <span class="number">7</span>                   <span class="comment">; 这三行是用来在后面检查是否为 GUI API 调用的, 如果是 GUI API, 则计算出 Shadow SSDT 的偏移号.</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F354 <span class="number">190</span>                 <span class="keyword">and</span>     <span class="built_in">edi</span>, <span class="number">20h</span>                 <span class="comment">; GUI API 调用号都是从 0x1000 开始的. 0x1000 &gt;&gt; 7 刚好是 0x20</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F357 <span class="number">190</span>                 <span class="keyword">and</span>     <span class="built_in">eax</span>, <span class="number">0FFFh</span>               <span class="comment">; 修正调用号 (消除 GUI 调用号的 0x1000 基本号)</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F35C</span><br><span class="line"><span class="symbol">.text:</span>000000000028F35C     KiSystemServiceRepeat:                  <span class="comment">; CODE XREF: KiSystemCall64+4B1</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F35C                                                      <span class="comment">; 这一段就是根据调用号计算出系统服务例程地址的算法部分了</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F35C <span class="number">190</span>                 <span class="keyword">lea</span>     <span class="built_in">r10</span>, KeServiceDescriptorTable</span><br><span class="line"><span class="symbol">.text:</span>000000000028F363 <span class="number">190</span>                 <span class="keyword">lea</span>     <span class="built_in">r11</span>, KeServiceDescriptorTableShadow</span><br><span class="line"><span class="symbol">.text:</span>000000000028F36A <span class="number">190</span>                 <span class="keyword">test</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbx</span>+<span class="number">78h</span>], <span class="number">40h</span> <span class="comment">; test _KPCR.Prcb.CurrentThread.ThreadFlags.GuiThread, 1</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F371 <span class="number">190</span>                 <span class="keyword">cmovnz</span>  <span class="built_in">r10</span>, <span class="built_in">r11</span>                 <span class="comment">; if GuiThread Then r10 = KeServiceDescriptorTableShadow;</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F375 <span class="number">190</span>                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, [<span class="built_in">rdi</span>+<span class="built_in">r10</span>+<span class="number">10h</span>]       <span class="comment">; SystemCallNumber &gt; _KSERVICE_TABLE_DESCRIPTOR.NumberOfServices ?</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F375 <span class="number">190</span>                                                  <span class="comment">; 这里加 rdi 表示,如果是 GDI 调用,则直接索引到 Shadow SSDT 的字段</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F37A <span class="number">190</span>                 <span class="keyword">jnb</span>     loc_28F678</span><br><span class="line"><span class="symbol">.text:</span>000000000028F380 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r10</span>, [<span class="built_in">rdi</span>+<span class="built_in">r10</span>]           <span class="comment">; r10 = _KSERVICE_TABLE_DESCRIPTOR.ServiceTableBase</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F384 <span class="number">190</span>                 <span class="keyword">movsxd</span>  <span class="built_in">r11</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">r10</span>+<span class="built_in">rax</span>*<span class="number">4</span>] <span class="comment">; r11 = [ServiceTableBase + SystemCallNumber * 4]</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F388 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, <span class="built_in">r11</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F38B <span class="number">190</span>                 <span class="keyword">sar</span>     <span class="built_in">r11</span>, <span class="number">4</span>                   <span class="comment">; r11 &gt;&gt; 4</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F38F <span class="number">190</span>                 <span class="keyword">add</span>     <span class="built_in">r10</span>, <span class="built_in">r11</span>                 <span class="comment">; 系统服务例程地址 r10 = ServiceTableBase + r11</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F392 <span class="number">190</span>                 <span class="keyword">cmp</span>     <span class="built_in">edi</span>, <span class="number">20h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F395 <span class="number">190</span>                 <span class="keyword">jnz</span>     short NonGDITebAccess    <span class="comment">; 检查是否为 GUI API</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F397 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r11</span>, [<span class="built_in">rbx</span>+<span class="number">0F0h</span>]          <span class="comment">; r11 = _KPCR.Prcb.CurrentThread.Teb</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F39E</span><br><span class="line"><span class="symbol">.text:</span>000000000028F39E     KiSystemServiceGdiTebAccess:            <span class="comment">; DATA XREF: KiSystemServiceHandler+D</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F39E <span class="number">190</span>                 <span class="keyword">cmp</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">r11</span>+<span class="number">1740h</span>], <span class="number">0</span> <span class="comment">; Teb.GdiBatchCount</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3A6 <span class="number">190</span>                 <span class="keyword">jz</span>      short NonGDITebAccess</span><br><span class="line"><span class="symbol">.text:</span>000000000028F3A8 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">50h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3AC <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">48h</span>], <span class="built_in">rcx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3B0 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">40h</span>], <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3B4 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rbx</span>, <span class="built_in">r8</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3B7 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rdi</span>, <span class="built_in">r9</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3BA <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rsi</span>, <span class="built_in">r10</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3BD <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, <span class="number">7</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3C4 <span class="number">190</span>                 <span class="keyword">xor</span>     <span class="built_in">edx</span>, <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3C6 <span class="number">190</span>                 <span class="keyword">xor</span>     <span class="built_in">r8</span>, <span class="built_in">r8</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3C9 <span class="number">190</span>                 <span class="keyword">xor</span>     <span class="built_in">r9</span>, <span class="built_in">r9</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3CC <span class="number">190</span>                 <span class="keyword">call</span>    PsInvokeWin32Callout</span><br><span class="line"><span class="symbol">.text:</span>000000000028F3D1 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rbp</span>-<span class="number">50h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F3D5 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, [<span class="built_in">rbp</span>-<span class="number">48h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F3D9 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rdx</span>, [<span class="built_in">rbp</span>-<span class="number">40h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F3DD <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r8</span>, <span class="built_in">rbx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3E0 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r9</span>, <span class="built_in">rdi</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3E3 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r10</span>, <span class="built_in">rsi</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3E6                     <span class="built_in">db</span>      <span class="number">66h</span>, <span class="number">66h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3E6 <span class="number">190</span>                 <span class="keyword">nop</span>     <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">rax</span>+<span class="built_in">rax</span>+<span class="number">00000000h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F3F0</span><br><span class="line"><span class="symbol">.text:</span>000000000028F3F0     NonGDITebAccess:                        <span class="comment">; CODE XREF: KiSystemCall64+195</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3F0                                             <span class="comment">; KiSystemCall64+1A6</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3F0 <span class="number">190</span>                 <span class="keyword">and</span>     <span class="built_in">eax</span>, <span class="number">0Fh</span>                 <span class="comment">; 检查需要通过栈传递的参数有几个, ArgumentCount - 4 (RCX, RDX, R8, R9)</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3F3 <span class="number">190</span>                 <span class="keyword">jz</span>      KiSystemServiceCopyEnd</span><br><span class="line"><span class="symbol">.text:</span>000000000028F3F9 <span class="number">190</span>                 <span class="keyword">shl</span>     <span class="built_in">eax</span>, <span class="number">3</span>                   <span class="comment">; 计算栈参数总字节数 Count * 8</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F3FC <span class="number">190</span>                 <span class="keyword">lea</span>     <span class="built_in">rsp</span>, [<span class="built_in">rsp</span>-<span class="number">70h</span>]           <span class="comment">; </span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F401 <span class="number">190</span>                 <span class="keyword">lea</span>     <span class="built_in">rdi</span>, [<span class="built_in">rsp</span>+<span class="number">190h</span>+var_178]  <span class="comment">; </span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F406 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rsi</span>, [<span class="built_in">rbp</span>+<span class="number">100h</span>]          <span class="comment">; rsi = Ring3 Rsp</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F40D <span class="number">190</span>                 <span class="keyword">lea</span>     <span class="built_in">rsi</span>, [<span class="built_in">rsi</span>+<span class="number">20h</span>]           <span class="comment">; </span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F411 <span class="number">190</span>                 <span class="keyword">test</span>    <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">0F0h</span>], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F418 <span class="number">190</span>                 <span class="keyword">jz</span>      short loc_28F430</span><br><span class="line"><span class="symbol">.text:</span>000000000028F41A <span class="number">190</span>                 <span class="keyword">cmp</span>     <span class="built_in">rsi</span>, <span class="built_in">cs</span>:MmUserProbeAddress</span><br><span class="line"><span class="symbol">.text:</span>000000000028F421 <span class="number">190</span>                 <span class="keyword">cmovnb</span>  <span class="built_in">rsi</span>, <span class="built_in">cs</span>:MmUserProbeAddress</span><br><span class="line"><span class="symbol">.text:</span>000000000028F429 <span class="number">190</span>                 <span class="keyword">nop</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rax</span>+<span class="number">00000000h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F430</span><br><span class="line"><span class="symbol">.text:</span>000000000028F430     loc_28F430:                             <span class="comment">; CODE XREF: KiSystemCall64+218</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F430 <span class="number">190</span>                 <span class="keyword">lea</span>     <span class="built_in">r11</span>, KiSystemServiceCopyEnd</span><br><span class="line"><span class="symbol">.text:</span>000000000028F437 <span class="number">190</span>                 <span class="keyword">sub</span>     <span class="built_in">r11</span>, <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F43A <span class="number">190</span>                 <span class="keyword">jmp</span>     <span class="built_in">r11</span>                      <span class="comment">; r11指向的 KiSystemServiceCopyStart 会拷贝系统调用的参数到内核栈</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F43D     <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F43D <span class="number">190</span>                 <span class="keyword">nop</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rax</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F440</span><br><span class="line"><span class="symbol">.text:</span>000000000028F440     KiSystemServiceCopyStart:               <span class="comment">; DATA XREF: KiSystemServiceHandler+1A</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F440 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">70h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F444 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">70h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F448 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">68h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F44C <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">68h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F450 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">60h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F454 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">60h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F458 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">58h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F45C <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">58h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F460 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">50h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F464 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">50h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F468 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">48h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F46C <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">48h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F470 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">40h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F474 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">40h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F478 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">38h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F47C <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">38h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F480 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">30h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F484 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">30h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F488 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">28h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F48C <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">28h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F490 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">20h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F494 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">20h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F498 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">18h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F49C <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">18h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4A0 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">10h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F4A4 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">10h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4A8 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rsi</span>+<span class="number">8</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F4AC <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdi</span>+<span class="number">8</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4B0</span><br><span class="line"><span class="symbol">.text:</span>000000000028F4B0     KiSystemServiceCopyEnd:                 <span class="comment">; CODE XREF: KiSystemCall64+1F3</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4B0                                             <span class="comment">; DATA XREF: KiSystemServiceHandler+27 ...</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4B0 <span class="number">190</span>                 <span class="keyword">test</span>    <span class="built_in">cs</span>:[PerfGlobalGroupMask + <span class="number">8</span>], <span class="number">40h</span>    <span class="comment">; Check PERF_SYSCALL ???</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4BA <span class="number">190</span>                 <span class="keyword">jnz</span>     loc_28F716</span><br><span class="line"><span class="symbol">.text:</span>000000000028F4C0 <span class="number">190</span>                 <span class="keyword">call</span>    <span class="built_in">r10</span>                      <span class="comment">; 调用计算出来的系统服务例程</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4C3</span><br><span class="line"><span class="symbol">.text:</span>000000000028F4C3     loc_28F4C3:                             <span class="comment">; CODE XREF: KiSystemCall64+56B</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4C3 <span class="number">190</span>                 <span class="keyword">inc</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">gs</span>:<span class="number">2E38h</span>       <span class="comment">; ++_KPCR.Pcrb.KeSystemCalls</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4CB</span><br><span class="line"><span class="symbol">.text:</span>000000000028F4CB     KiSystemServiceExit:                    <span class="comment">; CODE XREF: KiSystemCall64+B6</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4CB                                             <span class="comment">; KiSystemCall64+4D2 ...</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4CB                                                      <span class="comment">; 开始恢复寄存器</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4CB <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rbx</span>, [<span class="built_in">rbp</span>+<span class="number">0C0h</span>]          <span class="comment">; rbx = TrapFrame.Rbx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4D2 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rdi</span>, [<span class="built_in">rbp</span>+<span class="number">0C8h</span>]          <span class="comment">; rdi = TrapFrame.Rdi</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4D9 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rsi</span>, [<span class="built_in">rbp</span>+<span class="number">0D0h</span>]          <span class="comment">; rsi = TrapFrame.Rsi</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4E0 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r11</span>, <span class="built_in">gs</span>:<span class="number">188h</span>             <span class="comment">; r11 = _KPCR.Prcb.CurrentThread (_KTHREAD)</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4E9 <span class="number">190</span>                 <span class="keyword">test</span>    <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">0F0h</span>], <span class="number">1</span>   <span class="comment">; TrapFrame.SegCs.CPL == Ring0 ?</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4F0 <span class="number">190</span>                 <span class="keyword">jz</span>      ServiceExitRing0         <span class="comment">; CPL 为 Ring0 则跳转</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4F6 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, <span class="built_in">cr8</span>                 <span class="comment">; Task Priority Register</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F4FA <span class="number">190</span>                 <span class="keyword">or</span>      <span class="built_in">cl</span>, [<span class="built_in">r11</span>+<span class="number">242h</span>]           <span class="comment">; CurrentThread.ApcStateIndex</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F501 <span class="number">190</span>                 <span class="keyword">or</span>      <span class="built_in">ecx</span>, [<span class="built_in">r11</span>+<span class="number">1E4h</span>]          <span class="comment">; CurrentThread.KernelApcDisable</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F508 <span class="number">190</span>                 <span class="keyword">jnz</span>     loc_28F6E2</span><br><span class="line"><span class="symbol">.text:</span>000000000028F50E <span class="number">190</span>                 <span class="keyword">cli</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F50F <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, <span class="built_in">gs</span>:<span class="number">188h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F518 <span class="number">190</span>                 <span class="keyword">cmp</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rcx</span>+<span class="number">0C2h</span>], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F51F <span class="number">190</span>                 <span class="keyword">jz</span>      short loc_28F578</span><br><span class="line"><span class="symbol">.text:</span>000000000028F521 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">50h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F525 <span class="number">190</span>                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F527 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">48h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F52B <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">40h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F52F <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">38h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F533 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">30h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F537 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">28h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F53B <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">20h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F53F <span class="number">190</span>                 <span class="keyword">pxor</span>    <span class="built_in">xmm0</span>, <span class="built_in">xmm0</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F543 <span class="number">190</span>                 <span class="keyword">movaps</span>  xmmword <span class="built_in">ptr</span> [<span class="built_in">rbp</span>-<span class="number">10h</span>], <span class="built_in">xmm0</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F547 <span class="number">190</span>                 <span class="keyword">movaps</span>  xmmword <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">0</span>], <span class="built_in">xmm0</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F54B <span class="number">190</span>                 <span class="keyword">movaps</span>  xmmword <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">10h</span>], <span class="built_in">xmm0</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F54F <span class="number">190</span>                 <span class="keyword">movaps</span>  xmmword <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">20h</span>], <span class="built_in">xmm0</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F553 <span class="number">190</span>                 <span class="keyword">movaps</span>  xmmword <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">30h</span>], <span class="built_in">xmm0</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F557 <span class="number">190</span>                 <span class="keyword">movaps</span>  xmmword <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">40h</span>], <span class="built_in">xmm0</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F55B <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F560 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">cr8</span>, <span class="built_in">rcx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F564 <span class="number">190</span>                 <span class="keyword">sti</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F565 <span class="number">190</span>                 <span class="keyword">call</span>    KiInitiateUserApc</span><br><span class="line"><span class="symbol">.text:</span>000000000028F56A <span class="number">190</span>                 <span class="keyword">cli</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F56B <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F570 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">cr8</span>, <span class="built_in">rcx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F574 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rbp</span>-<span class="number">50h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F578</span><br><span class="line"><span class="symbol">.text:</span>000000000028F578     loc_28F578:                             <span class="comment">; CODE XREF: KiSystemCall64+31F</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F578 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, <span class="built_in">gs</span>:<span class="number">188h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F581 <span class="number">190</span>                 <span class="keyword">test</span>    <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rcx</span>], <span class="number">40010000h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F587 <span class="number">190</span>                 <span class="keyword">jz</span>      short loc_28F5B7</span><br><span class="line"><span class="symbol">.text:</span>000000000028F589 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">50h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F58D <span class="number">190</span>                 <span class="keyword">test</span>    <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rcx</span>+<span class="number">2</span>], <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F591 <span class="number">190</span>                 <span class="keyword">jz</span>      short loc_28F5A1</span><br><span class="line"><span class="symbol">.text:</span>000000000028F593 <span class="number">190</span>                 <span class="keyword">call</span>    KiCopyCounters</span><br><span class="line"><span class="symbol">.text:</span>000000000028F598 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, <span class="built_in">gs</span>:<span class="number">188h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F5A1</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5A1     loc_28F5A1:                             <span class="comment">; CODE XREF: KiSystemCall64+391</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F5A1 <span class="number">190</span>                 <span class="keyword">test</span>    <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rcx</span>+<span class="number">3</span>], <span class="number">40h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F5A5 <span class="number">190</span>                 <span class="keyword">jz</span>      short loc_28F5B3</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5A7 <span class="number">190</span>                 <span class="keyword">lea</span>     <span class="built_in">rsp</span>, [<span class="built_in">rbp</span>-<span class="number">80h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5AB <span class="number">190</span>                 <span class="keyword">xor</span>     <span class="built_in">rcx</span>, <span class="built_in">rcx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F5AE <span class="number">190</span>                 <span class="keyword">call</span>    KiUmsExit</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5B3</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5B3     loc_28F5B3:                             <span class="comment">; CODE XREF: KiSystemCall64+3A5</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F5B3 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rbp</span>-<span class="number">50h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5B7</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5B7     loc_28F5B7:                             <span class="comment">; CODE XREF: KiSystemCall64+387</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F5B7 <span class="number">190</span>                 <span class="keyword">ldmxcsr</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>-<span class="number">54h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5BB <span class="number">190</span>                 <span class="keyword">xor</span>     <span class="built_in">r10</span>, <span class="built_in">r10</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F5BE <span class="number">190</span>                 <span class="keyword">cmp</span>     <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">80h</span>], <span class="number">0</span>    <span class="comment">; TrapFrame.ErrorCode == 0 ?</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F5C6 <span class="number">190</span>                 <span class="keyword">jz</span>      short ServiceExitRing3</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5C8 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">50h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F5CC <span class="number">190</span>                 <span class="keyword">call</span>    KiRestoreDebugRegisterState</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5D1 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, <span class="built_in">gs</span>:<span class="number">188h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F5DA <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rax</span>+<span class="number">0B8h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5E1 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rax</span>+<span class="number">2C0h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5E8 <span class="number">190</span>                 <span class="keyword">or</span>      <span class="built_in">rax</span>, <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F5EB <span class="number">190</span>                 <span class="keyword">jz</span>      short loc_28F605</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5ED <span class="number">190</span>                 <span class="keyword">cmp</span>     <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">0F0h</span>], <span class="number">33h</span> <span class="comment">; TrapFrame.SegCs == User CS ?</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F5F5 <span class="number">190</span>                 <span class="keyword">jnz</span>     short loc_28F605</span><br><span class="line"><span class="symbol">.text:</span>000000000028F5F7 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r10</span>, [<span class="built_in">rbp</span>+<span class="number">0E8h</span>]          <span class="comment">; CurrentThread.Queue</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F5FE <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+<span class="number">0E8h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F605</span><br><span class="line"><span class="symbol">.text:</span>000000000028F605     loc_28F605:                             <span class="comment">; CODE XREF: KiSystemCall64+3EB</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F605                                             <span class="comment">; KiSystemCall64+3F5</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F605 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rbp</span>-<span class="number">50h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F609</span><br><span class="line"><span class="symbol">.text:</span>000000000028F609     ServiceExitRing3:                       <span class="comment">; CODE XREF: KiSystemCall64+3C6</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F609 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r8</span>, [<span class="built_in">rbp</span>+<span class="number">100h</span>]           <span class="comment">; r8 = TrapFram.Rsp</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F610 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r9</span>, [<span class="built_in">rbp</span>+<span class="number">0D8h</span>]           <span class="comment">; r9 = TrapFram.Rbp</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F617 <span class="number">190</span>                 <span class="keyword">xor</span>     <span class="built_in">edx</span>, <span class="built_in">edx</span>                 <span class="comment">; 0</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F619 <span class="number">190</span>                 <span class="keyword">pxor</span>    <span class="built_in">xmm0</span>, <span class="built_in">xmm0</span>               <span class="comment">; 下面 pxor 的全是重置为 0</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F61D <span class="number">190</span>                 <span class="keyword">pxor</span>    <span class="built_in">xmm1</span>, <span class="built_in">xmm1</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F621 <span class="number">190</span>                 <span class="keyword">pxor</span>    <span class="built_in">xmm2</span>, <span class="built_in">xmm2</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F625 <span class="number">190</span>                 <span class="keyword">pxor</span>    <span class="built_in">xmm3</span>, <span class="built_in">xmm3</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F629 <span class="number">190</span>                 <span class="keyword">pxor</span>    <span class="built_in">xmm4</span>, <span class="built_in">xmm4</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F62D <span class="number">190</span>                 <span class="keyword">pxor</span>    <span class="built_in">xmm5</span>, <span class="built_in">xmm5</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F631 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, [<span class="built_in">rbp</span>+<span class="number">0E8h</span>]          <span class="comment">; rcx = TrapFrame.Rip</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F638 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r11</span>, [<span class="built_in">rbp</span>+<span class="number">0F8h</span>]          <span class="comment">; r11 = TrapFrame.EFlags</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F63F <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rbp</span>, <span class="built_in">r9</span>                  <span class="comment">; 恢复 Ring3 栈 </span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F642 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rsp</span>, <span class="built_in">r8</span>                  <span class="comment">;</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F645 <span class="number">000</span>                 <span class="keyword">swapgs</span>                           <span class="comment">; 从 MSR[KernelGSBase] 交换回 User GS</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F648 <span class="number">000</span>                 <span class="keyword">sysret</span>                           <span class="comment">; 返回 Ring3</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F64B</span><br><span class="line"><span class="symbol">.text:</span>000000000028F64B     ServiceExitRing0:                             <span class="comment">; CODE XREF: KiSystemCall64+2F0</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F64B <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rdx</span>, [<span class="built_in">rbp</span>+<span class="number">0B8h</span>]          <span class="comment">; rdx = TrapFrame.TrapFrame</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F652 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">r11</span>+<span class="number">90h</span>], <span class="built_in">rdx</span>           <span class="comment">; CurrentThread.TrapFrame = rdx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F659 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">dl</span>, [<span class="built_in">rbp</span>-<span class="number">58h</span>]            <span class="comment">; dl = TrapFrame.PreviousMode</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F65C <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">r11</span>+<span class="number">232h</span>], <span class="built_in">dl</span>           <span class="comment">; CurrentThread.PreviousMode = dl</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F663 <span class="number">190</span>                 <span class="keyword">cli</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F664 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rsp</span>, <span class="built_in">rbp</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F667 <span class="number">000</span>                 <span class="keyword">mov</span>     <span class="built_in">rbp</span>, [<span class="built_in">rbp</span>+<span class="number">0D8h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F66E <span class="number">000</span>                 <span class="keyword">mov</span>     <span class="built_in">rsp</span>, [<span class="built_in">rsp</span>+arg_F8]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F676 <span class="number">000</span>                 <span class="keyword">sti</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F677 <span class="number">000</span>                 <span class="keyword">retn</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F678     <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F678</span><br><span class="line"><span class="symbol">.text:</span>000000000028F678     loc_28F678:                             <span class="comment">; CODE XREF: KiSystemCall64+17A</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F678 <span class="number">190</span>                 <span class="keyword">cmp</span>     <span class="built_in">edi</span>, <span class="number">20h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F67B <span class="number">190</span>                 <span class="keyword">jnz</span>     short loc_28F6D8</span><br><span class="line"><span class="symbol">.text:</span>000000000028F67D <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">80h</span>], <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F680 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">78h</span>], <span class="built_in">rcx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F684 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">70h</span>], <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F688 <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">68h</span>], <span class="built_in">r8</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F68C <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">60h</span>], <span class="built_in">r9</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F690 <span class="number">190</span>                 <span class="keyword">call</span>    KiConvertToGuiThread</span><br><span class="line"><span class="symbol">.text:</span>000000000028F695 <span class="number">190</span>                 <span class="keyword">or</span>      <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F697 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">rbp</span>-<span class="number">80h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F69A <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, [<span class="built_in">rbp</span>-<span class="number">78h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F69E <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rdx</span>, [<span class="built_in">rbp</span>-<span class="number">70h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6A2 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r8</span>, [<span class="built_in">rbp</span>-<span class="number">68h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6A6 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r9</span>, [<span class="built_in">rbp</span>-<span class="number">60h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6AA <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbx</span>+<span class="number">90h</span>], <span class="built_in">rsp</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F6B1 <span class="number">190</span>                 <span class="keyword">jz</span>      KiSystemServiceRepeat</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6B7 <span class="number">190</span>                 <span class="keyword">lea</span>     <span class="built_in">rdi</span>, qword_8AABA0</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6BE <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">esi</span>, [<span class="built_in">rdi</span>+<span class="number">10h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6C1 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rdi</span>, [<span class="built_in">rdi</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6C4 <span class="number">190</span>                 <span class="keyword">cmp</span>     <span class="built_in">eax</span>, <span class="built_in">esi</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F6C6 <span class="number">190</span>                 <span class="keyword">jnb</span>     short loc_28F6D8</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6C8 <span class="number">190</span>                 <span class="keyword">lea</span>     <span class="built_in">rdi</span>, [<span class="built_in">rdi</span>+<span class="built_in">rsi</span>*<span class="number">4</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6CC <span class="number">190</span>                 <span class="keyword">movsx</span>   <span class="built_in">eax</span>, <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rax</span>+<span class="built_in">rdi</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6D0 <span class="number">190</span>                 <span class="keyword">or</span>      <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F6D2 <span class="number">190</span>                 <span class="keyword">jle</span>     KiSystemServiceExit</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6D8</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6D8     loc_28F6D8:                             <span class="comment">; CODE XREF: KiSystemCall64+47B</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F6D8                                             <span class="comment">; KiSystemCall64+4C6</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F6D8 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">0C000001Ch</span>          <span class="comment">;STATUS_INVALID_SYSTEM_SERVICE</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F6DD <span class="number">190</span>                 <span class="keyword">jmp</span>     KiSystemServiceExit</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6E2     <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F6E2</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6E2     loc_28F6E2:                             <span class="comment">; CODE XREF: KiSystemCall64+308</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F6E2 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">4Ah</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F6E7 <span class="number">190</span>                 <span class="keyword">xor</span>     <span class="built_in">r9d</span>, <span class="built_in">r9d</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F6EA <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r8</span>, <span class="built_in">cr8</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F6EE <span class="number">190</span>                 <span class="keyword">or</span>      <span class="built_in">r8d</span>, <span class="built_in">r8d</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F6F1 <span class="number">190</span>                 <span class="keyword">jnz</span>     short loc_28F707</span><br><span class="line"><span class="symbol">.text:</span>000000000028F6F3 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">1</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F6F8 <span class="number">190</span>                 <span class="keyword">movzx</span>   <span class="built_in">r8d</span>, <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">r11</span>+<span class="number">242h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F700 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r9d</span>, [<span class="built_in">r11</span>+<span class="number">1E4h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F707</span><br><span class="line"><span class="symbol">.text:</span>000000000028F707     loc_28F707:                             <span class="comment">; CODE XREF: KiSystemCall64+4F1</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F707 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rdx</span>, [<span class="built_in">rbp</span>+<span class="number">0E8h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F70E <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">r10</span>, <span class="built_in">rbp</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F711 <span class="number">190</span>                 <span class="keyword">call</span>    KiBugCheckDispatch</span><br><span class="line"><span class="symbol">.text:</span>000000000028F716     <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F716</span><br><span class="line"><span class="symbol">.text:</span>000000000028F716     loc_28F716:                             <span class="comment">; CODE XREF: KiSystemCall64+2BA</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F716 <span class="number">190</span>                 <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="number">50h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F71A 1E0                 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">1E0h</span>+var_1C0], <span class="built_in">rcx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F71F 1E0                 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">1E0h</span>+var_1B8], <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F724 1E0                 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">1E0h</span>+var_1B0], <span class="built_in">r8</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F729 1E0                 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">1E0h</span>+var_1A8], <span class="built_in">r9</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F72E 1E0                 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">1E0h</span>+var_1A0], <span class="built_in">r10</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F733 1E0                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, <span class="built_in">r10</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F736 1E0                 <span class="keyword">call</span>    PerfInfoLogSysCallEntry</span><br><span class="line"><span class="symbol">.text:</span>000000000028F73B 1E0                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, [<span class="built_in">rsp</span>+<span class="number">1E0h</span>+var_1C0]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F740 1E0                 <span class="keyword">mov</span>     <span class="built_in">rdx</span>, [<span class="built_in">rsp</span>+<span class="number">1E0h</span>+var_1B8]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F745 1E0                 <span class="keyword">mov</span>     <span class="built_in">r8</span>, [<span class="built_in">rsp</span>+<span class="number">1E0h</span>+var_1B0]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F74A 1E0                 <span class="keyword">mov</span>     <span class="built_in">r9</span>, [<span class="built_in">rsp</span>+<span class="number">1E0h</span>+var_1A8]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F74F 1E0                 <span class="keyword">mov</span>     <span class="built_in">r10</span>, [<span class="built_in">rsp</span>+<span class="number">1E0h</span>+var_1A0]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F754 1E0                 <span class="keyword">add</span>     <span class="built_in">rsp</span>, <span class="number">50h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F758 <span class="number">190</span>                 <span class="keyword">call</span>    <span class="built_in">r10</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F75B <span class="number">190</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">50h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F75F <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F762 <span class="number">190</span>                 <span class="keyword">call</span>    PerfInfoLogSysCallExit</span><br><span class="line"><span class="symbol">.text:</span>000000000028F767 <span class="number">190</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">rbp</span>-<span class="number">50h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000000028F76B <span class="number">190</span>                 <span class="keyword">jmp</span>     loc_28F4C3</span><br><span class="line"><span class="symbol">.text:</span>000000000028F76B     KiSystemCall64  endp</span><br><span class="line"><span class="symbol">.text:</span>000000000028F76B</span><br><span class="line"><span class="symbol">.text:</span>000000000028F770     <span class="comment">; ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="symbol">.text:</span>000000000028F770                     <span class="keyword">retn</span></span><br></pre></td></tr></table></figure><h4 id="KiSystemCall32"><a href="#KiSystemCall32" class="headerlink" title="KiSystemCall32"></a>KiSystemCall32</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>000000014028EF40     KiSystemCall32  proc <span class="built_in">near</span>               <span class="comment">; DATA XREF: .pdata:00000001408842E8o</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF40                                             <span class="comment">; KiInitializeBootStructures+333o</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF40</span><br><span class="line"><span class="symbol">.text:</span>000000014028EF40     TF_Xmm1Offset          = <span class="built_in">byte</span> <span class="built_in">ptr</span>  <span class="number">80h</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF40</span><br><span class="line"><span class="symbol">.text:</span>000000014028EF40 <span class="number">000</span>                 <span class="keyword">swapgs</span>                           <span class="comment">; GS.Base 与 MSR[C0000102] (KernelGSBase) 交换, 此时指向内核 GS</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF43 <span class="number">000</span>                 <span class="keyword">mov</span>     <span class="built_in">gs</span>:<span class="number">10h</span>, <span class="built_in">rsp</span>              <span class="comment">; 保存用户态栈到 _KPCR.UserRsp</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF4C <span class="number">000</span>                 <span class="keyword">mov</span>     <span class="built_in">rsp</span>, <span class="built_in">gs</span>:<span class="number">1A8h</span>             <span class="comment">; 从 _KPCR.Prcb.RspBase 加载内核态栈</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF55 -<span class="number">190</span>                <span class="keyword">push</span>    <span class="number">2Bh</span>                      <span class="comment">; 开始构建 TrapFrame, TrapFrame.SegSs = 0x2B</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF57 -<span class="number">188</span>                <span class="keyword">push</span>    <span class="built_in">qword</span> <span class="built_in">ptr</span> <span class="built_in">gs</span>:<span class="number">10h</span>         <span class="comment">; TrapFrame.Rsp = _KPCR.UserRsp (用户态栈)</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF5F -<span class="number">180</span>                <span class="keyword">push</span>    <span class="built_in">r11</span>                      <span class="comment">; TrapFrame.EFlags = r11 (用户态 rflags)</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF61 -<span class="number">178</span>                <span class="keyword">push</span>    <span class="number">23h</span>                      <span class="comment">; TrapFrame.SegCs = 0x23</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF63 -<span class="number">170</span>                <span class="keyword">push</span>    <span class="built_in">rcx</span>                      <span class="comment">; TrapFrame.Rip = rcx (这个是用户态 syscall 下一条指令的地址)</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF64 -<span class="number">168</span>                <span class="keyword">swapgs</span>                           <span class="comment">; GS.Base 与 MSR[C0000102] (KernelGSBase) 交换, 此时指向用户 GS</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF67 -<span class="number">168</span>                <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="number">8</span>                   <span class="comment">; 调整栈, 跳过 TrapFrame.ErrorCode</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF6B -<span class="number">160</span>                <span class="keyword">push</span>    <span class="built_in">rbp</span>                      <span class="comment">; TrapFrame.Rbp = rbp</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF6C -<span class="number">158</span>                <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="number">158h</span>                <span class="comment">; 调整 TrapFrame 起始地址, 0x158 + 0x38 = 0x190 即这个结构体从尾部开始填充数据, 然后其他未处理的部分直接调整栈来分配足够的空间.</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF73 <span class="number">000</span>                 <span class="keyword">lea</span>     <span class="built_in">rbp</span>, [<span class="built_in">rsp</span>+TF_Xmm1Offset]</span><br><span class="line"><span class="symbol">.text:</span>000000014028EF7B <span class="number">000</span>                 <span class="keyword">mov</span>     <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>-<span class="number">55h</span>], <span class="number">1</span>    <span class="comment">; TrapFrame.ExceptionActive = 1</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF7F <span class="number">000</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">50h</span>], <span class="built_in">rax</span>           <span class="comment">; TrapFrame.Rax = rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF83 <span class="number">000</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">48h</span>], <span class="built_in">rcx</span>           <span class="comment">; TrapFrame.Rcx = rcx</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF87 <span class="number">000</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">40h</span>], <span class="built_in">rdx</span>           <span class="comment">; TrapFrame.Rdx = rdx</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF8B <span class="number">000</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">38h</span>], <span class="built_in">r8</span>            <span class="comment">; TrapFrame.R8 = r8</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF8F <span class="number">000</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">30h</span>], <span class="built_in">r9</span>            <span class="comment">; TrapFrame.R9 = r9</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF93 <span class="number">000</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">28h</span>], <span class="built_in">r10</span>           <span class="comment">; TrapFrame.R10 = r10</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF97 <span class="number">000</span>                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>-<span class="number">20h</span>], <span class="built_in">r11</span>           <span class="comment">; TrapFrame.R11 = r11</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EF9B <span class="number">000</span>                 <span class="keyword">test</span>    <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">0F0h</span>], <span class="number">1</span>   <span class="comment">; TrapFrame.SegCs.CPL == Ring0 ?</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFA2 <span class="number">000</span>                 <span class="keyword">jz</span>      short loc_14028F008      <span class="comment">; </span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFA4 <span class="number">000</span>                 <span class="keyword">swapgs</span>                           <span class="comment">; GS.Base 与 MSR[C0000102] (KernelGSBase) 交换, 此时指向内核 GS</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFA7 <span class="number">000</span>                 <span class="keyword">mov</span>     <span class="built_in">r10</span>, <span class="built_in">gs</span>:<span class="number">188h</span>             <span class="comment">; r10 = _KPCR.Prcb.CurrentThread</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFB0 <span class="number">000</span>                 <span class="keyword">test</span>    <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">r10</span>+<span class="number">3</span>], <span class="number">80h</span>    <span class="comment">; CurrentThread.DispatchHeader.DebugActive(0x80).UmsPrimary</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFB5 <span class="number">000</span>                 <span class="keyword">jz</span>      short loc_14028EFF3</span><br><span class="line"><span class="symbol">.text:</span>000000014028EFB7 <span class="number">000</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">0C0000102h</span>          <span class="comment">; 读取用户 GS</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFBC <span class="number">000</span>                 <span class="keyword">rdmsr</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFBE <span class="number">000</span>                 <span class="keyword">shl</span>     <span class="built_in">rdx</span>, <span class="number">20h</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFC2 <span class="number">000</span>                 <span class="keyword">or</span>      <span class="built_in">rax</span>, <span class="built_in">rdx</span>                 <span class="comment">; rax = User GS, 即 TEB</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFC5 <span class="number">000</span>                 <span class="keyword">cmp</span>     [<span class="built_in">r10</span>+<span class="number">0F0h</span>], <span class="built_in">rax</span>          <span class="comment">; CurrentThread.Teb == User GS ?</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFCC <span class="number">000</span>                 <span class="keyword">jz</span>      short loc_14028EFF3</span><br><span class="line"><span class="symbol">.text:</span>000000014028EFCE <span class="number">000</span>                 <span class="keyword">cmp</span>     [<span class="built_in">r10</span>+<span class="number">200h</span>], <span class="built_in">rax</span>          <span class="comment">; CurrentThread.TebMappedLowVa == User GS ?</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFD5 <span class="number">000</span>                 <span class="keyword">jz</span>      short loc_14028EFF3</span><br><span class="line"><span class="symbol">.text:</span>000000014028EFD7 <span class="number">000</span>                 <span class="keyword">mov</span>     <span class="built_in">rdx</span>, [<span class="built_in">r10</span>+<span class="number">1F0h</span>]          <span class="comment">; rdx = CurrentThread.Ucb (_UMS_CONTROL_BLOCK)</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFDE <span class="number">000</span>                 <span class="keyword">bts</span>     <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">r10</span>+<span class="number">74h</span>], <span class="number">9</span>   <span class="comment">; CurrentThread.MiscFlags.UmsDirectedSwitchEnable = 1</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFE4 <span class="number">000</span>                 <span class="keyword">dec</span>     <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">r10</span>+<span class="number">1E6h</span>]      <span class="comment">; --CurrentThread.SpecialApcDisable</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFEC <span class="number">000</span>                 <span class="keyword">mov</span>     [<span class="built_in">rdx</span>+<span class="number">80h</span>], <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFF3</span><br><span class="line"><span class="symbol">.text:</span>000000014028EFF3     loc_14028EFF3:                          <span class="comment">; CODE XREF: KiSystemCall32+75j</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFF3                                             <span class="comment">; KiSystemCall32+8Cj ...</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFF3 <span class="number">000</span>                 <span class="keyword">test</span>    <span class="built_in">byte</span> <span class="built_in">ptr</span> [<span class="built_in">r10</span>+<span class="number">3</span>], <span class="number">3</span>      <span class="comment">; CurrentThread.DispatchHeader.DebugActive(0x3).(ActiveDR7 &amp; Instrumented)</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028EFF8 <span class="number">000</span>                 <span class="keyword">mov</span>     <span class="built_in">word</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">80h</span>], <span class="number">0</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F001 <span class="number">000</span>                 <span class="keyword">jz</span>      short loc_14028F008</span><br><span class="line"><span class="symbol">.text:</span>000000014028F003 <span class="number">000</span>                 <span class="keyword">call</span>    KiSaveDebugRegisterState</span><br><span class="line"><span class="symbol">.text:</span>000000014028F008</span><br><span class="line"><span class="symbol">.text:</span>000000014028F008     loc_14028F008:                          <span class="comment">; CODE XREF: KiSystemCall32+62j</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F008                                             <span class="comment">; KiSystemCall32+C1j</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F008 <span class="number">000</span>                 <span class="keyword">cld</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F009 <span class="number">000</span>                 <span class="keyword">stmxcsr</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>-<span class="number">54h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000014028F00D <span class="number">000</span>                 <span class="keyword">ldmxcsr</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">gs</span>:<span class="number">180h</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F016 <span class="number">000</span>                 <span class="keyword">movaps</span>  xmmword <span class="built_in">ptr</span> [<span class="built_in">rbp</span>-<span class="number">10h</span>], <span class="built_in">xmm0</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F01A <span class="number">000</span>                 <span class="keyword">movaps</span>  xmmword <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">0</span>], <span class="built_in">xmm1</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F01E <span class="number">000</span>                 <span class="keyword">movaps</span>  xmmword <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">10h</span>], <span class="built_in">xmm2</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F022 <span class="number">000</span>                 <span class="keyword">movaps</span>  xmmword <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">20h</span>], <span class="built_in">xmm3</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F026 <span class="number">000</span>                 <span class="keyword">movaps</span>  xmmword <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">30h</span>], <span class="built_in">xmm4</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F02A <span class="number">000</span>                 <span class="keyword">movaps</span>  xmmword <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">40h</span>], <span class="built_in">xmm5</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F02E <span class="number">000</span>                 <span class="keyword">test</span>    <span class="built_in">qword</span> <span class="built_in">ptr</span> [<span class="built_in">rbp</span>+<span class="number">0F8h</span>], <span class="number">200h</span>   <span class="comment">; TrapFrame.EFlags &amp; 0x200 ?</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F039 <span class="number">000</span>                 <span class="keyword">jz</span>      short loc_14028F03C</span><br><span class="line"><span class="symbol">.text:</span>000000014028F03B <span class="number">000</span>                 <span class="keyword">sti</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F03C</span><br><span class="line"><span class="symbol">.text:</span>000000014028F03C     loc_14028F03C:                          <span class="comment">; CODE XREF: KiSystemCall32+F9j</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F03C <span class="number">000</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">0C000001Dh</span> <span class="comment">; STATUS_ILLEGAL_INSTRUCTION</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F041 <span class="number">000</span>                 <span class="keyword">xor</span>     <span class="built_in">edx</span>, <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F043 <span class="number">000</span>                 <span class="keyword">mov</span>     <span class="built_in">r8</span>, [<span class="built_in">rbp</span>+<span class="number">0E8h</span>]</span><br><span class="line"><span class="symbol">.text:</span>000000014028F04A <span class="number">000</span>                 <span class="keyword">call</span>    KiExceptionDispatch</span><br><span class="line"><span class="symbol">.text:</span>000000014028F04F <span class="number">000</span>                 <span class="keyword">nop</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F050 <span class="number">000</span>                 <span class="keyword">retn</span></span><br><span class="line"><span class="symbol">.text:</span>000000014028F050     KiSystemCall32  endp</span><br></pre></td></tr></table></figure><h4 id="KiInitializeBootStructures"><a href="#KiInitializeBootStructures" class="headerlink" title="KiInitializeBootStructures"></a>KiInitializeBootStructures</h4><p>那么, STAR, LSTAR, CSTAR, SFMASK 这几个寄存器是在哪里初始化的呢? 是在 nt!KiInitializeBootStructures 这个函数里面, 我们看下部分代码:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A00     loc_1408C5A00:                          <span class="comment">; CODE XREF: KiInitializeBootStructures+131j</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A00                                             <span class="comment">; KiInitializeBootStructures+2C6j ...</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A00 <span class="number">058</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, [<span class="built_in">r14</span>+<span class="number">8</span>]</span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A04 <span class="number">058</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">68h</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A09 <span class="number">058</span>                 <span class="keyword">mov</span>     <span class="built_in">edx</span>, <span class="number">230010h</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A0E <span class="number">058</span>                 <span class="keyword">mov</span>     [<span class="built_in">rax</span>+<span class="number">66h</span>], <span class="built_in">cx</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A12 <span class="number">058</span>                 <span class="keyword">xor</span>     <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A14 <span class="number">058</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">0C0000081h</span>         <span class="comment">; STAR</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A19 <span class="number">058</span>                 <span class="keyword">wrmsr</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A1B <span class="number">058</span>                 <span class="keyword">lea</span>     <span class="built_in">rdx</span>, KiSystemCall32</span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A22 <span class="number">058</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">0C0000083h</span>         <span class="comment">; CSTAR</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A27 <span class="number">058</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A2A <span class="number">058</span>                 <span class="keyword">shr</span>     <span class="built_in">rdx</span>, <span class="number">20h</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A2E <span class="number">058</span>                 <span class="keyword">wrmsr</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A30 <span class="number">058</span>                 <span class="keyword">lea</span>     <span class="built_in">rdx</span>, KiSystemCall64</span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A37 <span class="number">058</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">0C0000082h</span>         <span class="comment">; LSTAR</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A3C <span class="number">058</span>                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, <span class="built_in">rdx</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A3F <span class="number">058</span>                 <span class="keyword">shr</span>     <span class="built_in">rdx</span>, <span class="number">20h</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A43 <span class="number">058</span>                 <span class="keyword">wrmsr</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A45 <span class="number">058</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="number">4700h</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A4A <span class="number">058</span>                 <span class="keyword">xor</span>     <span class="built_in">edx</span>, <span class="built_in">edx</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A4C <span class="number">058</span>                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, <span class="number">0C0000084h</span>         <span class="comment">;SFMASK</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A51 <span class="number">058</span>                 <span class="keyword">wrmsr</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A53 <span class="number">058</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, <span class="built_in">gs</span>:<span class="number">1A4h</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A5B <span class="number">058</span>                 <span class="keyword">test</span>    <span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A5D <span class="number">058</span>                 <span class="keyword">jnz</span>     short loc_1408C5A64</span><br><span class="line"><span class="symbol">PAGELK:</span>00000001408C5A5F <span class="number">058</span>                 <span class="keyword">call</span>    KiInitializeNxSupportDiscard</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后, 拿 &lt;&lt; Windows Internal 6th &gt;&gt; 中的一张图来简单总结以下调用过程:</p><p><img src="serivce_dispatch.jpg" alt="系统调用过程"></p><h2 id="引用参考"><a href="#引用参考" class="headerlink" title="引用参考"></a>引用参考</h2><blockquote><p>&lt;&lt; Windows内核情景分析 &gt;&gt;<br>&lt;&lt; Windows Internal &gt;&gt;<br>&lt;&lt; AMD64 Architecture Programmer’s Manual Volume 2: System Programming &gt;&gt;<br>&lt;&lt; 64-ia-32-architectures-software-developer-vol-3-system-programming &gt;&gt;<br>&lt;&lt; <span class="exturl" data-url="aHR0cDovL3d3dy5tb3VzZW9zLmNvbS9hcmNoL3N5c2NhbGxfc3lzcmV0Lmh0bWw=" title="http://www.mouseos.com/arch/syscall_sysret.html">mik - 使用 syscall/sysret 指令<i class="fa fa-external-link"></i></span> &gt;&gt;  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CPU 既可以运行于非特权的”用户空间”, 也可以运行于特权的”系统空间”.&lt;/p&gt;
&lt;p&gt;CPU 要从系统空间转入用户空间是容易的, 因为运行于系统空间的CPU可以通过一些特权指令改变其运行状态. 但是从用户空间转入系统空间就不容易了, 因为运行于用户空间的 CPU 是不能执行特权指令的.&lt;/p&gt;
&lt;p&gt;一般而言,只有下面几种手段可以从用户空间转入系统空间:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;中断 (Interrupt): 在开启了中断的情况下,只要有中断请求到来, CPU 就会自动转入系统空间, 并指定对应的中断例程, 从而为中断请求提供服务. 中断发生在两条指令之间, 所以不会使正在执行的指令半途而废, 中断是无法预知且异步的.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;异常 (Exception): 异常和中断极其相似, 只是一行发生在执行一条指令的过程中, 而不是两条指令之间. 实践中, 可以通过故意引起异常而进入内核.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自陷 (Trap): 为了让 CPU 能主动地进入系统空间, 绝大多数 CPU 都设有专门的 “自陷” 指令, 系统调用通常都是通过自陷指令实现的. 自陷指令在形式上也与中断相似,就像是 CPU 主动发出的中断请求.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;快速系统调用 (fast call): 可以说是对自陷机制的改进.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这篇笔记主要就是写自陷和快速系统调用机制.&lt;/p&gt;
    
    </summary>
    
      <category term="Windows kernel learning" scheme="https://mirokaku.github.io/Blog/categories/Windows-kernel-learning/"/>
    
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/tags/Windows/"/>
    
      <category term="Kernel" scheme="https://mirokaku.github.io/Blog/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>Windows kernel learning: 1. Basis</title>
    <link href="https://mirokaku.github.io/Blog/2017/1-Basis/"/>
    <id>https://mirokaku.github.io/Blog/2017/1-Basis/</id>
    <published>2017-05-12T04:37:23.000Z</published>
    <updated>2017-05-18T06:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows-系统结构图"><a href="#Windows-系统结构图" class="headerlink" title="Windows 系统结构图"></a>Windows 系统结构图</h2><img src="/Blog/2017/1-Basis/Windows-system-structure.jpg" title="Windows 系统结构图"><p>图中水平粗线表示用户空间和系统空间的分界.</p><p>在 32 位 Windows 系统中, 整个 4GB 的虚拟内存地址被对分成两块, 从地址 <code>0x80000000</code> 开始向上是系统空间, 就是内核所在的地方, 下面则是用户空间, 是应用程序所在的地方. (64 位系统会在后面的内存管理说到, 这里只是简单了解下概念)</p><p>CPU 进入内核只有三种途径:</p><ol><li>系统调用</li><li>中断</li><li>异常</li></ol><a id="more"></a><h2 id="Windows-内核函数的名称前缀"><a href="#Windows-内核函数的名称前缀" class="headerlink" title="Windows 内核函数的名称前缀"></a>Windows 内核函数的名称前缀</h2><p>表中列出了内核函数的大多数名称前缀, 其中每个也都会使用前缀变化形式来标记内部函数.<br>例如前缀的第一个字母后面跟一个 i (代表内部的 internal), 或者整个前缀后面跟一个 p (代表私有的, private), 或者前缀后面跟一个 f (代表快速的, fast). Ki 代表内核内部函数, Psp 代表内部的进程支持函数, Obf 代表对象管理器的快速调用函数.</p><table><thead><tr><th align="left">前缀</th><th align="left">内核组件</th></tr></thead><tbody><tr><td align="left">Alpc</td><td align="left">高级本地进程间通信 (Advanced Local Inter-Process Communication)</td></tr><tr><td align="left">Cc</td><td align="left">公共缓存 (Common Cache)</td></tr><tr><td align="left">Cm</td><td align="left">系统配置管理器 (Configuration manager)</td></tr><tr><td align="left">Dbgk</td><td align="left">用户模式调试框架</td></tr><tr><td align="left">Em</td><td align="left">错误修正管理器</td></tr><tr><td align="left">Etw</td><td align="left">Windows 事件跟踪</td></tr><tr><td align="left">Ex</td><td align="left">管理层 (Executive)</td></tr><tr><td align="left">FsRtl</td><td align="left">文件系统驱动程序运行库</td></tr><tr><td align="left">Hvl</td><td align="left">超级管理器库</td></tr><tr><td align="left">Hal</td><td align="left">硬件抽象层 (Hardware abstraction layer)</td></tr><tr><td align="left">Io</td><td align="left">I/O管理器 (I/O manager)</td></tr><tr><td align="left">Kd</td><td align="left">内核调试器 (Kernel debug)</td></tr><tr><td align="left">Ke</td><td align="left">核心层 (Kernel core)</td></tr><tr><td align="left">Lsa</td><td align="left">本地安全权威</td></tr><tr><td align="left">Mm</td><td align="left">内存管理器 (Memory manager)</td></tr><tr><td align="left">Ob</td><td align="left">对象管理器 (Object manager)</td></tr><tr><td align="left">Pf</td><td align="left">预取器</td></tr><tr><td align="left">Po</td><td align="left">电源管理器 (Power manager)</td></tr><tr><td align="left">Pp</td><td align="left">Pnp 管理器 (Pnp magager)</td></tr><tr><td align="left">Ps</td><td align="left">进程支持 (Process support)</td></tr><tr><td align="left">Rtl</td><td align="left">运行库 (Runtime library)</td></tr><tr><td align="left">Se</td><td align="left">安全性</td></tr><tr><td align="left">Sm</td><td align="left">存储管理器 (Store manager)</td></tr><tr><td align="left">Tm</td><td align="left">事务管理器 (Transaction manager)</td></tr><tr><td align="left">Vf</td><td align="left">检验器 (Verifier)</td></tr><tr><td align="left">Wdi</td><td align="left">Windows 诊断设施 (Windows Diagnostic Infrastructure)</td></tr><tr><td align="left">Whea</td><td align="left">Windows 硬件错误体系架构 (WIndows Hardware Error Architecture)</td></tr><tr><td align="left">Wmi</td><td align="left">Windows 管理设施</td></tr><tr><td align="left">Nt</td><td align="left">NT系统服务 (Native system services)</td></tr><tr><td align="left">Zw</td><td align="left">与 R3 中 Zw 为 Nt 的别名不同, 在内核中 Zw 是以 Nt 开头的系统服务入口点的镜像, 它把原来的访问模式设置为内核模式, 从而消除了参数的有效性检查过程, 因为 Nt 系统服务只有当原来的访问模式为用户模式时才进行参数有效性检查.</td></tr></tbody></table><h2 id="中断请求等级-IRQL"><a href="#中断请求等级-IRQL" class="headerlink" title="中断请求等级 IRQL"></a>中断请求等级 IRQL</h2><p>在 x86 系统上, 内核在内部使用 0<del>31 的数值来表示 IRQL;<br>而在 x64 和 IA64 系统上, 内核采用 0</del>15 的数值表示 IRQL.<br>这里数值越大, 代表的中断请求等级越高.</p><p>内核为软件中断定义了一组标准的 IRQL, 而 HAL 则将硬件中断号映射为 IRQL.</p><p>x86 中断请求级别:</p><table><thead><tr><th align="left">数值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">31</td><td align="left">高端</td></tr><tr><td align="left">30</td><td align="left">电源失败</td></tr><tr><td align="left">29</td><td align="left">处理器间的中断</td></tr><tr><td align="left">28</td><td align="left">时钟</td></tr><tr><td align="left">27</td><td align="left">性能剖析/同步</td></tr><tr><td align="left">26</td><td align="left">设备n</td></tr><tr><td align="left">…</td><td align="left">…</td></tr><tr><td align="left">5</td><td align="left">可纠正的机器检查 (CMCI)</td></tr><tr><td align="left">4</td><td align="left">…</td></tr><tr><td align="left">3</td><td align="left">设备1</td></tr><tr><td align="left">2</td><td align="left">DPC/dispatch</td></tr><tr><td align="left">1</td><td align="left">APC</td></tr><tr><td align="left">0</td><td align="left">User-APC/被动/低端</td></tr></tbody></table><p>x64 中断请求级别</p><table><thead><tr><th align="left">数值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">15</td><td align="left">高端/性能剖析</td></tr><tr><td align="left">14</td><td align="left">处理期间的中断/电源</td></tr><tr><td align="left">13</td><td align="left">时钟</td></tr><tr><td align="left">12</td><td align="left">同步</td></tr><tr><td align="left">11</td><td align="left">设备n</td></tr><tr><td align="left">…</td><td align="left">…</td></tr><tr><td align="left">4</td><td align="left">…</td></tr><tr><td align="left">3</td><td align="left">设备1</td></tr><tr><td align="left">2</td><td align="left">DPC/dispatch</td></tr><tr><td align="left">1</td><td align="left">APC</td></tr><tr><td align="left">0</td><td align="left">User-APC/被动/低端</td></tr></tbody></table><ul><li>高端级别: 内核仅当它在 KeBugCheckEx 中停止了系统并屏蔽了所有中断时, 才会使用高端级别的 IRQL.</li><li>电源失败级别: 文档指定了系统电源失败代码的行为, 但是这个 IRQL 从未被使用过…</li><li>处理器间的中断级别: 被用于向另一个处理器请求执行某个动作,比如更新该处理器的 TLB 缓存, 系统停机或者系统崩溃.</li><li>时钟级别: 主要用于系统的时钟,内核利用该中断级别来跟踪日期和时间,以及为线程测量或分配 CPU 时间.</li><li>性能剖析级别: 当内核的性能剖析功能被打开时, 系统的实时时钟(或另一个中断源,比如本地APIC定时器)就会用到性能剖析级别. 当内核的性能剖析功能激活时, 内核的性能剖析陷阱处理器就会记录下中断发生时被执行代码的地址. 随着时间推移, 一张采样表就会生成.</li><li>同步级别: 内核内部使用的, 分发器和调度器利用该级别来保护对全局线程调度代码和等待/同步代码的访问.通常定义在设备IRQL最高级别之后</li><li>设备级别: 用于对设备中断进行优先级区分.</li><li>CMCI级别: 当CPU或固件通过MCE机器检查错误接口报告一个虽然严重但是可以纠正的硬件条件或错误时使用.</li><li>DPC/dispatch 级别 和 APC 级别: 是有内核和设备驱动程序产生的软件中断</li><li>低端/被动级别: 实际上不是中断级别; 它是普通线程运行时的设置, 此时所有的中断都允许发生. </li></ul><p>中断是按照优先级处理的, 高优先级的中断会抢占低优先级中断的执行权.<br>当一个高优先级的中断发生时, 处理器把中断的线程状态保存起来, 并调用与该中断关联的陷阱分发器.<br>该陷阱分发器提升 IRQL, 并调用该中断的服务例程. 完成后再降低处理器的 IRQL, 然后装入保存的机器状态, 从中断的地方恢复执行.</p><h2 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h2><p>在x86-64处理器架构中, 当处于长模式 (Long-mode) 时, 64位应用程序 (或者是操作系统) 可以使用64位指令和寄存器, 而32位和16位程序将以一种兼容子模式 (Legacy-mode, 传统模式) 运行.<br>不在长模式下运行时, 处理器支持真实模式和保护模式两个子模式, 在这两个模式下的x86-64处理器与x86-32处理器运行方式完全相同. </p><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><h4 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h4><p>接下来看一下各种段寄存器(CS, DS, SS, ES, FS, GS)在 Windows 中的作用.</p><ul><li><p>CS (Code Segment)<br>代码段寄存器, 指向包含程序指令的段</p></li><li><p>DS (Data Segment)<br>数据段寄存器, 指向包含静态数据或全局数据的段</p></li><li><p>SS (Stack Segment)<br>栈段寄存器, 指向当前程序栈的段</p></li><li><p>ES (Extra Segment)<br>附加段寄存器, 暂时不知道干嘛的</p></li><li><p>FS (Flag Segment)<br>标志段寄存器<br>在 x86 系统, Ring3 中, FS:[0] 指向 nt!_TEB; Ring0 中, FS:[0] 指向 nt!_KPCR<br>在 x64 系统, 只有在 WOW64 进程中, FS 寄存器才会同 x86 寄存器一样, 其他情况未使用</p></li><li><p>GS (Global Segment)<br>全局段寄存器<br>在 x86 系统, 未使用<br>在 x64 系统, 代替了 FS 寄存器, x86系统下的功能.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Windows-系统结构图&quot;&gt;&lt;a href=&quot;#Windows-系统结构图&quot; class=&quot;headerlink&quot; title=&quot;Windows 系统结构图&quot;&gt;&lt;/a&gt;Windows 系统结构图&lt;/h2&gt;&lt;img src=&quot;/Blog/2017/1-Basis/Windows-system-structure.jpg&quot; title=&quot;Windows 系统结构图&quot;&gt;

&lt;p&gt;图中水平粗线表示用户空间和系统空间的分界.&lt;/p&gt;
&lt;p&gt;在 32 位 Windows 系统中, 整个 4GB 的虚拟内存地址被对分成两块, 从地址 &lt;code&gt;0x80000000&lt;/code&gt; 开始向上是系统空间, 就是内核所在的地方, 下面则是用户空间, 是应用程序所在的地方. (64 位系统会在后面的内存管理说到, 这里只是简单了解下概念)&lt;/p&gt;
&lt;p&gt;CPU 进入内核只有三种途径:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统调用&lt;/li&gt;
&lt;li&gt;中断&lt;/li&gt;
&lt;li&gt;异常&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Windows kernel learning" scheme="https://mirokaku.github.io/Blog/categories/Windows-kernel-learning/"/>
    
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/tags/Windows/"/>
    
      <category term="Kernel" scheme="https://mirokaku.github.io/Blog/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>Windows kernel learning: 0. Preface</title>
    <link href="https://mirokaku.github.io/Blog/2017/0-Preface/"/>
    <id>https://mirokaku.github.io/Blog/2017/0-Preface/</id>
    <published>2017-05-12T04:37:00.000Z</published>
    <updated>2017-05-26T14:17:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;&lt; Windows kernel learning &gt;&gt; 系列的文章是我学习 Windows 内核的笔记.</p><p>以 &lt;&lt; Windows 内核情景分析 &gt;&gt; 为学习主线, 扩展其他学习资料以及通过调试来适应现代版本的 Windows 系统.</p><p>操作系统的版本主要以 <code>Windows 8.1 x64</code> 为主 (因为有 Checked Build 版本), 有些重要的点可能会对 x86 系统同时进行记录.</p><p>由于资料来源各种地方, 以及我对有些知识的理解可能有错误, 希望同学们能帮助我改正呀~</p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p>这里记录一些涉及到的主要资料</p><p>书籍:</p><ul><li>&lt;&lt; Windows 内核情景分析 &gt;&gt;</li><li>&lt;&lt; Windows Internal 6th part 1 &gt;&gt;</li><li>&lt;&lt; What Makes It Page &gt;&gt;</li><li>&lt;&lt; Intel: 64 and IA-32 Architectures Software Developer Vol 3 System Programming &gt;&gt;</li><li>&lt;&lt; AMD64: Architecture Programmer’s Manual Vol 2 System Programming&gt;&gt;</li></ul><p>文章:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvWDg2LTY0" title="https://zh.wikipedia.org/wiki/X86-64">&lt;&lt; x86-64 维基百科&gt;&gt;<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy5tb3VzZW9zLmNvbS8=" title="http://www.mouseos.com/">&lt;&lt; mouseos 技术小站 &gt;&gt;<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL2Jicy5wZWRpeS5jb20vdGhyZWFkLTIxNjk5NS5odG0=" title="http://bbs.pediy.com/thread-216995.htm">&lt;&lt; Windows7内核分析之x86&amp;x64第二章系统调用 &gt;&gt;<i class="fa fa-external-link"></i></span></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;lt;&amp;lt; Windows kernel learning &amp;gt;&amp;gt; 系列的文章是我学习 Windows 内核的笔记.&lt;/p&gt;
&lt;p&gt;以 &amp;lt;&amp;lt; Windows 内核情景分析 &amp;gt;&amp;gt; 为学习主线, 扩展其他学习资料以及通过调试来适应现代版本
      
    
    </summary>
    
      <category term="Windows kernel learning" scheme="https://mirokaku.github.io/Blog/categories/Windows-kernel-learning/"/>
    
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/tags/Windows/"/>
    
      <category term="Kernel" scheme="https://mirokaku.github.io/Blog/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 学习笔记</title>
    <link href="https://mirokaku.github.io/Blog/2016/OC-Notes/"/>
    <id>https://mirokaku.github.io/Blog/2016/OC-Notes/</id>
    <published>2016-09-03T05:20:00.000Z</published>
    <updated>2017-05-12T04:05:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前学习 Objective-C 时整理的笔记，文章内错误之处还望指点…</p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        <span class="comment">// insert code here...</span></span><br><span class="line">        NSLog(@<span class="string">"Hello, World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><a id="more"></a><p><code>#import</code> 就相当于 C++ 里面的 <code>#include</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@autoreleasepool &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>{...}</code> 之间的语句会在被称之为 “自动释放池” 的语境中执行。</p><p>自动释放池的机制是：它使得应用在创建新对象时，系统能够有效的管理应用所使用的内容。</p><p><code>@&quot;Hello, World&quot;</code> 此处的 @ 符号在位于一对双引号的字符串前面，这称为常量 NSString 对象。<br>如果前面没有 @ 字符，就是在编写常量 C 类型的字符串。有了这个符号就是在编写 NSString 字符串对象。</p><p>同 C 语言一样，Objective-C 的所有程序语句必须使用分号（;）结束。</p><p>这篇文章主要是讲 Objective-C 与 C++ 的区别…</p><h1 id="类、对象和方法"><a href="#类、对象和方法" class="headerlink" title="类、对象和方法"></a>类、对象和方法</h1><h2 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h2><p>Objective-C的面向对象语法源自SmallTalk，消息传递（Message Passing）风格/在源码风格方面，这是它与C Family语言（包括C/C++、Java、世界上最好的语言PHP）差别最大的地方。</p><p>在Java、C++世界，我们调用一个对象的某个方法，在Objective-C里，这称作给类型发送一个消息，这可不仅仅是文字游戏，他们的技术细节也是不同。</p><p>在Java、C++里，对象和方法关系非常严格，一个方法必须属于一个类对象，否则编译要报错的。<br>而在Objective-C里，类型和消息的关系比较松散，消息处理到运行时（runtime）才会动态确定，给类型发送一个它无法处理的消息，也只会抛出一个异常而不会挂掉。</p><table><thead><tr><th align="left">Language</th><th align="left">Call Method</th></tr></thead><tbody><tr><td align="left">Objective-C</td><td align="left">[obj undefineMethod];</td></tr><tr><td align="left">C++</td><td align="left">obj.undefineMethod();</td></tr></tbody></table><p>在代码里调用没定义的方法（这是Java、C++世界习惯的说法，专业叫法是，给obj对象传递它无法处理的消息），Xcode会警告，但能编译成功，运行的时候会出错。<br>它会输出这样一个错误：<br><img src="%E8%B0%83%E7%94%A8%E6%9C%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E9%94%99%E8%AF%AF.jpg" alt></p><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>前文述及，不涉及面向对象时，它和C是完全一样的。以下是几个函数调用的示例：</p><ul><li><p>不带参数  </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StartedBlock();</span><br></pre></td></tr></table></figure></div></li><li><p>带参数  </p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSLog(@<span class="string">"decrypted string: %@"</span>, str);</span><br><span class="line">CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="传递消息给类-实例方法"><a href="#传递消息给类-实例方法" class="headerlink" title="传递消息给类 / 实例方法"></a>传递消息给类 / 实例方法</h2><ul><li>不带参数</li></ul><table><thead><tr><th align="left">Language</th><th align="left">Method</th></tr></thead><tbody><tr><td align="left">Objective-C</td><td align="left">[obj method];</td></tr><tr><td align="left">C++</td><td align="left">obj.method();</td></tr></tbody></table><ul><li>带一个参数</li></ul><table><thead><tr><th align="left">Language</th><th align="left">Method</th></tr></thead><tbody><tr><td align="left">Objective-C</td><td align="left">[counter increase:1];</td></tr><tr><td align="left">C++</td><td align="left">counter.increase(1);</td></tr></tbody></table><ul><li>带多个参数<br>对于C Family 程序员来说，这是最难接收，最反人类的</li></ul><table><thead><tr><th align="left">Language</th><th align="left">Method</th></tr></thead><tbody><tr><td align="left">Objective-C</td><td align="left">-(void) setColorToRed: (float)red Green: (float)green Blue: (float)blue {…} // 定义方法</td></tr><tr><td align="left"></td><td align="left">[myObj setColorToRed: 1.0 Green: 0.8 Blue: 0.2]; // 传递消息</td></tr><tr><td align="left">C++</td><td align="left">public void setColorToRedGreenBlue(float red, float green, float blue) {…}</td></tr><tr><td align="left"></td><td align="left">myObj.setColorToRedGreenBlue(1.0, 0.8, 0.2);</td></tr></tbody></table><ul><li>消息嵌套</li></ul><table><thead><tr><th align="left">Language</th><th align="left">Method</th></tr></thead><tbody><tr><td align="left">Objective-C</td><td align="left">UINavigationBar *bar = [ [ [UINavigationBar alloc] init] autorelease];</td></tr><tr><td align="left">C++</td><td align="left">UINavigationBar bar = UINavigationBar.alloc().inti().autorelease();</td></tr></tbody></table><h2 id="类的定义与实现"><a href="#类的定义与实现" class="headerlink" title="类的定义与实现"></a>类的定义与实现</h2><p>Objective-C中强烈要求将类的定义（interface）与实现（implementation）分为两个部分。<br>类的定义文件遵循C语言之习惯，头文件以.h为后缀，实现文件以.m为后缀（也有.mm的扩展名，表示Objective-C与C++混合编程）</p><p>举个栗子：</p><ul><li>Interface<br>定义部分，清楚定义了类的名称、数据成员和方法。以关键字@interface作为开始，@end作为结束。</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@interface MyObject : NSObject &#123;</span><br><span class="line">    <span class="keyword">int</span> memberVar1; <span class="comment">//实体变量</span></span><br><span class="line">    id  memberVar2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+(return_type) class_method;     <span class="comment">// 类方法</span></span><br><span class="line"></span><br><span class="line">-(return_type) instance_method1; <span class="comment">// 实例方法</span></span><br><span class="line">-(return_type) instance_method2: (<span class="keyword">int</span>) p1;</span><br><span class="line">-(return_type) instance_method3: (<span class="keyword">int</span>) p1 andPar: (<span class="keyword">int</span>) p2;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><p>方法前面的+/-号代表函数的类型：<br>加号（+）代表类方法（class method），不需要实例就可以调用，与C++的静态函数（static member function）相似。<br>减号（-）即是一般的实例方法（instance method）。</p><p>下面是意义相近的 C++ 语法对照：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> :</span> <span class="keyword">public</span> NSObject &#123;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        <span class="keyword">int</span> memberVar1; <span class="comment">// 实体变量</span></span><br><span class="line">        <span class="keyword">void</span> *memberVar2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">static</span> return_type <span class="title">class_method</span><span class="params">()</span></span>; <span class="comment">// 类方法</span></span><br><span class="line"></span><br><span class="line">        <span class="function">return_type <span class="title">instance_method1</span><span class="params">()</span></span>;    <span class="comment">// 实例方法</span></span><br><span class="line">        <span class="function">return_type <span class="title">instance_method2</span><span class="params">(<span class="keyword">int</span> p1)</span></span>;</span><br><span class="line">        <span class="function">return_type <span class="title">instance_method3</span><span class="params">(<span class="keyword">int</span> p1, <span class="keyword">int</span> p2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Objective-C 定义一个新的方法时，名称内的冒号（:）代表参数传递，不同于C语言以数学函数的括号来传递参数。<br>Objective-C 方法使得参数可以夹于名称中间，不必全部依附于方法名称的尾端，可以提高程序可读性。<br>设定颜色RGB值得方法为例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) setColorToRed: (<span class="keyword">float</span>)red Green: (<span class="keyword">float</span>)green Blue:(<span class="keyword">float</span>)blue; <span class="comment">// 宣告方法</span></span><br><span class="line"></span><br><span class="line">[myColor setColorToRed:<span class="number">1.0</span> Green:<span class="number">0.8</span> Blue:<span class="number">0.2</span>]; <span class="comment">// 呼叫方法</span></span><br></pre></td></tr></table></figure></div><p>这个方法的签名是setColorToRed:Green:Blue:。每个冒号后面都带着一个float类别的参数，分别代表红，绿，蓝三色。</p><ul><li>Implementation<br>实现区块则包含了公开方法的实现，以及定义私有变量及方法。以关键字@implementation作为区块起头，@end结尾。</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Implementation MyObject &#123;</span><br><span class="line">    <span class="keyword">int</span> memberVar3; <span class="comment">// 私有实体变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+(return_type) class_method &#123;</span><br><span class="line">    ... <span class="comment">// method Implementation</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(return_type) instance_method1 &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(return_type) instance_method2: (<span class="keyword">int</span>) p1 &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(return_type) instance_method3: (<span class="keyword">int</span>) p1 andPar: (<span class="keyword">int</span>) p2 &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><p>值得一提的是不只Interface区块可定义实体变量，Implementation区块也可以定义实体变量，两者的差别在于访问权限的不同。<br>Interface区块内的实体变量默认权限为protected，宣告于implementation区块的实体变量则默认为private，故在Implementation区块定义私有成员更匹配面向对象之封装原则，因为如此类别之私有信息就不需曝露于公开interface（.h文件）中。</p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>Objective-C创建对象需通过alloc以及init两个消息。alloc的作用是分配内存，init则是初始化对象。 init与alloc都是定义在NSObject里的方法，父对象收到这两个信息并做出正确回应后，新对象才创建完毕。以下为范例：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyObject *my = [[MyObject alloc] init];</span><br></pre></td></tr></table></figure></div><p>在Objective-C 2.0里，若创建对象不需要参数，则可直接使用new</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyObject *my = [MyObject <span class="keyword">new</span>];</span><br></pre></td></tr></table></figure></div><p>仅仅是语法上的精简，效果完全相同。</p><p>若要自己定义初始化的过程，可以重写init方法，来添加额外的工作。（用途类似C++ 的构造函数constructor）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (id) init &#123;</span><br><span class="line">    <span class="keyword">if</span> (self = [super init]) &#123; <span class="comment">// 必须调用父类的 init</span></span><br><span class="line">        <span class="comment">// do something here ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="数据类型和表达式"><a href="#数据类型和表达式" class="headerlink" title="数据类型和表达式"></a>数据类型和表达式</h1><p>OC 有4个基本数据类型：int, float, double, char。概念同C++一样<br>5个限定词：long, long long, short, unsigned, signed。概念同 C++ 一样</p><p>下面来说几个特殊的类型：</p><ul><li>BOOL 类型<br>概念同 C++ 一样，但是预定义的真假值与 C++ 不同：</li></ul><table><thead><tr><th align="left">Language</th><th align="left">真</th><th align="left">假</th></tr></thead><tbody><tr><td align="left">Objective-C</td><td align="left">YES</td><td align="left">NO</td></tr><tr><td align="left">C++</td><td align="left">true</td><td align="left">false</td></tr></tbody></table><ul><li>id 类型<br>id类型是 OC 里一个比较特殊的类型。<br>概念上与 void* 类型很像，但是他们两个有很大区别。<br>在内部处理上，这种类型被定义为 <strong>指向对象的指针</strong>，实际上是一个 <strong>指向这种对象的实例变量的指针</strong></li></ul><p>下面是 id 在 Objc.h 中的定义：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Represents an instance of a class.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_object</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">isa</span> <span class="title">OBJC_ISA_AVAILABILITY</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// A pointer to an instance of a class.</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_object</span> *<span class="title">id</span>;</span></span><br></pre></td></tr></table></figure></div><p>从上面看出，id是指向struct objc_object的一个指针。也就是说，id是指向任何一个继承了Object（或者NSObject）类的对象。<br>需要注意的是，id是一个指针，所以在使用的时候不需要加星号（*）。</p><ul><li><p>SEL 类型<br>在 Objective-C 中，SEL 是选择器的一个类型。<br>我们可以将 SEL 理解为函数指针，但他们之间并非完全一样。</p></li><li><p>nil 类型<br>与 C++ 中 null 概念一样，是是对 nill 操作不会有任何作用，C++ 中对 null 操作会异常。</p></li></ul><blockquote><p>基础数据类型表：</p></blockquote><table><thead><tr><th align="left">类型</th><th align="left">实例</th><th align="left">NSLog 字符</th></tr></thead><tbody><tr><td align="left">char</td><td align="left">‘a’、’\n’</td><td align="left">%c</td></tr><tr><td align="left">short int</td><td align="left">-</td><td align="left">%hi、%hx、%ho</td></tr><tr><td align="left">unsigned short int</td><td align="left">-</td><td align="left">%hu、%hx、%ho</td></tr><tr><td align="left">int</td><td align="left">12、-97、0xFFE0、0177</td><td align="left">%i、%x、%o</td></tr><tr><td align="left">unsigned int</td><td align="left">12u、100U、0XFFu</td><td align="left">%u、%x、%o</td></tr><tr><td align="left">long int</td><td align="left">12L、-200l、0xffffL</td><td align="left">%li、%lx、%lo</td></tr><tr><td align="left">unsigned long int</td><td align="left">12UL、100ul、0xffeeUL</td><td align="left">%lu、%lx、%lo</td></tr><tr><td align="left">long long int</td><td align="left">0xe5e5e5e5LL、0xffeeUL</td><td align="left">%lli、%llx、%llo</td></tr><tr><td align="left">unsigned long long int</td><td align="left">12ull、0xffeeULL</td><td align="left">%llu、%llx、%llo</td></tr><tr><td align="left">float</td><td align="left">12.34f、3.1e-5f、0x1.5p10、0x1P-1</td><td align="left">%f、%e、%g、%a</td></tr><tr><td align="left">double</td><td align="left">12.34、3.1e-5、0x.1p3</td><td align="left">%f、%e、%g、%a</td></tr><tr><td align="left">long double</td><td align="left">12.34L、3.1e-5l</td><td align="left">%Lf、%Le、%Lg</td></tr><tr><td align="left">id</td><td align="left">nil</td><td align="left">%p</td></tr></tbody></table><p>基本算术运算符概念同 C++ 一样</p><h1 id="循环结构和选择结构"><a href="#循环结构和选择结构" class="headerlink" title="循环结构和选择结构"></a>循环结构和选择结构</h1><p>同C++11一样，for循环有两种：普通for循环，快速for循环</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种遍历：普通 for 循环</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">int</span> count = [<span class="built_in">array</span> count];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">    NSLog(@<span class="string">"1 遍历 array：%zi -&gt; %@"</span>, i, [<span class="built_in">array</span> objectAtIndex:i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种遍历：快速 for 循环</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (id obj in <span class="built_in">array</span>) &#123;</span><br><span class="line">    NSLog(@<span class="string">"2 遍历 array：%zi -&gt; %@"</span>, i, obj);</span><br><span class="line">    ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其他的 while，do…while，break，continue 都同 C++ 一致<br>选择结构，if，if…else…，switch同 C++ 一致</p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="合成存取方法"><a href="#合成存取方法" class="headerlink" title="合成存取方法"></a>合成存取方法</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@interface Fraction : NSObject</span><br><span class="line"></span><br><span class="line">@property <span class="keyword">int</span> numerator, denominator;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)    print;</span><br><span class="line">- (<span class="keyword">double</span>)  convertToNum;</span><br><span class="line"></span><br><span class="line">@ end</span><br><span class="line"></span><br><span class="line">@Implementation Fraction</span><br><span class="line"></span><br><span class="line">@synthesize numerator, denominator;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) print &#123;</span><br><span class="line">    NSLog(@<span class="string">"%i / %i"</span>, numerator, denominator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">double</span>) convertToNum &#123;</span><br><span class="line">    <span class="keyword">if</span> (denominator != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>) numerator / denominator;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> NAN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@ end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        Fraction *objFraction = [Fraction <span class="keyword">new</span>];</span><br><span class="line">        [objFraction setNumerator:<span class="number">1</span>];</span><br><span class="line">        [objFraction setDenominator:<span class="number">2</span>];</span><br><span class="line">        [objFraction print];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>从OC 2.0开始，可自动生成设值方法和取值方法。<br>第一步是在接口部分中使用@property指令标识属性。<br>第二步是在实现部分中使用@synthesize</p><p>如果使用了@property指令，就不需要再实现部分声明相应的实例变量。</p><p>当然，你并不需要使用@synthesize指令，使用@property指令编译器也会自动为你生成setter和getter。<br>但是要注意，如果你不使用@sythesize，那么编译器生成的实例变量会以下画线（_）字符作为其名称的第一个字符。</p><h2 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h2><p>访问属性有两种格式：<br><code>Instance.property = value;</code> 等价为 <code>[Instance setProperty: value];</code></p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@interface ClassA : NSObject &#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) initVar;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ClassA</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) initVar &#123;</span><br><span class="line">    x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface ClassB : ClassA</span><br><span class="line">- (<span class="keyword">void</span>) printVar;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ClassB</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) printVar &#123;</span><br><span class="line">    NSLog(@<span class="string">"x = %i"</span>, x);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><p>在这段代码里面，ClassA继承于NSObject，ClassB继承于ClassA。<br>语法同C++差不多。但是有一点要注意：OC只能是单继承，而C++可以多继承。</p><p>继承的概念作用于整个继承链。</p><p>@class 指令<br>例如 @class XYPoint;<br>在头文件声明中，告诉编译器XYPoint是一个类的名字。而不需要 <code>#import</code> 导入整个 <code>XYPoint.h</code><br>在C++中相当于 class XYPoint;</p><p>处理动态类型的方法：</p><table><thead><tr><th align="left">方法</th><th align="left">问题或行为</th></tr></thead><tbody><tr><td align="left">-(BOOL) isKindOfClass: class-object</td><td align="left">对象是不是 class-object 或其子类的成员</td></tr><tr><td align="left">-(BOOL) isMemberOfClass: class-object</td><td align="left">对象是不是 class-object 的成员</td></tr><tr><td align="left">-(BOOL) respondsToSelector: Selector</td><td align="left">对象是否能够相应 selector 所指定的方法</td></tr><tr><td align="left">-(BOOL) instancesRespondToSelector: Selector</td><td align="left">指定的类实例是否能够响应 selector</td></tr><tr><td align="left">-(BOOL) isSubclassOfClass: class-object</td><td align="left">对象是否是指定类的子类</td></tr><tr><td align="left">-(id) performSelector: selector</td><td align="left">应用 selector 指定的方法</td></tr><tr><td align="left">-(id) performSelector: selector withObject: object</td><td align="left">应用 selector 指定的方法，传递参数 object</td></tr><tr><td align="left">-(id) performSelector: selector withObject: object1 withObject: object2</td><td align="left">应用 selector 指定的方法，传递参数 object1 和 object2</td></tr></tbody></table><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>在OC里面的多态与C++有些不一样。<br>在OC里面，不同类的相同方法名即为多态。<br>而在C++里面就不一样咯。C++里面的多态是通过继承来实现的。  </p><p>举个最简单的例子：</p><ul><li>Objective-C</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@interface ClassA : NSObject &#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) intVar;</span><br><span class="line">- (<span class="keyword">void</span>) printVar;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ClassA</span><br><span class="line">- (<span class="keyword">void</span>) initVar &#123;</span><br><span class="line">    x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) printVar &#123;</span><br><span class="line">    NSLog(@<span class="string">"x = %i"</span>, x)</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface ClassB : ClassA</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) initVar;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ClassB</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) initVar &#123;</span><br><span class="line">    x = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        ClassA *myClassA = [ClassB <span class="keyword">new</span>];</span><br><span class="line">        [myClassA initVar];</span><br><span class="line">        [myClassA printVar];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>C++</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initVar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printVar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> :</span> <span class="keyword">public</span> ClassA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initVar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x = <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ClassA *myClassA = <span class="keyword">new</span> ClassB();</span><br><span class="line"></span><br><span class="line">    myClassA-&gt;initVar();</span><br><span class="line">    myClassA-&gt;printVar();</span><br><span class="line"></span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>C++ 输出的结果是100<br>而OC输出的结果是200，OC是真的覆盖…</p><p>另外，OC不支持运算符重载…</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>@try、@catch、@throw、@finally这些概念同C一样。</p><h1 id="分类和协议"><a href="#分类和协议" class="headerlink" title="分类和协议"></a>分类和协议</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>在Objective-C的设计中，一个主要的考虑即为大型代码框架的维护。<br>结构化编程的经验显示，改进代码的一种主要方法即为将其分解为更小的片段。<br>Objective-C借用并扩展了Smalltalk实现中的“分类”概念，用以帮助达到分解代码的目的。</p><p>分类中的方法是在运行时被加入类中的，这一特性允许程序员向现存的类中增加方法，而无需持有原有的代码，或是重新编译原有的类。<br>在运行时，分类中的方法与类原有的方法并无区别，其代码可以访问包括私有类成员变量在内的所有成员变量。</p><p>若分类声明了与类中原有方法同名的函数，则分类中的方法会被调用。因此分类不仅可以增加类的方法，也可以代替原有的方法。<br>这个特性可以用于修正原有代码中的错误，更可以从根本上改变程序中原有类的行为。<br>若两个分类中的方法同名，则被调用的方法是不可预测的。</p><p>举个例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Integer.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/Object.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">@interface Integer : Object &#123;</span><br><span class="line">@<span class="keyword">private</span> </span><br><span class="line">    <span class="keyword">int</span> integer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@property (assign, nonatomic) integer;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="comment">// Integer.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Integer.h"</span></span></span><br><span class="line"></span><br><span class="line">@implementation Integer</span><br><span class="line"></span><br><span class="line">@synthesize integer;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Arithmetic.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Integer.h"</span></span></span><br><span class="line"></span><br><span class="line">@<span class="function">interface <span class="title">Integer</span><span class="params">(Arithmetic)</span></span></span><br><span class="line">- (id) add: (Integer *) addend;</span><br><span class="line">- (id) sub: (Integer *) subtrahend;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arithmetic.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Arithmetic.h"</span></span></span><br><span class="line"></span><br><span class="line">@<span class="function">implementation <span class="title">Integer</span><span class="params">(Arithmetic)</span></span></span><br><span class="line">- (id) add: (Integer *) addend &#123;</span><br><span class="line">    self.integer = self.integer + addend.integer;</span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id) sub: (Integer *) subtrahend &#123;</span><br><span class="line">    self.integer = self.integer - subtrahend.integer;</span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Display.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Integer.h"</span></span></span><br><span class="line"></span><br><span class="line">@<span class="function">interface <span class="title">Integer</span><span class="params">(Display)</span></span></span><br><span class="line">- (id) showstars;</span><br><span class="line">- (id) showint;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="comment">// Display.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Display.h"</span></span></span><br><span class="line"></span><br><span class="line">@<span class="function">implementation <span class="title">Integer</span><span class="params">(Display)</span></span></span><br><span class="line">- (id) showstars &#123;</span><br><span class="line">    <span class="keyword">int</span> i, x = self.integer;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"*"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id) showint &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, self.integer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Integer.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Arithmetic.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Display.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Integer *num1 = [Integer <span class="keyword">new</span>], *num2 = [Integer <span class="keyword">new</span>];</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter an integer: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"></span><br><span class="line">    num1.integer = x;</span><br><span class="line">    [num1 showstars];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter an integer: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"></span><br><span class="line">    num2.integer = x;</span><br><span class="line">    [num2 showstars];</span><br><span class="line"></span><br><span class="line">    [num1 add:num2];</span><br><span class="line">    [num1 showint];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="类的扩展"><a href="#类的扩展" class="headerlink" title="类的扩展"></a>类的扩展</h2><p>有一种特殊的情况是创建一个未命名的分类，且在括号“（）”之间不指定名字。这种特殊的语法定义称为类的扩展。<br>定义一个像这样命名的分类时，可以通过定义额外的实例变量和属性来扩展类，这在有命名的分类中是不允许的。<br>未命名分类中声明的方法需要在主实现区域实现，而不是在分离的实现区域中实现。<br>未命名的分类是非常有用的，因为他们的方法都是私有的。如果需要写一个类，而且数据和方法仅供这个类本身使用，未命名分类比较合适。</p><p>通过使用分类添加新方法来扩展类不仅会影响这个类，同时也会影响他的所有子类。</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>协议是一组没有实现的方法列表，任何的类均可采纳协议并具体实现这组方法。<br>协议列出了一组方法，有些可以是选择实现，有些是必须实现。<br>定义一个协议很简单：只要使用@protocol指令，后面跟上你给出的协议名称。然后和处理接口部分一样，声明一些方法。<br>@end指令之前的所有方法声明都是协议的一部分。在@optional指令之后列出的所有方法都是可选的。</p><p>个人感觉类似于C++的虚基类…</p><p>举个栗子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@protocol Printable</span><br><span class="line">@optional</span><br><span class="line">    - (<span class="keyword">void</span>) print:(NSString)str;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><p>加了@optional关键字，一个类在implements这个协议时，便可以不实现print:方法。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@interface <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> :</span> NSObject &lt;Printable, Drawable&gt;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><p>一个类实现某些协议是写在Interface定义里面的。语法为：协议名用尖括号包裹，多个协议名用逗号隔开，协议写在父类的右边（如果没有父类就直接写在子类右边）。</p><p>可以使用conformsToProtocol:方法检查一个对象是否遵循某项协议。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id currentObject;</span><br><span class="line">...</span><br><span class="line">if ([currentObject conformsToProtocol: @protocol (Drawable)] == YES) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里使用的专用@protocol指令用于获取一个协议名称，并产生一个protocol对象，conformsToProtocol: 方法期望这个对象作为它的参数。</p><p>为了测试一个对象是否实现了可选的print方法，可以编写下列代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([currentObject respondsToSelector: @selector (print)] == YES) &#123;</span><br><span class="line">    [currentObject print];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>通过在类型名称之后的尖括号中添加协议名称，借助编译器来检查变量的一致性：<code>id &lt;Drawable&gt; currentObject;</code></p><h1 id="块"><a href="#块" class="headerlink" title="块"></a>块</h1><p>概念上，匿名函数，lambda，closure（或OC中的blocks）是一个东西。<br>详见：<span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9CaWdGZW5nL3AvNTIwNDg5OS5odG1s" title="http://www.cnblogs.com/BigFeng/p/5204899.html">浅析匿名函数、lambda表达式、闭包（closure）区别与作用<i class="fa fa-external-link"></i></span></p><p>块是以插入字符 <code>^</code> 开头为标识的。后面跟的一个括号表示块所需要的参数列表。<br>同样，也可以将这个块赋给一个变量。<br>举个栗子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">__block <span class="keyword">int</span> foo = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">void</span> (^printFoo)(<span class="keyword">void</span>) = ^(<span class="keyword">void</span>) &#123;</span><br><span class="line">                            foo = <span class="number">20</span>;</span><br><span class="line">                            NSLog(@<span class="string">"foo = %i"</span>, foo);</span><br><span class="line">                        &#125;;</span><br><span class="line"></span><br><span class="line">printFoo();</span><br></pre></td></tr></table></figure></div><p>如果要试图在块内部改变变量的值，需要在定义本地变量之前插入 __block 修改器。</p><h1 id="数字、字符串和集合"><a href="#数字、字符串和集合" class="headerlink" title="数字、字符串和集合"></a>数字、字符串和集合</h1><p>在Foundation框架包括大量的类、方法和函数。可以通过这条代码来导入：<code>#import &lt;Foundation/Foundation.h&gt;</code></p><p>里面的东西就相当于C++的标准库似的。使用的时候看看文档就好了。</p><h2 id="数字对象"><a href="#数字对象" class="headerlink" title="数字对象"></a>数字对象</h2><p>NSNumber类包含多个方法，可以使用初始值创建NSNumber对象。</p><p>NSNumber 的创建方法和检索方法：</p><table><thead><tr><th align="left">创建和初始化方法</th><th align="left">初始化实例方法</th><th align="left">检索实例方法</th></tr></thead><tbody><tr><td align="left">numberWithChar;</td><td align="left">initWithChar;</td><td align="left">charValue</td></tr><tr><td align="left">numberWithUnsignedChar;</td><td align="left">initWithUnsignedChar;</td><td align="left">unsignedCharValue</td></tr><tr><td align="left">numberWithShort;</td><td align="left">initWithShort;</td><td align="left">shortValue</td></tr><tr><td align="left">numberWithUnsignedShort;</td><td align="left">initWithUnsignedShort;</td><td align="left">unsignedShortValue</td></tr><tr><td align="left">numberWithInteger;</td><td align="left">initWithInteger;</td><td align="left">integerValue</td></tr><tr><td align="left">numberWithUnsignedInteger;</td><td align="left">initWithUnsignedInteger;</td><td align="left">unsignedIntegerValue</td></tr><tr><td align="left">numberWithInt;</td><td align="left">initWithInt;</td><td align="left">intValue</td></tr><tr><td align="left">numberWithUnsignedInt;</td><td align="left">initWithUnsignedInt;</td><td align="left">unsignedIntValue</td></tr><tr><td align="left">numberWithLong;</td><td align="left">initWithLong;</td><td align="left">longValue</td></tr><tr><td align="left">numberWithUnsignedLong;</td><td align="left">initWithUnsignedLong;</td><td align="left">unsignedLongValue</td></tr><tr><td align="left">numberWithLongLong;</td><td align="left">initWithLongLong;</td><td align="left">longLongValue</td></tr><tr><td align="left">numberWithUnsignedLongLong;</td><td align="left">initWithUnsignedLongLong;</td><td align="left">unsignedLongLongValue</td></tr><tr><td align="left">numberWithFloat;</td><td align="left">initWithFloat;</td><td align="left">floatValue</td></tr><tr><td align="left">numberWithDouble;</td><td align="left">initWithDouble;</td><td align="left">doubleValue</td></tr><tr><td align="left">numberWithBool;</td><td align="left">initWithBool;</td><td align="left">boolValue</td></tr></tbody></table><p>OC是允许通过@表达式创建数字对象的。</p><p>举栗子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        NSNumber    *myNumber, *floatNumber, *intNumber;</span><br><span class="line">        NSInteger   myInt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// integer 整值</span></span><br><span class="line"></span><br><span class="line">        intNumber = [NSNumber numberWithInteger: <span class="number">100</span>];</span><br><span class="line">        myInt = [intNumber integerValue];</span><br><span class="line">        NSLog(@<span class="string">"%li"</span>, (<span class="keyword">long</span>)myInt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// long 整值</span></span><br><span class="line"></span><br><span class="line">        myNumber = [NSNumber numberWithLong: <span class="number">0xabcdef</span>];</span><br><span class="line">        NSLog(@<span class="string">"%lx"</span>, [myNumber longValue]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// char 整值</span></span><br><span class="line"></span><br><span class="line">        myNumber = [NSNumber numberWithChar: <span class="string">'X'</span>];</span><br><span class="line">        NSLog(@<span class="string">"%c"</span>, [myNumber charValue]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// float 整值</span></span><br><span class="line"></span><br><span class="line">        floatNumber = [NSNumber numberWithFloat: <span class="number">100.00</span>];</span><br><span class="line">        NSLog(@<span class="string">"%g"</span>, [floatNumber floatValue]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// double</span></span><br><span class="line"></span><br><span class="line">        myNumber = [NSNumber numberWithDouble: <span class="number">12345e+15</span>];</span><br><span class="line">        NSLog(@<span class="string">"%lg"</span>, [myNumber doubleValue]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发生错误</span></span><br><span class="line"></span><br><span class="line">        NSLog(@<span class="string">"%li"</span>, (<span class="keyword">long</span>)[myNumber integerValue]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证两个 Number 是否相等</span></span><br><span class="line">        <span class="keyword">if</span> ([intNumber isEqualToNumber: floatNumber] == YES)</span><br><span class="line">            NSLog(@<span class="string">"Numbers are equal"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h2><p>@”Hello World!” 就是一个字符串对象。即NSString类的对象。<br>特殊情况下，它属于NSConstantString类的常量字符串对象。NSConstantString类是字符串对象NSString类的子类</p><h3 id="description-方法"><a href="#description-方法" class="headerlink" title="description 方法"></a>description 方法</h3><p>可以使用格式化字符%@显示数组、字典和集合的全部内容。<br>事实上，通过覆盖集成的description方法，还可以使用这些格式字符显示你自己的类对象。<br>如果不覆盖方法，NSLog仅仅显示类名和该对象在内存中的地址，这是从NSObject类继承的description方法的默认实现。</p><p>举个栗子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@interface Fraction : NSObject</span><br><span class="line"></span><br><span class="line">@ property <span class="keyword">int</span> numberator, denominator;</span><br><span class="line">- (<span class="keyword">void</span>) setNumerator: (<span class="keyword">int</span>)numerator andDenominator: (<span class="keyword">int</span>) denominator;</span><br><span class="line">- (NSString *) description;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Fraction</span><br><span class="line">- (<span class="keyword">void</span>) setNumerator: (<span class="keyword">int</span>)numerator andDenominator: (<span class="keyword">int</span>)denominator &#123;</span><br><span class="line">    self.numerator = numerator;</span><br><span class="line">    self.denominator = denominator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSString *) description &#123;</span><br><span class="line">    <span class="keyword">return</span> [NSString stringWithFormat:@<span class="string">"%i/%i"</span>, self.numerator, self.denominator];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        Fraction *f = [Fraction <span class="keyword">new</span>];</span><br><span class="line">        [f setNumerator:<span class="number">1</span> andDenominator:<span class="number">2</span>];</span><br><span class="line">        NSLog(@<span class="string">"%@"</span>, f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>结果：<code>2016-06-28 16:26:08.873 Learn[18105:485920] 1/2</code></p><h3 id="可变对象与不可变对象"><a href="#可变对象与不可变对象" class="headerlink" title="可变对象与不可变对象"></a>可变对象与不可变对象</h3><p>@”Hello World!”<br>创建字符串对象时，会创建一个内容不可更改的对象，称为不可变对象，可以使用NSString类处理不可变字符串。<br>若要需要经常处理字符串并更改字符串中的字符，可以使用NSMutableString类处理</p><h2 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h2><p>可变数组：NSArray<br>不可变数组：NSMutableArray</p><p>挺简单的…使用的时候看看文档就行了..</p><p>这里就说一下排序：<br>利用NSArray数组排序的方法很容易实现。这里以NSMutableArray为例子：<br>在NSMutableArray类中sortUsingSelegtor: 的方法很容易实现。<br>举个栗子:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (NSComparisonResult) compareNames: (id) element &#123;</span><br><span class="line">    <span class="keyword">return</span> [name compare: [element name]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) sort &#123;</span><br><span class="line">    [book sortUsingSelector: @selector (compareNames)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>sortUsingSelector: 方法会使用selector比较两个元素。<br>由于数组可以包含任何类型的对象，所以要实现一般的排序方法，唯一途径就是由你来判断数组中的元素是否有序，为此，你必须添加一个方法比较数组中的两个元素。</p><p>这个方法返回的结果是NSComparisonResult类型的值。<br>如果希望排序方法将第一个元素放在第二个元素之前，那么方法的返回值应是NSOrderedAscending。<br>如果认为这两个元素相等，那么返回NSOrderedSame。<br>如果排序后的数组中，第一个元素应该在第二个元素之后，那么返回NSOrderedDescending。</p><p>也阔以使用块排序：<br>SortUsingComparator: (NSComparator) block;<br>NSComparator 作为typedef定义在系统头文件中：<br>Typedef NSComparisonResult (^NSComparator) (id obje1, id obj2);<br>NSComparator 是一个区块，使用两个对象作为参数，并返回NSComparisonResult类型的值。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) sort &#123;</span><br><span class="line">    [book SortUsingComparator:</span><br><span class="line">        ^(id obj1, id obj2) &#123;</span><br><span class="line">            <span class="keyword">return</span> [[obj1 name] compare: [obj2 name]];</span><br><span class="line">        &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="NSValue-类"><a href="#NSValue-类" class="headerlink" title="NSValue 类"></a>NSValue 类</h3><p>像数组这样的Foundation集合只能存储对象，而有些类型是源于C语言的一种数据类型，比如结构，它不是对象。<br>我们可以利用 NSValue 把结构包装（wrapping）成对象。逆向的处理是从对象中解出基本类型，简称展开（unwrapping）。</p><p>NSValue 包装和展开方法</p><table><thead><tr><th align="left">Typedef 数据类型</th><th align="left">描述</th><th align="left">包装方法</th><th align="left">展开方法</th></tr></thead><tbody><tr><td align="left">CGPoint</td><td align="left">x 和 y 值组成的点</td><td align="left">valueWithPoint;</td><td align="left">pointValue</td></tr><tr><td align="left">CGSize</td><td align="left">宽和高组成的尺寸</td><td align="left">valueWithSize;</td><td align="left">sizeValue</td></tr><tr><td align="left">CGRect</td><td align="left">矩形包含原点和尺寸</td><td align="left">valueWithRect;</td><td align="left">rectValue</td></tr><tr><td align="left">NSRange</td><td align="left">描述位置和大小的范围</td><td align="left">valueWithRange;</td><td align="left">rangeValue</td></tr></tbody></table><h2 id="词典对象"><a href="#词典对象" class="headerlink" title="词典对象"></a>词典对象</h2><p>词典是由键-对象对儿组成的数据集合。概念和C++里面的std::map一样。<br>词典中的键必须是单值的，通常他们是字符串，但也可以是其他对象类型，和键关联的值可以使任何对象类型，但不能是nil。</p><p>不可变字典：NSDictionary<br>可变字典：NSMutableDictionary</p><p><code>[NSMutableDictionary dictionary];</code> 创建一个空字典</p><p>其他也挺简单的，使用上也和map差不多。看看文档就好了~</p><h2 id="集合对象"><a href="#集合对象" class="headerlink" title="集合对象"></a>集合对象</h2><p>set是一组单值对象集合，它可以是可变的，也可以是不可变的。<br>操作包括：搜索、添加、删除集合中的成员（仅可变集合），比较两个集合，计算两个集合的交集和并集等。</p><p>也是和C++里面的std::set差不多</p><p>Foundation框架同样提供了一个名为NSCountedSet的类，这种集合同一对象可以出现多次，<br>然而并非在集合众存在多次这个对象，而是维护一个计数值。</p><h1 id="使用文件"><a href="#使用文件" class="headerlink" title="使用文件"></a>使用文件</h1><h2 id="管理文件和目录：NSFileManager"><a href="#管理文件和目录：NSFileManager" class="headerlink" title="管理文件和目录：NSFileManager"></a>管理文件和目录：NSFileManager</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        NSString        *fName = @<span class="string">"~/Documents/testfile"</span>;</span><br><span class="line">        NSFileManager   *fm;</span><br><span class="line">        NSDictionary    *attr;</span><br><span class="line">        NSError         *err;</span><br><span class="line"></span><br><span class="line">        fName = [fName stringByExpandingTildeInPath];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要创建文件管理器的实例</span></span><br><span class="line">        fm = [NSFileManager defaultManager];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先确认文件存在</span></span><br><span class="line">        <span class="keyword">if</span> ([fm fileExistsAtPath: fName] == NO) &#123;</span><br><span class="line">            NSLog(@<span class="string">"File doesn't exist!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个副本</span></span><br><span class="line">        <span class="comment">// 这里要注意下比较坑，如果同名文件存在，是会copy失败的</span></span><br><span class="line">        <span class="comment">// 而且返回的失败信息是 testfile 文件不存在....</span></span><br><span class="line">        <span class="keyword">if</span> ([fm copyItemAtPath: fName toPath: @<span class="string">"newfile"</span> error: &amp;err] == NO) &#123;</span><br><span class="line">            NSLog(@<span class="string">"File Copy failed!, %@"</span>, err);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试两个文件是否一致</span></span><br><span class="line">        <span class="keyword">if</span> ([fm contentsEqualAtPath: fName andPath: @<span class="string">"newfile"</span>] == NO) &#123;</span><br><span class="line">            NSLog(@<span class="string">"Files are not equal!"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重命名副本</span></span><br><span class="line">        <span class="keyword">if</span> ([fm moveItemAtPath:@<span class="string">"newfile"</span> toPath:@<span class="string">"newfile2"</span> error:&amp;err] == NO) &#123;</span><br><span class="line">            NSLog(@<span class="string">"File rename failed"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 newfile2 的大小</span></span><br><span class="line">        <span class="keyword">if</span> ((attr = [fm attributesOfItemAtPath:@<span class="string">"newfile2"</span> error:&amp;err]) == nil) &#123;</span><br><span class="line">            NSLog(@<span class="string">"Couldn't get file attributes!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        NSLog(@<span class="string">"File size is %llu bytes"</span>, [[attr objectForKey:NSFileSize] unsignedLongLongValue]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后删除原始文件</span></span><br><span class="line">        <span class="keyword">if</span> ([fm removeItemAtPath:fName error:&amp;err] == NO) &#123;</span><br><span class="line">            NSLog(@<span class="string">"file removal failed"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        NSLog(@<span class="string">"All operations were successful"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示新创建的文件内容</span></span><br><span class="line"></span><br><span class="line">        NSLog(@<span class="string">"%@"</span>, [NSString stringWithContentsOfFile:@<span class="string">"newfile2"</span> encoding:NSUTF8StringEncoding error:&amp;err]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="使用-NSData-类"><a href="#使用-NSData-类" class="headerlink" title="使用 NSData 类"></a>使用 NSData 类</h3><p>使用文件时，需要频繁的将数据读入到一个缓冲区，Foundation的NSData类提供了一种简单的方式，它用来设置缓冲区，将文件的内容读入缓冲区，或将缓冲区的内容写到一个文件。<br>据说，据说哈，32位应用的NSData缓冲区最多可存储2G的数据。64位的最多可存储8EB的数据…</p><p>举例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    @autorelease &#123;</span><br><span class="line">        NSString        *fName = @<span class="string">"~/Documents/testfile"</span>;</span><br><span class="line">        NSFileManager   *fm;</span><br><span class="line">        NSData          *fileData;</span><br><span class="line"></span><br><span class="line">        fName = [fName stringByExpandingTildeInPath];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要创建文件管理器的实例</span></span><br><span class="line">        fm = [NSFileManager defaultManager];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先确认文件存在</span></span><br><span class="line">        <span class="keyword">if</span> ([fm fileExistsAtPath: fName] == NO) &#123;</span><br><span class="line">            NSLog(@<span class="string">"File doesn't exist!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取文件</span></span><br><span class="line">        fileData = [fm contentsAtPath:fName];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fileData == nil) &#123;</span><br><span class="line">            NSLog(@<span class="string">"File read failed!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据写入 newfile3</span></span><br><span class="line">        <span class="keyword">if</span> ([fm createFileAtPath:@<span class="string">"newfile3"</span> contents:fileData attributes:nil] == NO) &#123;</span><br><span class="line">            NSLog(@<span class="string">"couldn't create the copy!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        NSLog(@<span class="string">"File copy was successful!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="枚举目录中的内容"><a href="#枚举目录中的内容" class="headerlink" title="枚举目录中的内容"></a>枚举目录中的内容</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    @autorelease &#123;</span><br><span class="line">        NSString        *fName = @<span class="string">"~/Documents/testfile"</span>;</span><br><span class="line">        NSFileManager   *fm;</span><br><span class="line">        NSDirectoryEnumerator *dirEnum;</span><br><span class="line">        NSArray         *dirArray;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把短路径转换成全路径</span></span><br><span class="line">        fName = [fName stringByExpandingTildeInPath];</span><br><span class="line"></span><br><span class="line">        fm = [NSFileManager defaultManager];</span><br><span class="line"></span><br><span class="line">        dirEnum = [fm enumeratorAtPath:path];</span><br><span class="line"></span><br><span class="line">        NSLog(@<span class="string">"contents of %@"</span>, path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((path = [dirEnum nextObject]) != nil) &#123;</span><br><span class="line">            NSLog(@<span class="string">"%@"</span>, path);</span><br><span class="line">        &#125;</span><br><span class="line">        NSLog(@<span class="string">"-----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 另一种遍历方法</span></span><br><span class="line">        dirArray = [fm contentsOfDirectoryAtPath:[fm currentDirectoryPath] error:<span class="literal">NULL</span>];</span><br><span class="line">        NSLog(@<span class="string">"contents using contentsOfDirectoryAtPath:error:"</span>);</span><br><span class="line">        <span class="keyword">for</span> (path in dirArray) &#123;</span><br><span class="line">            NSLog(@<span class="string">"%@"</span>, path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这两种枚举技术的不同在于：<br>enumeratorAtPath: 方法列出了目录中的内容，包含子目录<br>contentsOfDirectoryAtPath:error: 方法不会列出子目录内容</p><h2 id="使用路径：NSPathUtilities-h"><a href="#使用路径：NSPathUtilities-h" class="headerlink" title="使用路径：NSPathUtilities.h"></a>使用路径：NSPathUtilities.h</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    @autorelease &#123;</span><br><span class="line">        NSString        *fName = @<span class="string">"path.m"</span>;</span><br><span class="line">        NSFileManager   *fm= [NSFileManager defaultManager];</span><br><span class="line">        NSString        *path, *tempdir, *extension, *homedir, *fullpath;</span><br><span class="line"></span><br><span class="line">        NSArray         *components;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取临时目录</span></span><br><span class="line">        tempdir = NSTemporaryDirectory();</span><br><span class="line">        NSLog(@<span class="string">"tempoary directory is %@"</span>, tempdir);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从当前目录中提取基本目录</span></span><br><span class="line">        path = [fm currentDirectoryPath];</span><br><span class="line">        NSLog(@<span class="string">"Base dir is %@"</span>, [path lastPathComponent]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 fName 在当前目录的完整路径</span></span><br><span class="line">        fullpath = [path stringByAppendingPathComponent:fName];</span><br><span class="line">        NSLog(@<span class="string">"fullpath to %@ is %@"</span>, fName, fullpath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件扩展名</span></span><br><span class="line">        extension = [fullpath pathExtension];</span><br><span class="line">        NSLog(@<span class="string">"extension for %@ is %@"</span>, fullpath, extension);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取用户主目录</span></span><br><span class="line">        homedir = NSHomeDirectory();</span><br><span class="line">        NSLog(@<span class="string">"Your home directory is %@"</span>, homedir);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拆分路径为各个组成部分</span></span><br><span class="line">        components = [homedir pathComponents];</span><br><span class="line">        <span class="keyword">for</span> (path in components) &#123;</span><br><span class="line">            NSLog(@<span class="string">"%@"</span>, path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Foundation框架的NSSearchPathForDirectoriesInDomains 函数，用于获取系统的特殊目录，如 Application 和 Documents 目录。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSArray *dirList = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);</span><br><span class="line">NSString *docDir = dirList[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></div><p>例子就是获取一个Documents目录。<br>函数的第二个参数可以是多个值，用于指定需要列出的目录，如用户的，系统的或者所有目录。<br>最后一个参数用于指定是否展开路径中的~字符</p><p>NSSearchPathForDirectoriesInDomains返回一组路径的数组，如果仅是查找用户的目录，这个数组只包含一个元素，<br>如果第二个参数指定多个值，该数组会包含多个元素。</p><p>当为Ios编写程序时，NSSearchPathForDirectoriesInDomains函数第二个参数应是NSUserDoMainMask,<br>并希望得到一个包含单个路径的数组作为返回。</p><p>常用的 iOS 目录</p><table><thead><tr><th align="left">目录</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">Documents (NSDocumentDirectory)</td><td align="left">用于写入应用相关数据文件的目录。在 iOS 中写入这里的文件能够与 iTunes 共享并访问，存储在这里的文件会自动备份到 iCloud</td></tr><tr><td align="left">Library/Caches (NSCachesDirectory)</td><td align="left">用于写入应用支持文件的目录，保存应用程序再次启动需要的信息。iTunes 不会对这个目录的内容进行备份</td></tr><tr><td align="left">tmp (use NSTemporaryDirectory())</td><td align="left">这个目录用于存放临时文件，在程序终止时需要移除这些文件。当应用程序不再需要这些临时文件时，应该将其从这个目录删除</td></tr><tr><td align="left">Library/Preferences</td><td align="left">这个目录包含应用程序的偏好设置文件。使用 NSUserDefaults 类进行偏好设置文件的创建、读取和修改</td></tr></tbody></table><h3 id="使用-NSProcessInfo-类"><a href="#使用-NSProcessInfo-类" class="headerlink" title="使用 NSProcessInfo 类"></a>使用 NSProcessInfo 类</h3><p>NSProcessInfo 类方法</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+(NSProcessInfo *) processInfo</td><td align="left">返回当前进程信息</td></tr><tr><td align="left">-(NSArray *) arguments</td><td align="left">以 NSString 对象数组的形式返回当前进程参数</td></tr><tr><td align="left">-(NSDictionary *) environment</td><td align="left">返回变量/值对字典，以描述当前的环境变量，比如 PATH 和 HOME 及其值</td></tr><tr><td align="left">-(int) processIdentifier</td><td align="left">返回进程标识符，它是操作系统赋予进程的唯一数字，用于标识每个正在运行的进程</td></tr><tr><td align="left">-(NSString *) processName</td><td align="left">返回当前正在执行的进程名称</td></tr><tr><td align="left">-(NSString *) globallyUniqueString</td><td align="left">每次调用这个方法时，都返回不同的单值字符串，可以用这个字符串生成单值临时文件名</td></tr><tr><td align="left">-(NSString *) hostname</td><td align="left">返回主机系统名称</td></tr><tr><td align="left">-(NSUInteger) operationsSystem</td><td align="left">返回表示操作系统的数字</td></tr><tr><td align="left">-(NSString *) operationsSystemName</td><td align="left">返回操作系统名称</td></tr><tr><td align="left">-(NSString *) operationsSystemVersionString</td><td align="left">返回操作系统的当前版本</td></tr><tr><td align="left">-(void) setProcessName: (NSString *) name</td><td align="left">将当前进程名称设置为 name，应该谨慎的使用这个方法，因为关于进程名称存在一些假设，比如用户默认设置</td></tr></tbody></table><h1 id="深拷贝，实现-协议"><a href="#深拷贝，实现-协议" class="headerlink" title="深拷贝，实现  协议"></a>深拷贝，实现 <nscoping> 协议</nscoping></h1><p>如果我们要实现深拷贝，就要根据<nscoping>协议实现其中一两个方法。<br>实现<nscoping>协议是，类必须实现copyWithZone: 方法来响应copy消息（这条copy消息仅将一条带有nil参数的copyWithZone:消息发送给你的类）。<br>如果要想区分可变不可变副本，还要根据<nsmutablecoping>协议实现mutableCopyWithZone: 方法。<br>产生对象的可变副本并不要求被复制的对象本身也是可变的（反之亦然）。</nsmutablecoping></nscoping></nscoping></p><p>举例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">- (id) copyWithZone: (NSZone* ) zone &#123;</span><br><span class="line">    <span class="comment">// 如果类产生子类，那么这个方法将被继承</span></span><br><span class="line">    <span class="comment">// 这种情况下，应该使用 [self class]</span></span><br><span class="line">    <span class="comment">// 即从该类分配一个新对象，而不是 copy 的接收者</span></span><br><span class="line">    Fraction *newFract = [[[self class] allocWithZone: zone] init];</span><br><span class="line"></span><br><span class="line">    [newFract setTo: numerator over: denominator];</span><br><span class="line">    <span class="keyword">return</span> newFract;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        Fraction *f1 = [Fraction <span class="keyword">new</span>];</span><br><span class="line">        Fraction *f2;</span><br><span class="line"></span><br><span class="line">        [f1 setTo:<span class="number">2</span> over:<span class="number">5</span>];</span><br><span class="line">        f2 = [f1 copy];</span><br><span class="line"></span><br><span class="line">        [f2 setTo:<span class="number">1</span> over:<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        [f1 print];</span><br><span class="line">        [f2 print];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="Cocoa-和-Cocoa-Touch-简介"><a href="#Cocoa-和-Cocoa-Touch-简介" class="headerlink" title="Cocoa 和 Cocoa Touch 简介"></a>Cocoa 和 Cocoa Touch 简介</h1><p>Cocoa 是一种为Mac OS X应用程序提供了丰富用户体验的框架，实际上由3个框架组成：<br>Foundation框架、便于使用数据库存储和管理数据的Core Data框架，以及Application Kit (AppKit)框架。<br>AppKit 框架提供了与窗口、按钮、列表等相关的类。</p><h2 id="框架层"><a href="#框架层" class="headerlink" title="框架层"></a>框架层</h2><p><img src="%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.jpg" alt></p><p>内核以设备驱动程序的形式提供与硬件的底层通信。<br>它负责管理系统资源，包括调度需要执行的程序、管理内存和电源，以及执行基本的I/O操作。</p><p>核心服务提供的支持比它上面层次更加底层或更加“核心”。<br>例如提供对集合、网络、调试、文件管理、文件夹、内存管理、线程、时间和电源的管理。</p><p>应用层包含打印和图形渲染的支持，包括Quartz、OpenGL、和 Quicktime。</p><p>Cocoa层位于应用程序层之下。Cocoa包括Foundation、Core Data 和 AppKit框架。<br>Foundation框架提供处理集合、字符串、内存管理、文件系统、存档等相关的类。<br>AppKit框架提供管理视图、窗口、文档和多用户界面相关的类。</p><h2 id="Cocoa-Touch"><a href="#Cocoa-Touch" class="headerlink" title="Cocoa Touch"></a>Cocoa Touch</h2><p>Cocoa框架应用于Mac OS X桌面与笔记本电脑应用程序的开发，而Cocoa Touch框架应用于iOS设备上应用程序的开发。</p><p>Cocoa 和 Cocoa Touch 都有 Foundation 和 Core Data 框架。然而在Cocoa Touch下，UIKit代替了AppKit框架。<br>提供了很多相同类型对象的自持。比如窗口、视图、按钮、文本域等。<br>另外Cocoa Touch 还提供使用陀螺仪和加速器的类和触摸式界面。去掉了不需要的类。</p><h1 id="引用参考"><a href="#引用参考" class="headerlink" title="引用参考"></a>引用参考</h1><blockquote><p>《Objective-C程序设计，第六版》<br><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvT2JqZWN0aXZlLUM=" title="https://zh.wikipedia.org/wiki/Objective-C">《Objective-C维基百科》<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Fpbmp4LzMwbWluX2d1aWRlcy9ibG9iL21hc3Rlci9pb3MubWQ=" title="https://github.com/qinjx/30min_guides/blob/master/ios.md">《iOS开发60分钟入门》<i class="fa fa-external-link"></i></span>  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前学习 Objective-C 时整理的笔记，文章内错误之处还望指点…&lt;/p&gt;
&lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @autoreleasepool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// insert code here...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;Hello, World&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Language" scheme="https://mirokaku.github.io/Blog/categories/Language/"/>
    
    
      <category term="Objective-C" scheme="https://mirokaku.github.io/Blog/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>2016 阅读书单</title>
    <link href="https://mirokaku.github.io/Blog/2016/2016-books/"/>
    <id>https://mirokaku.github.io/Blog/2016/2016-books/</id>
    <published>2016-08-21T06:29:15.000Z</published>
    <updated>2019-05-16T08:47:16.532Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录的都是我2016年阅读的书籍，但是各种未成书的文档就不在这里记录了…</p><a id="more"></a><h1 id="技术类"><a href="#技术类" class="headerlink" title="技术类"></a>技术类</h1><ul><li>《深入理解C++11：C++11新特性解析与应用》 [读完]</li></ul><p>2016.04</p><p><img src="https://img3.doubanio.com/lpic/s26689304.jpg" alt="深入理解C++11"></p><p>适合有C++基础上，学习C++11的新特性。这本书系统的讲解了C++11新标准中的所有语言新特性、新标准库特性、对原有特性的改进，以及如何应用这些新特性。</p><hr><ul><li>《Objective-C程序设计6》 [读完]</li></ul><p>2016.06</p><p><img src="https://img1.doubanio.com/lpic/s28266087.jpg" alt="Objective-C程序设计6"></p><p>本来公司需要iOS，可是学完就改了需求，不需要了….三天即可看完..了解下与C++之间的区别，超级简单..</p><hr><ul><li>《iOS开发指南：从零基础到AppStore上架3》 [读完]</li></ul><p>2016.06</p><p><img src="https://img3.doubanio.com/lpic/s28329236.jpg" alt="iOS开发指南"></p><p>也是iOS学习一系列的..4天看完，能够走一遍iOS基本开发流程…<br>另外，学习iOS建议好好看一遍官方文档..</p><hr><ul><li>《图解HTTP》 [读完]</li></ul><p>2016.07</p><p><img src="https://img3.doubanio.com/lpic/s27283822.jpg" alt="图解HTTP"></p><p>为了写爬虫学的..半天就看完，非常简单。能够了解HTTP基本概念和规范，适合初学了解。</p><hr><ul><li>《Python Cookbook3》 [读完]</li></ul><p>2016.08</p><p><img src="https://img3.doubanio.com/lpic/s28063681.jpg" alt="Python Cookbook3"></p><p>非常实用的一本书，里面讲了各种问题场景的解决方案，实乃编码必备好书。在写Python的时候遇到的很多问题都是在这里找到的方案。</p><hr><ul><li>《编写高质量代码：改善Python程序的91个建议》 [读完]</li></ul><p>2016.08</p><p><img src="https://img3.doubanio.com/lpic/s27308066.jpg" alt="编写高质量代码：改善Python程序的91个建议"></p><p>作为有强迫症的人，一定要看..教你如何写更 Pythonic 的代码，另外还建议阅读 PEP8</p><hr><ul><li>《C++并发编程实战》 [读完]</li></ul><p>2016.09</p><p><img src="https://img1.doubanio.com/lpic/s28077549.jpg" alt="C++并发编程实战"></p><p>听说，翻译的不好。所以建议读英文版。或者GitBook有第三方翻译的版本。<br>这本书是基于 C++11 新标准的并发和原子库的内容。可以学习新标准库的使用，以及在使用过程中需要注意的地方。<br>这是一本神书..</p><hr><ul><li>《STL 源码剖析》 [读完]</li></ul><p>2016.09</p><p><img src="https://img3.doubanio.com/lpic/s1092076.jpg" alt="STL 源码剖析"></p><p>虽然书听老的，但是里面的设计思想不会过时，不会影响对 STL 的理解。<br>我看这本书主要就是因为前两天挖的坑..写一套 内核版STL..<br>干巴得~</p><hr><h1 id="非技术类"><a href="#非技术类" class="headerlink" title="非技术类"></a>非技术类</h1><ul><li>《三体》 [读完]</li></ul><p>2016.01</p><p><img src="https://img3.doubanio.com/lpic/s28357056.jpg" alt="三体"></p><p>非常好看的一套硬科幻小说，里面涉及到很多物理、历史、数学、哲学的知识，而且许多概念都让我细思极恐..比如黑暗森林。</p><hr><ul><li>《上帝在掷骰子吗：量子物理史话》 [读完]</li></ul><p>2016.05</p><p><img src="https://img3.doubanio.com/lpic/s6475450.jpg" alt="上帝在掷骰子吗"></p><p>非常好看的科普类书籍，尤其是对于我这种没上过学而又对物理数学感兴趣的人。这本书能够让你了解物理学的发展历史，里面有很多有趣的物理概念。</p><hr><ul><li>《从0到1：开启商业与未来的秘密》 [读完]</li></ul><p>2016.03</p><p><img src="https://img3.doubanio.com/lpic/s28012945.jpg" alt="从0到1"></p><p>看忘了…</p><hr><ul><li>《人类简史：从动物到上帝》 [读完]</li></ul><p>2016.04</p><p><img src="https://img3.doubanio.com/lpic/s27814883.jpg" alt="人类简史"></p><blockquote><p>物种的繁衍和发展从来不关注个体的幸福感.</p></blockquote><p>这不是一本简单的历史书，作者从不同的视角来审视人类发展的过程，以及人类所产生的影响，不止如此，里面还有很多很多有趣的东西，非常值得阅读！</p><hr><ul><li>《北京折叠》 [读完]<br>~</li></ul><p><img src="%E5%8C%97%E4%BA%AC%E6%8A%98%E5%8F%A0.jpg" alt="北京折叠"></p><p>仅仅看了一段话，就让我非常想阅读它..</p><blockquote><p>未来的穷人连被剥削的价值都没有</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录的都是我2016年阅读的书籍，但是各种未成书的文档就不在这里记录了…&lt;/p&gt;
    
    </summary>
    
      <category term="Books" scheme="https://mirokaku.github.io/Blog/categories/Books/"/>
    
    
      <category term="Books" scheme="https://mirokaku.github.io/Blog/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>《Writing Solid Python Code》 Notes</title>
    <link href="https://mirokaku.github.io/Blog/2016/Writing-Solid-Python-Code-Notes/"/>
    <id>https://mirokaku.github.io/Blog/2016/Writing-Solid-Python-Code-Notes/</id>
    <published>2016-08-02T01:44:56.000Z</published>
    <updated>2017-05-12T03:59:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《编写高质量代码：改善-Python-程序的-91-个建议》-学习笔记"><a href="#《编写高质量代码：改善-Python-程序的-91-个建议》-学习笔记" class="headerlink" title="《编写高质量代码：改善 Python 程序的 91 个建议》 学习笔记"></a>《编写高质量代码：改善 Python 程序的 91 个建议》 学习笔记</h1><p>之前自己学了很多次 Python，由于用不到，所以总是学完就忘掉了。<br>刚好最近工作需要用到 Python，就借此机会好好学习了一番。<br>Pyhton 的各种特性和风格让我甚是喜欢。不过我总是感觉自己写的代码不是那么漂亮，不够 Pythonic。<br>所以我想通过学习一些经典建议来让我有个思路。</p><a id="more"></a><h2 id="建议-1：理解-Pythonic-概念"><a href="#建议-1：理解-Pythonic-概念" class="headerlink" title="建议 1：理解 Pythonic 概念"></a>建议 1：理解 Pythonic 概念</h2><p>对于 Pythonic 的概念，大家心中的指南就是 Tim Peters 的 《The Zen of Python》（Python 之禅）。<br>下面几点来自其中的内容：</p><ul><li>美胜丑，显胜隐，简胜杂，平胜陡，疏胜密。</li><li>找到简单问题的一个方法，最好是唯一的方法（正确的解决之道）。</li><li>难以解释的实现，源自不好的主意；如有非常棒的主意，它的实现肯定易于解释。</li></ul><p>代码风格建议参考 PEP8 和 <span class="exturl" data-url="aHR0cDovL3poLWdvb2dsZS1zdHlsZWd1aWRlLnJlYWR0aGVkb2NzLmlvL2VuL2xhdGVzdC9nb29nbGUtcHl0aG9uLXN0eWxlZ3VpZGUvY29udGVudHMv" title="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/">Python 风格指南<i class="fa fa-external-link"></i></span><br>比如：</p><ul><li>包和模块的命名采用小写、单数形式，而且短小。</li><li>包通常仅作为命名空间，如只包含空的 <code>__init__.py</code> 文件</li></ul><h2 id="建议-2：编写-Pythonic-代码"><a href="#建议-2：编写-Pythonic-代码" class="headerlink" title="建议 2：编写 Pythonic 代码"></a>建议 2：编写 Pythonic 代码</h2><ol><li>要避免劣化代码<ul><li>避免只用大小写来区分不同的对象 </li><li>避免使用容易引起混淆的名称<br>比如，重复使用已经存在于上下文中的变量名来表示不同的类型；<br>误用了内建名称来表示其他含义的名称而使之在当前命名空间被屏蔽；<br>没有构建新的数据类型的情况下使用类似于 element、list、dict等作为变量名；<br>使用o、l、等作为变量名。</li><li>不要害怕过长的变量名，可读性更重要</li></ul></li><li>深入认识 Python 有助于编写 Pythonic 代码<ul><li>全面掌握 Python 提供给我们的所有特性，包括语言特性和库特性。</li><li>学习每个 Python 新版本提供的新特性，使用 Python 推荐的惯用法来完成任务</li><li>深入学习业界公认的比较 Pythonic 的代码，比如 Flask、gevent 和 requests 等。</li></ul></li><li>使用工具来达到检查和约束，比如我个人使用 Pycharm IDE 来写 Python，对代码风格的要求挺严格的…</li></ol><h2 id="建议-3：理解-Python-与-C-语言的不同之处"><a href="#建议-3：理解-Python-与-C-语言的不同之处" class="headerlink" title="建议 3：理解 Python 与 C 语言的不同之处"></a>建议 3：理解 Python 与 C 语言的不同之处</h2><p>我们都知道，Python 底层是用 C 语言实现的，但切忌用 C 语言的思维和风格来编写 Python 代码。尤其重要的是，不要使用之前的编程思想。</p><ol><li>“缩进”与“{}”<br>与 C、C++、Java 等语言使用花括号来分隔代码段不同，Python 中使用严格的代码缩进方式分隔代码块。<br>另外，建议 Tab 替换成 4 个空格，不要混用 Tab 键和空格。</li><li>‘ 与 “<br>C 语言中单引号 <code>&#39;</code> 与双引号 <code>&quot;</code> 由严格的区别，单引号代表一个字符，它实际对应于编译器所采用的字符集中的一个整数值。而双引号则表示字符串，默认以 <code>\0</code> 结尾。<br>但是在 Python 中，单引号与双引号没有明显区别。</li><li>三元操作符 “?:”<br>三元操作符是 if…else 的简写方法，语法形式为 C ? X: Y，而在 Python 中的等价形式为 X if C else Y</li><li>switch…case<br>Python 中没有像 C 语言那样的 switch…case 分支语句。不过在 Python 中有很多替代的解决方法：</li></ol><p>C</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(n) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You typed zero.\n"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You are in top.\n"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"n is an even number.\n"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Only single-digit numbers are allowed.\n"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Python</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"You typed zero."</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"You are in top."</span>)</span><br><span class="line"><span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">"n is an even number."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Only single-digit numbers are allowed.)</span></span><br></pre></td></tr></table></figure></div><p>或者</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="number">0</span>: <span class="string">"You typed zero."</span>,</span><br><span class="line">        <span class="number">1</span>: <span class="string">"You are in top."</span>,</span><br><span class="line">        <span class="number">2</span>: <span class="string">"n is an even number."</span></span><br><span class="line">    &#125;.get(n, <span class="string">"Only single-digit numbers are allowed."</span>)</span><br></pre></td></tr></table></figure></div><p>Python 和其他语言的差异远不止这些。但总归一句话：不要被其他语言的思维和习惯困扰，掌握 Python 的这些和思维方式才是硬道理。</p><h2 id="建议-4：在代码中适当添加注释"><a href="#建议-4：在代码中适当添加注释" class="headerlink" title="建议 4：在代码中适当添加注释"></a>建议 4：在代码中适当添加注释</h2><p>Python 中有三种形式的代码注释：块注释、行注释以及文档注释（docstring）。这三种注释的惯用法大概如下几种：</p><ol><li>使用块或行注释的时候仅仅注释那些复杂的操作、算法，还有可能别人难以理解的技巧或者不够一目了然地代码。</li><li>注释和代码隔开一定的距离，同时在块注释之后最好多留几行空白再写代码。</li><li>给外部可访问的函数和方法添加文档注释，无论简单与否。<br>注释要清楚地描述方法的功能，并对参数、返回值以及可能发生的异常进行说明，使得外部调用它的人员仅仅看docstring就能正确使用。<br>较为复杂的内部方法也需要进行注释。</li><li>推荐在文件头中包含 copyright 申明、模块描述等，如有比较可以考虑加入作者信息及变更记录。</li></ol><h2 id="建议-5：通过适当添加空行使代码布局更为优雅、合理"><a href="#建议-5：通过适当添加空行使代码布局更为优雅、合理" class="headerlink" title="建议 5：通过适当添加空行使代码布局更为优雅、合理"></a>建议 5：通过适当添加空行使代码布局更为优雅、合理</h2><p>Python 代码布局也有一些基本规则可以遵循（PEP8 中有详细规范..）：</p><ol><li>在一组代码表达完一个完整的思路之后，应该用空白行进行间隔。如每个函数之间，导入声明、变量赋值等。</li><li>尽量保持上下文语义的易理解性</li><li>避免过长的代码行，每行最好不要超过 80 字符。</li><li>不要为了保持水平对其而使用多余的空格 （写C/C++就有这习惯…）</li><li>空格的使用要能够在需要强调的时候竟是读者，在疏松关系的实体间起到分隔作用。<ul><li>二元运算符、布尔运算的左右两边应该有空格</li><li>逗号和分号前不要使用空格</li><li>函数名和左括号之间、序列索引操作时序列名和 [] 之间不需要空格，函数的默认参数两侧不需要空格。</li><li>强调前面的操作符的时候使用空格</li></ul></li></ol><h2 id="建议-6：编写函数的-4-个原则"><a href="#建议-6：编写函数的-4-个原则" class="headerlink" title="建议 6：编写函数的 4 个原则"></a>建议 6：编写函数的 4 个原则</h2><p>** 原则 1 ** 函数设计要尽量短小，嵌套层次不宜过深。<br>** 原则 2 ** 函数申明应该做到合理、简单、易于使用。<br>** 原则 3 ** 函数参数设计应该考虑向下兼容。<br>** 原则 4 ** 一个函数只做一件事儿，尽量保证函数语句粒度的一致性。</p><p>Python 中函数设计的好习惯还包括：不要再函数中定义可变对象作为默认值，使用异常替换返回错误，保证通过单元测试等。</p><h2 id="建议-7：将常量集中到一个文件"><a href="#建议-7：将常量集中到一个文件" class="headerlink" title="建议 7：将常量集中到一个文件"></a>建议 7：将常量集中到一个文件</h2><p>Python 中使用常量一般有以下两种方式：</p><ul><li>通过命名风格来提醒使用者该变量代表的意义为常量，如常量名所有字母大写，用下划线连接各个单词，如 MAX_OVERFLOW，这只是一种约定俗成的风格。</li><li>通过自定义的类实现常量功能。这要求符合“命名全部为大写”和“值一旦绑定便不可再修改”这两个条件。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_const</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ConstError</span><span class="params">(TypeError)</span>:</span> <span class="keyword">pass</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ConstCaseError</span><span class="params">(ConstError)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.__dict__.has_key(name):</span><br><span class="line">            <span class="keyword">raise</span> self.ConstError, <span class="string">"Can't change const.&#123;&#125;"</span>.format(name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name.isupper():</span><br><span class="line">            <span class="keyword">raise</span> self.ConstCaseError, <span class="string">'const name "&#123;&#125;" is not all uppercase'</span>.format(name)</span><br><span class="line">        self.__dict__[name] = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[__name__] = _const()</span><br></pre></td></tr></table></figure></div></li></ul><p>如果上面的代码对应的模块名为 const，使用的时候只需要 import const，便可直接定义常量了，如下代码：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> const</span><br><span class="line">const.COMPANY = <span class="string">"IBM"</span></span><br></pre></td></tr></table></figure></div><h2 id="建议-8：利用-assert-语句来发现问题"><a href="#建议-8：利用-assert-语句来发现问题" class="headerlink" title="建议 8：利用 assert 语句来发现问题"></a>建议 8：利用 assert 语句来发现问题</h2><p>断言（assert）在很多语言中都存在，它主要为调试程序服务，能够快速方便的检查程序的异常或者发现不恰当的输入等，可防止意想不到的情况出现。</p><p>对 Python 中使用断言需要说明如下：</p><ol><li><strong>debug</strong> 的值默认设置为 True，而且是只读的。</li><li>断言是有性能影响的。Python 可以在运行脚本时通过 <code>-O</code> 标识来禁用断言。比如 <code>Python -O test.py</code></li></ol><p>断言实际是被设计用来捕获用户所定义的约束的，而不是用来捕获程序本身错误的，因此食用断言需要注意以下几点：</p><ol><li>不要滥用，这是使用断言最基本的原则。</li><li>如果 Python 本身的异常能够处理就不要再使用断言。断言没有明确的异常类型。</li><li>不要使用断言来检查用户的输入。</li><li>在函数调用后，当需要确认返回值是否合理时可以使用断言。</li><li>当条件是业务逻辑继续下去的先决条件时可以使用断言。</li></ol><h2 id="建议-9：数据交换值得时候不推荐使用中间变量"><a href="#建议-9：数据交换值得时候不推荐使用中间变量" class="headerlink" title="建议 9：数据交换值得时候不推荐使用中间变量"></a>建议 9：数据交换值得时候不推荐使用中间变量</h2><h2 id="建议-10：充分利用-Lazy-evaluation-的特性"><a href="#建议-10：充分利用-Lazy-evaluation-的特性" class="headerlink" title="建议 10：充分利用 Lazy evaluation 的特性"></a>建议 10：充分利用 Lazy evaluation 的特性</h2><p>Lazy evaluation 常被译为“延迟计算”或“惰性计算”，值得是仅仅在真正需要执行的时候才会计算表达式的值。<br>充分利用 Lazy evaluation 的特性带来的好处有两个方面：</p><ol><li>避免不必要的计算，带来性能上的提升。</li><li>节省空间，使得无限循环的数据结构成为可能。</li></ol><h2 id="建议-11：理解枚举替代实现的缺陷"><a href="#建议-11：理解枚举替代实现的缺陷" class="headerlink" title="建议 11：理解枚举替代实现的缺陷"></a>建议 11：理解枚举替代实现的缺陷</h2><p>在 Python 3.4 之前，并没有提供枚举类型。所以人们充分利用 Python 的dong’tai动态性这个特征，行除了美剧的各种替代实现：</p><ol><li><p>使用类属性</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Seasons</span>:</span></span><br><span class="line">    Spring, Summer, Autumn, Winter = range(<span class="number">4</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>借助函数</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enum</span><span class="params">(*posarg, **keysarg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> type(<span class="string">"Enum"</span>, (object,), dict(zip(posarg, xrange(len(posarg))), **keysarg))</span><br></pre></td></tr></table></figure></div></li><li><p>使用 collections.nametuple</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Seasons = namedtuple(&apos;Seasons&apos;, &apos;Spring Summer Autumn Winter&apos;)._make(range(4))</span><br></pre></td></tr></table></figure></div></li></ol><p>但是这些替代有其不合理的地方：</p><ul><li>允许枚举值重复</li><li>支持无意义的操作，比如相加</li></ul><p>在3.4之后，加入了枚举 Enum，其实现主要参考 flufl.enum，但两者之间存在一些差别。</p><h2 id="建议-12：不推荐使用-type-来进行类型检查"><a href="#建议-12：不推荐使用-type-来进行类型检查" class="headerlink" title="建议 12：不推荐使用 type 来进行类型检查"></a>建议 12：不推荐使用 type 来进行类型检查</h2><p>基于内建类型扩展的用户自定义类型，type函数并不能准确返回结果。<br>任意泪的实例的 <code>type()</code> 返回结果都是 <code>&lt;type &#39;instance&#39;&gt;</code>。我们可以使用 isinstance() 函数来检测类型。</p><h2 id="建议-13：尽量转换为浮点类型后再做除法"><a href="#建议-13：尽量转换为浮点类型后再做除法" class="headerlink" title="建议 13：尽量转换为浮点类型后再做除法"></a>建议 13：尽量转换为浮点类型后再做除法</h2><h2 id="建议-14：警惕-eval-的安全漏洞"><a href="#建议-14：警惕-eval-的安全漏洞" class="headerlink" title="建议 14：警惕 eval() 的安全漏洞"></a>建议 14：警惕 eval() 的安全漏洞</h2><p>Python 中 eval() 函数将字符串 str 当初有效的表达式来求值并返回计算结果。其函数声明如下：<br><code>eval(expression[, globals[, locals]])</code><br>其中参数 globals 为字典形式，locals 为任何映射对象，他们分别表示全局和局部命名空间。<br>如果传入 globals 参数的字典中缺少 <code>__builtins__</code> 的时候，当前的全局命名空间将作为 globals 参数输入并且在表达式计算之前被解析。<br>locals 参数默认与 globals 相同，如果两者都省略的话，表达式将在 eval() 调用的环境中执行。</p><p>如果使用对象不是信任源，应该尽量避免使用 eval，在需要使用 eval 的地方可用安全性更好的 ast.literal_eval 替代。</p><h2 id="建议-15：使用-enumerate-获取序列迭代的索引和值"><a href="#建议-15：使用-enumerate-获取序列迭代的索引和值" class="headerlink" title="建议 15：使用 enumerate() 获取序列迭代的索引和值"></a>建议 15：使用 enumerate() 获取序列迭代的索引和值</h2><h2 id="建议-16：分清-与-is-的适用场景"><a href="#建议-16：分清-与-is-的适用场景" class="headerlink" title="建议 16：分清 == 与 is 的适用场景"></a>建议 16：分清 == 与 is 的适用场景</h2><table><thead><tr><th align="left">操作符</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">is</td><td align="left">object identity</td></tr><tr><td align="left">==</td><td align="left">equal</td></tr></tbody></table><p>is 表示的是对象标识符 (object identity)，而 == 表示的意思是相等。<br>is 的作用是用来检查对象的标识符是否一致的，也就是比较两个对象在内存中是否拥有同一块内存空间。<br>== 才是用来检验两个对象的值是否相等的，它实际调用内部 <code>__eq__()</code> 方法。</p><h2 id="建议-17：考虑兼容性，尽可能使用-Unicode"><a href="#建议-17：考虑兼容性，尽可能使用-Unicode" class="headerlink" title="建议 17：考虑兼容性，尽可能使用 Unicode"></a>建议 17：考虑兼容性，尽可能使用 Unicode</h2><h2 id="建议-18：构建合理的包层次来管理-module"><a href="#建议-18：构建合理的包层次来管理-module" class="headerlink" title="建议 18：构建合理的包层次来管理 module"></a>建议 18：构建合理的包层次来管理 module</h2><p>什么是包？简单说包即是目录，但是与目录不同，它除了包含常规的 Python 文件以外，还包含一个 <code>__init__.py</code> 文件，同时它允许嵌套。<br>包有以下几种导入方法：</p><ol><li>直接导入一个包<br><code>import Package</code></li><li>导入子模块或子包，包嵌套的情况下可以进行嵌套导入<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Package <span class="keyword">import</span> Module1</span><br><span class="line"><span class="keyword">import</span> Package.Module1</span><br></pre></td></tr></table></figure></div></li></ol><p>包的使用能够带来以下便利：</p><ul><li>合理组织代码，便于维护和使用</li><li>能够有效的避免命名空间冲突</li></ul><h2 id="建议-19：有节制的使用-from…import-语句"><a href="#建议-19：有节制的使用-from…import-语句" class="headerlink" title="建议 19：有节制的使用 from…import 语句"></a>建议 19：有节制的使用 from…import 语句</h2><p>在使用 import 的时候注意以下几点：</p><ul><li>一般情况下尽量优先使用 import a 形式</li><li>有节制地使用 from a import B 形式，可以直接访问 B</li><li>尽量避免使用 from a import *，因为这会污染命名空间，并且无法清晰的表示导入了哪些对象</li></ul><p>当加载一个模块的时候，解释器实际上要完成以下动作：</p><ol><li>在 sys.modules 中进行搜索看看模块是否已经存在，如果存在，则将其导入到当前局部命名空间，加载结束。</li><li>如果在 sys.modules 中找不到对应的模块名称，则为需要导入的模块创建一个字典对象，并将该对象信息插入 sys.modules 中。</li><li>加载钱确认是否需要对模块对应的文件进行编译，如果需要则先进行编译。</li><li>执行动态加载，在当前模块的命名空间中执行编译后的字节码，并将其中所有的对象放入模块对应的字典中。</li></ol><p>对于 from…import 无节制的使用会带来什么问题：</p><ol><li>命名空间的冲突</li><li>循环嵌套导入的问题</li></ol><h2 id="建议-20：优先使用-absolute-import-来导入模块"><a href="#建议-20：优先使用-absolute-import-来导入模块" class="headerlink" title="建议 20：优先使用 absolute import 来导入模块"></a>建议 20：优先使用 absolute import 来导入模块</h2><h2 id="建议-21：i-1-不等于-i"><a href="#建议-21：i-1-不等于-i" class="headerlink" title="建议 21：i+=1 不等于 ++i"></a>建议 21：i+=1 不等于 ++i</h2><p>Python 中是不支持概念中 ++i 操作的。<br>但是如果你这么写，会被 Python 解释成 +(+i)，其中 + 表示正号</p><h2 id="建议-22：使用-with-自动关闭资源"><a href="#建议-22：使用-with-自动关闭资源" class="headerlink" title="建议 22：使用 with 自动关闭资源"></a>建议 22：使用 with 自动关闭资源</h2><p>with 语句可以在代码块执行完毕后还原进入该代码块时的现场。包含有 with 语句的代码块的执行过程如下：</p><ol><li>计算表达式的值，返回一个上下文管理器对象。</li><li>加载上下文管理器对象的 <code>__exit__()</code> 方法以备后用</li><li>调用上下文管理器对象的 <code>__enter__()</code> 方法</li><li>如果 with 语句中设置了目标对象，则将 <code>__enter__()</code> 方法的返回值赋值给目标对象</li><li>执行 with 中的代码块</li><li>如果步骤5中代码正常结束，调用上下文管理器的 <code>__exit__()</code> 方法，其返回值直接忽略。</li><li>如果步骤5中代码执行过程中发生异常，调用上下文管理器的 <code>__exit__()</code> 方法，并将异常类型、值及 traceback 信息作为参数传递给 <code>__exit__()</code> 方法。<br>如果 <code>__exit__()</code> 返回值为 False，则异常会重新抛出；如果其返回值为 True，异常被挂起，程序继续执行。</li></ol><h2 id="建议-23：使用-else-子句简化循环（异常处理）"><a href="#建议-23：使用-else-子句简化循环（异常处理）" class="headerlink" title="建议 23：使用 else 子句简化循环（异常处理）"></a>建议 23：使用 else 子句简化循环（异常处理）</h2><h2 id="建议-24：遵循异常处理的几点基本原则"><a href="#建议-24：遵循异常处理的几点基本原则" class="headerlink" title="建议 24：遵循异常处理的几点基本原则"></a>建议 24：遵循异常处理的几点基本原则</h2><ol><li>注意异常的粒度，不推荐在 try 中放入过多的代码。</li><li>谨慎使用单独的 except 语句处理所有异常，最好能定位具体的异常。</li><li>注意异常捕获的顺序，在合适的层次处理异常。推荐的方法是将继承结构中子类异常在前面的 except 语句中抛出，而父类异常在后面的 except 语句中抛出。</li><li>使用更为友好的异常信息，遵循异常参数的规范。</li></ol><h2 id="建议-25：避免-finally-中可能发生的陷阱"><a href="#建议-25：避免-finally-中可能发生的陷阱" class="headerlink" title="建议 25：避免 finally 中可能发生的陷阱"></a>建议 25：避免 finally 中可能发生的陷阱</h2><p>在实际应用程序开发过程中，并不推荐在 finally 中使用 return 语句或 break 进行返回，这种处理方式不仅会带来误解而且可能会引起非常严重的错误。</p><h2 id="建议-26：深入理解-None，正确判断对象是否为空"><a href="#建议-26：深入理解-None，正确判断对象是否为空" class="headerlink" title="建议 26：深入理解 None，正确判断对象是否为空"></a>建议 26：深入理解 None，正确判断对象是否为空</h2><p>Python 中以下数据会当作空来处理：</p><ul><li>常量 None</li><li>常量 Flase</li><li>任何形式的数值类型零，如0、0L、0.0、0j</li><li>空的序列，如 ‘’、()、[]</li><li>空的字典，如 {}</li><li>当用户定义的类中定义了 nonzero() 方法和 len() 方法，并且该方法返回整数0或者布尔值 False 的时候。</li></ul><p>其中常量 None 的特殊性体现在它既不是0、False，也不是空字符串，他就是一个空值对象。其数据类型为 NoneType，遵循单例模式，是唯一的，因而不能创建 None 对象。<br>所有赋值为 None 的变量都相等，并且 None 与任何其他非 None 的对象比较结果都为 False</p><p><strong>错误的比较</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_list = []</span><br><span class="line"><span class="keyword">if</span> test_list <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    print(<span class="string">'list is:'</span>, test_list)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'list is empty'</span>)</span><br></pre></td></tr></table></figure></div><p><strong>正确的比较</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_list = []</span><br><span class="line"><span class="keyword">if</span> test_list:</span><br><span class="line">    print(<span class="string">'list is:'</span>, test_list)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'list is empty'</span>)</span><br></pre></td></tr></table></figure></div><h2 id="建议-27：连接字符串应优先使用-join-而不是"><a href="#建议-27：连接字符串应优先使用-join-而不是" class="headerlink" title="建议 27：连接字符串应优先使用 join 而不是 +"></a>建议 27：连接字符串应优先使用 join 而不是 +</h2><p>jion 的效率要高于 + 操作符<br>jion 的时间复杂度为O(n), + 的时间复杂度为 O(n^2)</p><h2 id="建议-28：格式化字符串时尽量使用-format-方式而不是"><a href="#建议-28：格式化字符串时尽量使用-format-方式而不是" class="headerlink" title="建议 28：格式化字符串时尽量使用 .format 方式而不是 %"></a>建议 28：格式化字符串时尽量使用 .format 方式而不是 %</h2><p>% 操作符格式化字符串时有如下几种用法：</p><ol><li><p>直接格式化字符或者数值</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'your score is %06.1f'</span> % <span class="number">9.5</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>以元组的形式格式化</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">print(<span class="string">'the %s of a circle with radius %f is %0.3f'</span> %(<span class="string">'circumference'</span>, <span class="number">3</span>, math.pi*radius*<span class="number">2</span>))</span><br></pre></td></tr></table></figure></div></li><li><p>以字典的形式格式化</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">itemdict = &#123;<span class="string">'itemname'</span>: <span class="string">'circumference'</span>, <span class="string">'radius'</span>: <span class="number">3</span>, <span class="string">'value'</span>: math.pi*radius*<span class="number">2</span>&#125;</span><br><span class="line">print(<span class="string">'the %(itemname)s of a circle with radius %(radius)f is %(value)0.3f'</span> % itemdict)</span><br></pre></td></tr></table></figure></div></li></ol><p>.format 方式格式化字符串的基本语法为：<code>[[填充符] 对齐方式][符号][#][0][宽度][,][.精确度][转换类型]</code><br>其中填充符可以是除了 <code>{</code> 和 <code>}</code> 符号之外的任意符号。</p><table><thead><tr><th align="left">对其方式</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">&lt;</td><td align="left">表示左对其，是大多数对象为默认的对其方式</td></tr><tr><td align="left">&gt;</td><td align="left">表示右对其，数值默认的对其方式</td></tr><tr><td align="left">=</td><td align="left">仅对数值类型有效，如果有符号的话，在符号后数值前进行填充，如-0029</td></tr><tr><td align="left">^</td><td align="left">居中对其，用空格进行填充</td></tr></tbody></table><table><thead><tr><th align="left">符号</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">正数前加 +，负数前加 -</td></tr><tr><td align="left">-</td><td align="left">正数前不加符号，负数前加 -，为数值的默认形式</td></tr><tr><td align="left">空格</td><td align="left">正数前加空格，负数前加 -</td></tr></tbody></table><p>.format 常用用法：</p><ol><li><p>使用位置符号</p></li><li><p>使用名称</p></li><li><p>通过属性</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, phone)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.phone = phone</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 通过 str() 函数返回格式化的结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Customer(&#123;self.name&#125;,&#123;self.gender&#125;,&#123;self.phone&#125;)'</span>.format(self=self)</span><br><span class="line"></span><br><span class="line">str(Customer(<span class="string">'Lisa'</span>, <span class="string">'Female'</span>, <span class="string">'67889'</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">'Customer(Lisa, Female, 67889)'</span></span><br></pre></td></tr></table></figure></div></li><li><p>格式化元组的具体项</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">point = (<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="string">'X:&#123;0[0]&#125;;Y:&#123;0[1]&#125;'</span>.format(point)</span><br><span class="line"></span><br><span class="line"><span class="string">'X:1;Y:3'</span></span><br></pre></td></tr></table></figure></div></li></ol><p>使用 .format 的理由：</p><ol><li>format 方式在使用上较 % 操作符更为灵活</li><li>format 方式可以方便的作为参数传递</li><li>% 最终会被 .format 方式所替代</li><li>% 方法在某些情况下使用时需要特别小心</li></ol><h2 id="建议-29：区别对待可变对象和不可变对象"><a href="#建议-29：区别对待可变对象和不可变对象" class="headerlink" title="建议 29：区别对待可变对象和不可变对象"></a>建议 29：区别对待可变对象和不可变对象</h2><p>数字、字符串、元组属于不可变对象<br>字典、列表、字节数组属于可变对象</p><p>看一个经典例子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, coures=[])</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.course = coures</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_course</span><span class="params">(self, course_name)</span>:</span></span><br><span class="line">        self.course.append(course_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_course</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.course:</span><br><span class="line">            print(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    stu_a = Student(<span class="string">'Wang yi'</span>)</span><br><span class="line">    stu_a.add_course(<span class="string">'English'</span>)</span><br><span class="line">    stu_a.add_course(<span class="string">'Math'</span>)</span><br><span class="line">    print(stu_a.name + <span class="string">"'s course:"</span>)</span><br><span class="line">    stu_a.print_course()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'----------------------------'</span>)</span><br><span class="line"></span><br><span class="line">    stu_b = Student(<span class="string">'Li san'</span>)</span><br><span class="line">    stu_b.add_course(<span class="string">'Chinese'</span>)</span><br><span class="line">    stu_b.add_course(<span class="string">'Physics'</span>)</span><br><span class="line">    print(stu_b.name + <span class="string">"'s course:"</span>)</span><br><span class="line">    stu_b.print_course()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div><p>结果</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\MeeSong\AppData\Local\Programs\Python\Python35\python.exe C:/Users/MeeSong/Desktop/test/test.py</span><br><span class="line">Wang yi<span class="string">'s course:</span></span><br><span class="line"><span class="string">English</span></span><br><span class="line"><span class="string">Math</span></span><br><span class="line"><span class="string">----------------------------</span></span><br><span class="line"><span class="string">Li san'</span>s course:</span><br><span class="line">English</span><br><span class="line">Math</span><br><span class="line">Chinese</span><br><span class="line">Physics</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>看到没，结果与预想的并不一样。<br>我们通过 <code>id(stu_a.course)</code> 和 <code>id(stu_b.course)</code> (id 是查看对象的内存标识的，即内存地址) 发现两个结果是一样的，说明两个list对象指的是同一块地址。<br>但 <code>stu_a</code> 和 <code>stu_b</code> 本身却是两个不同的对象。在实例化两个对象的时候，这两个对象被分配了不同的内存空间，并且调用 <code>init()</code> 函数进行了初始化。<br>但由于 <code>init()</code> 函数的第二个参数是个默认参数，默认桉树在函数被调用的时候仅仅被评估一次，以后都会使用第一次评估的结果，因此实际上对象空间里面 course 所指向的是同一个list地址。</p><p>我们改成这样就好了</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, coures=None)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.course = coures <span class="keyword">if</span> coures <span class="keyword">else</span> []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_course</span><span class="params">(self, course_name)</span>:</span></span><br><span class="line">        self.course.append(course_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_course</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.course:</span><br><span class="line">            print(item)</span><br></pre></td></tr></table></figure></div><p>另外，切片操作相当于浅拷贝。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a[<span class="number">0</span>])</span><br><span class="line"><span class="number">2279905391312</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b[<span class="number">0</span>])</span><br><span class="line"><span class="number">2279905391312</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">2279910237896</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">2279910245384</span></span><br></pre></td></tr></table></figure></div><p>对于不可变对象，当我们对其进行相关操作的时候，Python 实际上仍然保持原来的值，并重新创建一个新的对象。<br>比如字符串操作</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="string">'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = s1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(s2)</span><br><span class="line"><span class="number">2279910241368</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(s1)</span><br><span class="line"><span class="number">2279910241368</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(s1[:<span class="number">1</span>])</span><br><span class="line"><span class="number">2279905395408</span></span><br></pre></td></tr></table></figure></div><h2 id="建议-30：-、-和-：一致的容器初始化形式"><a href="#建议-30：-、-和-：一致的容器初始化形式" class="headerlink" title="建议 30：[]、() 和 {}：一致的容器初始化形式"></a>建议 30：[]、() 和 {}：一致的容器初始化形式</h2><p>建议使用列表解析来初始化，即列表推导式（或元组和字典）<br>列表推导式的语法为：<code>[expr for iter_item in iterable if cond_expr]</code><br>元组推导式的语法为：<code>(expr for iter_item in iterable if cond_expr)</code><br>集合推导式的语法为：<code>{expr for iter_item in iterable if cond_expr}</code><br>字典推导式的语法为：<code>{exprk:exprv for iter_item in iterable if cond_expr}</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[v**<span class="number">2</span> <span class="keyword">if</span> v%<span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> v+<span class="number">1</span> <span class="keyword">for</span> v <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">-1</span>] <span class="keyword">if</span> v&gt;<span class="number">0</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">4</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure></div><p>列表推导式非常灵活：</p><ol><li>支持多重嵌套</li><li>支持多重迭代</li><li>列表推导式的语法中的表达式可以是简单表达式，也可以是复杂表达式，甚至是函数</li><li>列表推导式语法中的iterable可以是任意可迭代对象</li></ol><p>为什么推荐俺在需要生成列表的时候使用列表推导式呢？</p><ol><li>使用列表推导式更为直观清晰，代码更为简洁</li><li>列表推导式的效率更高</li></ol><h2 id="建议-31：记住函数传参既不是传值也不是传引用"><a href="#建议-31：记住函数传参既不是传值也不是传引用" class="headerlink" title="建议 31：记住函数传参既不是传值也不是传引用"></a>建议 31：记住函数传参既不是传值也不是传引用</h2><p>先看两张图</p><p><img src="python-31.1.png" alt><br><img src="python-31.1.png" alt></p><p>对于在Python函数参数是传值还是传引用这个问题：<br>正确叫法应该是传对象或者说传对象的引用。函数参数在传递的过程中将整个对象传入，<br>对可变对象的修改在函数外部以及内部都可见，调用者和被调用者之间共享这个对象，<br>而对于不可变对象， 由于并不能真正被修改，因此修改往往是通过生成一个新对象然后赋值来实现的</p><h2 id="建议-32：-警惕默认参数潜在的问题"><a href="#建议-32：-警惕默认参数潜在的问题" class="headerlink" title="建议 32： 警惕默认参数潜在的问题"></a>建议 32： 警惕默认参数潜在的问题</h2><p>这个问题同 <a href="#建议-29：区别对待可变对象和不可变对象">建议 29：区别对待可变对象和不可变对象</a> 的例子</p><h2 id="建议-33：慎用变长参数"><a href="#建议-33：慎用变长参数" class="headerlink" title="建议 33：慎用变长参数"></a>建议 33：慎用变长参数</h2><p>Python 支持可变长度的参数列表，可以通过在函数定义的时候使用 <em>args 和 *</em>kwargs 这两个特殊语法来实现。</p><ol><li>使用 *args 来实现可变参数列表： *args 用于接收一个包装为元组形式的参数列表来传递非关键字参数，参数个数可以任意。</li><li>使用 **kwargs 接受字典形式的关键字参数列表，其中字典的键值对分别表示不可变参数的参数名和值</li></ol><p>为什么要慎用可变长度参数呢：</p><ol><li>使用过于灵活</li><li>如果一个函数的参数列表很长，虽然可以通过使用 <em>args 和 *</em>kwargs 来简化函数的定义，但通常这意味着这个函数可以有更好的实现方式，应该被重构。</li><li>可变长参数适合在下列情况下使用：</li></ol><ul><li>为函数添加一个装饰器</li><li>如果参数的数目不确定，可以考虑使用变长参数</li><li>用来实现函数的多态或者在继承情况下子类需要调用父类的某些方法的时候</li></ul><h2 id="建议-34：深入理解-str-和-repr-的区别"><a href="#建议-34：深入理解-str-和-repr-的区别" class="headerlink" title="建议 34：深入理解 str() 和 repr() 的区别"></a>建议 34：深入理解 str() 和 repr() 的区别</h2><p>函数 str() 和 repr() 都可以将 Python 中的对象转换为字符串，他们的使用及输出都非常相似</p><p><img src="python-34.1.png" alt><br><img src="python-34.2.png" alt></p><p>区别主要有以下几点：</p><ol><li>两者之间的目标不同：str() 主要面向用户，其目的是可读性，返回形式为用户友好性和可读性都较强的字符串类型;<br>而 repr() 面向的是Python解释器，或者说开发人员，其目的是准确性，返回值表示 Python 解释器内部的含义，常作为编程人员 debug 用途</li><li>在解释器中输入a时，默认调用 <code>repr()</code> 函数，而 <code>print(a)</code> 则调用 str() 函数</li><li>repr() 的返回值一般可以用 eval() 函数来还原对象，通常来说有这个等式：<code>obj == eval(repr(obj))</code></li><li>这两个方法分别调用内建的 <code>__str__()</code> 和 <code>__repr__()</code> 方法，一般来说在类中都应该定义 <code>__repr__()</code> 方法，而 <code>__str__()</code> 方法则为可选，<br>当可读性比准确性更重要的时候应该考虑定义 <code>__str__()</code> 方法。如果类中没有定义 <code>__str__()</code> 方法，则默认会使用 <code>__repr__()</code> 方法的结果来返回对象的字符串形式。<br>用户实现 <code>__repr__()</code> 方法的时候最好保证其返回值可以用 eval() 方法使对象重新还原</li></ol><h2 id="建议-35：分清-staticmenthod-和-classmethod-的适用场景"><a href="#建议-35：分清-staticmenthod-和-classmethod-的适用场景" class="headerlink" title="建议 35：分清 staticmenthod 和 classmethod 的适用场景"></a>建议 35：分清 staticmenthod 和 classmethod 的适用场景</h2><p>静态方法没有常规方法的特殊行为，如绑定、非绑定、隐式参数等规则<br>类方法的调用使用类本身作为其隐含参数，但调用本身并不需要显示提供该参数</p><p>类方法能够根据不同的类型返回对应的类的实例<br>既不跟特定的实例相关，也不跟特定的类相关的时候，用静态方法更合适</p><h2 id="建议-36：掌握字符串的基本用法"><a href="#建议-36：掌握字符串的基本用法" class="headerlink" title="建议 36：掌握字符串的基本用法"></a>建议 36：掌握字符串的基本用法</h2><p>小技巧<br>Python 遇到未闭合的小括号时会自动将多行代码拼接为一行和把相邻的两个字符串字面量拼接到一起。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = (<span class="string">'SELECT * '</span></span><br><span class="line"><span class="meta">... </span>     <span class="string">'FROM atable '</span></span><br><span class="line"><span class="meta">... </span>     <span class="string">'WHERE afield="value"'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">SELECT * FROM atable WHERE afield=<span class="string">"value"</span></span><br></pre></td></tr></table></figure></div><p>性质判定</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">isalnum()</td><td align="left">是否只是数字或字母</td></tr><tr><td align="left">isalpha()</td><td align="left">是否字母</td></tr><tr><td align="left">isdigit()</td><td align="left">是否数字</td></tr><tr><td align="left">islower()</td><td align="left">是否小写</td></tr><tr><td align="left">isupper()</td><td align="left">是否大写</td></tr><tr><td align="left">isspace()</td><td align="left">是否空白符</td></tr><tr><td align="left">istitle()</td><td align="left">是否标题化的，即每个单词首字母是否大写</td></tr><tr><td align="left">startswith(prefix[,start[,end]])</td><td align="left">是否以prefix开头，可范围内检查，prefix可接受tuple类型的实参</td></tr><tr><td align="left">endswith(suffix[,start[,end]])</td><td align="left">是否以suffix结尾，可范围内检查，suffix可接收tuple类型的实参</td></tr></tbody></table><p>查找</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">count(sub[,start[,end]])</td><td align="left">查找sub在字符串中出现的次数，这个数值在调用replace方法时用得着</td></tr><tr><td align="left">find(sub[,start[,end]])</td><td align="left">查找sub在字符串中的位置，找不到时返回-1</td></tr><tr><td align="left">index(sub[,start[,end]])</td><td align="left">同find，不过找不到会抛出 ValueError 异常，另外对于是否包含字串，更推荐使用 in 和 not in 操作符</td></tr><tr><td align="left">rfind(sub[,start[,end]])</td><td align="left">同find，从右侧开始</td></tr><tr><td align="left">rindex(sub[,start[,end]])</td><td align="left">同index，从右侧开始</td></tr></tbody></table><p>替换</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">replace(old, new[,count])</td><td align="left">把字符串中的old替换为new，count为最多替换次数</td></tr><tr><td align="left">translate(table[,deletechars])</td><td align="left">根据table转换字符串的字符，可以由string.maketrans(frm,to)生成；deletechars为过滤掉的字符</td></tr></tbody></table><p>分切</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">partition(sep)</td><td align="left">它接受一个字符串参数，并返回一个3个元素的 tuple 对象。如果sep没出现在母串中，返回值是 (sep, ‘’, ‘’)；否则，返回值的第一个元素是 sep 左端的部分，第二个元素是 sep 自身，第三个元素是 sep 右端的部分。</td></tr><tr><td align="left">rpartition(sep)</td><td align="left"></td></tr><tr><td align="left">splitlines([keepends])</td><td align="left"></td></tr><tr><td align="left">split([sep [,maxsplit]])</td><td align="left">参数 maxsplit 是分切的次数，即最大的分切次数，所以返回值最多有 maxsplit+1 个元素。</td></tr><tr><td align="left">rsplit([sep[,maxsplit]])</td><td align="left"></td></tr></tbody></table><p>不过有一个需要注意的地方<br>对于字符串s、s.split() 和 s.split(‘ ‘) 返回值是不同的</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' hello  world!'</span>.split()</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world!'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' hello  world!'</span>.split(<span class="string">' '</span>)</span><br><span class="line">[<span class="string">''</span>, <span class="string">'hello'</span>, <span class="string">''</span>, <span class="string">'world!'</span>]</span><br></pre></td></tr></table></figure></div><p>产生差异的原因在于当忽略 sep 参数或sep参数为 None 时与明确给 sep 赋予字符串值时 split() 采用两种不同的算法。<br>对于前者，split() 先去除字符串两端的空白符，然后以任意长度的空白符串作为界定符分切字符串（即连续的空白符串被当作单一的空白符看待）；对于后者则认为两个连续的 sep 之间存在一个空字符串。</p><p>连接<br>join() 函数的高效率（相对于循环相加而言），使它成为最值得关注的字符串方法之一。<br>它的功用是将可迭代的字符串序列连接成一条长字符串，如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>conf = &#123;<span class="string">'host'</span>:<span class="string">'127.0.0.1'</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'db'</span>:<span class="string">'spam'</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'user'</span>:<span class="string">'sa'</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'passwd'</span>:<span class="string">'eggs'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">';'</span>.join(<span class="string">"%s=%s"</span>%(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> conf.iteritems())</span><br><span class="line"><span class="string">'passswd=eggs;db=spam;user=sa;host=127.0.0.1'</span></span><br></pre></td></tr></table></figure></div><p>变形</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">lower()</td><td align="left">转小写</td></tr><tr><td align="left">upper()</td><td align="left">转大写</td></tr><tr><td align="left">capitalize()</td><td align="left">把字符串的第一个字符大写</td></tr><tr><td align="left">swapcase()</td><td align="left">翻转 string 中的大小写</td></tr><tr><td align="left">title()</td><td align="left">返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写</td></tr></tbody></table><p>title()函数是比较特别的，它的功能是将每一个单词的首字母大写，并将单词中的非首字母转换为小写（英文文章的标题通常是这种格式）。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world!'</span>.title()</span><br><span class="line"><span class="string">'Hello World!'</span></span><br></pre></td></tr></table></figure></div><p>因为title() 函数并不去除字符串两端的空白符也不会把连续的空白符替换为一个空格，所以建议使用string 模块中的capwords(s)函数，它能够去除两端的空白符，再将连续的空白符用一个空格代替。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' hello   world!'</span>.title()</span><br><span class="line"><span class="string">' Hello   World!'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.capwords(<span class="string">' hello   world!'</span>)</span><br><span class="line"><span class="string">'Hello World!'</span></span><br></pre></td></tr></table></figure></div><p>删减</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">strip([chars])</td><td align="left">在 string 上执行 lstrip()和 rstrip()</td></tr><tr><td align="left">lstrip([chars])</td><td align="left">截掉 string 左边的空格</td></tr><tr><td align="left">rstrip([chars])</td><td align="left">删除 string 字符串末尾的空格.</td></tr></tbody></table><p>*strip()函数族用以去除字符串两端的空白符，空白符由string.whitespace常量定义。</p><p>填充</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">center(width[, fillchar])</td><td align="left">返回一个原字符串居中,并使用空格填充至长度 width 的新字符串， fillchar 参数指定了用以填充的字符，默认为空格</td></tr><tr><td align="left">ljust(width[, fillchar])</td><td align="left">返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left">rjust(width[, fillchar])</td><td align="left">返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left">zfill(width)</td><td align="left">返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</td></tr><tr><td align="left">expandtabs([tabsize])</td><td align="left">把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8</td></tr></tbody></table><p>编码</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">encode([encoding[,errors]])</td><td align="left">以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td align="left">decode([encoding[,errors]])</td><td align="left">以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除 非 errors 指 定 的 是 ‘ignore’ 或 者’replace’</td></tr></tbody></table><h2 id="建议-37：按需选择-sort-或者-sorted"><a href="#建议-37：按需选择-sort-或者-sorted" class="headerlink" title="建议 37：按需选择 sort() 或者 sorted()"></a>建议 37：按需选择 sort() 或者 sorted()</h2><p><code>sorted(iterable[, cmp[, key[, reverse]]])</code><br><code>s.sort([cmp[, key[, reverse]]])</code></p><ul><li>cmp 为用户定义的任何比较函数，函数的参数为两个可比较的元素（来自iterable或者list），函数根据第一个参数与第二个参数的关系依次返回 -1、0、+1（第一个参数小于第二个参数则返回负数）。该参数默认值为None。</li><li>key 是带一个参数的函数，用来为每个元素提取比较值，默认为None（即直接比较每个元素）</li><li>reverse 表示结果是否反转</li></ul><p>sort() 与 sorted() 之间的比较：</p><ol><li>相比于 sort()，sorted() 使用范围更为广泛</li><li>当排序对象为列表的时候两者适合的场景不同。sorted() 函数会返回一个排序后的立标，原有列表保持不变；而 sort() 函数会直接修改原有列表，函数返回为 None</li><li>无论是 sort() 还是 sorted() 函数，传入参数 key 比传入参数 cmp 效率要高。</li><li>sorted() 函数功能非常强大，使用它可以方便的针对不同的数据结构进行排序，从而满足不同需求。对于 itemgetter 的使用，参见 <span class="exturl" data-url="aHR0cDovL2JlZ2lubWFuLmNuL3B5dGhvbi8yMDE1LzA1LzE4L3B5dGhvbi1vcGVyYXRvci1zb3J0ZWQv" title="http://beginman.cn/python/2015/05/18/python-operator-sorted/">python operator.itemgetter函数与sorted的妙用<i class="fa fa-external-link"></i></span></li></ol><ul><li><p>对字典进行排序</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>phonebook = &#123;<span class="string">'Linda'</span>:<span class="string">'7750'</span>, <span class="string">'Bob'</span>:<span class="string">'9345'</span>, <span class="string">'Carol'</span>:<span class="string">'5834'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted_pb = sorted(phonebook.items(), key=itemgetter(<span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted_pb</span><br><span class="line">[(<span class="string">'Carol'</span>, <span class="string">'5834'</span>), (<span class="string">'Linda'</span>, <span class="string">'7750'</span>), (<span class="string">'Bob'</span>, <span class="string">'9345'</span>)]</span><br></pre></td></tr></table></figure></div></li><li><p>多维 list 排序</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gameresult = [[<span class="string">'Bob'</span>, <span class="number">95.00</span>, <span class="string">'A'</span>], [<span class="string">'Alan'</span>, <span class="number">86.0</span>, <span class="string">'C'</span>], [<span class="string">'Mandy'</span>, <span class="number">82.5</span>, <span class="string">'A'</span>], [<span class="string">'Rob'</span>, <span class="number">86</span>, <span class="string">'E'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(gameresult, key=itemgetter(<span class="number">2</span>,<span class="number">1</span>))</span><br><span class="line">[[<span class="string">'Mandy'</span>, <span class="number">82.5</span>, <span class="string">'A'</span>], [<span class="string">'Bob'</span>, <span class="number">95.0</span>, <span class="string">'A'</span>], [<span class="string">'Alan'</span>, <span class="number">86.0</span>, <span class="string">'C'</span>], [<span class="string">'Rob'</span>, <span class="number">86</span>, <span class="string">'E'</span>]]</span><br></pre></td></tr></table></figure></div></li><li><p>字典中混合 list 排序</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mydict = &#123;<span class="string">'Li'</span>: [<span class="string">'M'</span>, <span class="number">7</span>],</span><br><span class="line">          <span class="string">'Zhang'</span>: [<span class="string">'E'</span>, <span class="number">2</span>],</span><br><span class="line">          <span class="string">'Wang'</span>: [<span class="string">'p'</span>, <span class="number">3</span>],</span><br><span class="line">          <span class="string">'Du'</span>: [<span class="string">'c'</span>, <span class="number">2</span>],</span><br><span class="line">          <span class="string">'Ma'</span>: [<span class="string">'c'</span>, <span class="number">9</span>],</span><br><span class="line">          <span class="string">'Zhe'</span>: [<span class="string">'H'</span>, <span class="number">7</span>]&#125;</span><br><span class="line"></span><br><span class="line">print(sorted(mydict.items(), key=<span class="keyword">lambda</span> item: itemgetter(<span class="number">1</span>)(itemgetter(<span class="number">1</span>)(item))))</span><br><span class="line"></span><br><span class="line">[(<span class="string">'Zhang'</span>, [<span class="string">'E'</span>, <span class="number">2</span>]), (<span class="string">'Du'</span>, [<span class="string">'c'</span>, <span class="number">2</span>]), (<span class="string">'Wang'</span>, [<span class="string">'p'</span>, <span class="number">3</span>]), (<span class="string">'Li'</span>, [<span class="string">'M'</span>, <span class="number">7</span>]), (<span class="string">'Zhe'</span>, [<span class="string">'H'</span>, <span class="number">7</span>]), (<span class="string">'Ma'</span>, [<span class="string">'c'</span>, <span class="number">9</span>])]</span><br></pre></td></tr></table></figure></div></li><li><p>list 中混合字典排序</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gameresult = [&#123;<span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'wins'</span>: <span class="number">10</span>, <span class="string">'losses'</span>: <span class="number">3</span>, <span class="string">'rating'</span>: <span class="number">75.00</span>&#125;,</span><br><span class="line">              &#123;<span class="string">'name'</span>: <span class="string">'David'</span>, <span class="string">'wins'</span>:<span class="number">3</span>, <span class="string">'losses'</span>: <span class="number">5</span>, <span class="string">'rating'</span>: <span class="number">57.00</span>&#125;,</span><br><span class="line">              &#123;<span class="string">'name'</span>: <span class="string">'Carol'</span>, <span class="string">'wins'</span>:<span class="number">4</span>, <span class="string">'losses'</span>: <span class="number">5</span>, <span class="string">'rating'</span>: <span class="number">57.00</span>&#125;]</span><br><span class="line"></span><br><span class="line">print(sorted(gameresult, key=itemgetter(<span class="string">'rating'</span>, <span class="string">'name'</span>)))</span><br><span class="line"></span><br><span class="line">[&#123;<span class="string">'wins'</span>: <span class="number">4</span>, <span class="string">'name'</span>: <span class="string">'Carol'</span>, <span class="string">'losses'</span>: <span class="number">5</span>, <span class="string">'rating'</span>: <span class="number">57.0</span>&#125;, &#123;<span class="string">'wins'</span>: <span class="number">3</span>, <span class="string">'name'</span>: <span class="string">'David'</span>, <span class="string">'losses'</span>: <span class="number">5</span>, <span class="string">'rating'</span>: <span class="number">57.0</span>&#125;, &#123;<span class="string">'wins'</span>: <span class="number">10</span>, <span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'losses'</span>: <span class="number">3</span>, <span class="string">'rating'</span>: <span class="number">75.0</span>&#125;]</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="建议-38：-使用-copy-模块进行深拷贝对象"><a href="#建议-38：-使用-copy-模块进行深拷贝对象" class="headerlink" title="建议 38： 使用 copy 模块进行深拷贝对象"></a>建议 38： 使用 copy 模块进行深拷贝对象</h2><p>概念：</p><ul><li>浅拷贝（shallow copy）：构造一个新的复合对象并将从原对象中发现的引用插入该对象中。浅拷贝的实现方式与多种，如工厂函数、切片操作、copy模块中的copy操作。</li><li>深拷贝（deep copy）：也是构造一个新的复合对象，但是遇到引用会继续递归拷贝其所指向的具体内容，也就是说它会针对引用所指向的对象继续执行拷贝，因此产生的对象不受其他引用对象操作的影响。</li></ul><h2 id="建议-39：使用-Counter-进行计数统计"><a href="#建议-39：使用-Counter-进行计数统计" class="headerlink" title="建议 39：使用 Counter 进行计数统计"></a>建议 39：使用 Counter 进行计数统计</h2><p>Counter 类是自 Python2.7 起增加的，属于字典的子类，是一个容器对象，主要用来统计散列对象。</p><h2 id="建议-40：深入掌握-ConfigParser"><a href="#建议-40：深入掌握-ConfigParser" class="headerlink" title="建议 40：深入掌握 ConfigParser"></a>建议 40：深入掌握 ConfigParser</h2><h2 id="建议-41：使用-argparse-处理命令行参数"><a href="#建议-41：使用-argparse-处理命令行参数" class="headerlink" title="建议 41：使用 argparse 处理命令行参数"></a>建议 41：使用 argparse 处理命令行参数</h2><p>另外，还有更先进好用的 docopt，不过暂时还没加入标准库。详见 <span class="exturl" data-url="aHR0cDovL2RvY29wdC5vcmcv" title="http://docopt.org/">docopt<i class="fa fa-external-link"></i></span></p><h2 id="建议-42：使用-pandas-处理大型-CSV-文件"><a href="#建议-42：使用-pandas-处理大型-CSV-文件" class="headerlink" title="建议 42：使用 pandas 处理大型 CSV 文件"></a>建议 42：使用 pandas 处理大型 CSV 文件</h2><p>CSV(Comma Separated Values) 作为一种逗号分隔符型值的纯文本格式文件，在实际应用中经常用到，如数据库的导入导出、数据分析中记录的存储等。</p><p>CSV 处理相关 API：</p><ol><li>‘reader(csvfile[, dialect=’excel’][, fmtparam])’，主要用于 CSV 文件的读取，返回一个 reader 对象用于在 CSV 文件内容上进行行迭代</li><li>‘csv.writer(csvfile, dialect=’excel’, **fmtparams)’，用于写入 CSV 文件。</li><li>‘csv.DictReader(csvfile, fieldnames=None, restkey=None, restval=None, dialect=’excel’, <em>args, *</em>kwds)’，将读入的信息映射到一个字典中去</li><li>‘csv.DictWrite(csvfile, fieldnames, restval=’’, extrasaction=’raise’, dialect=’excel’, <em>args, *</em>kwds)’，用于支持字典的写入。</li></ol><p>但是在处理大型 CSV 文件，上面API会抛出 MemoryError 异常。</p><p>Pandas 即 Python Data Analysis Library，是为了解决数据分析而创建的第三方工具，支持多种文件格式处理，包括 CSV、HDF5、HTML 等，能够提供高效的大型数据处理。</p><ul><li>Series：它是一种类似数据的带索引的一维数据结构，支持的类型与 NumPy 兼容。</li><li>DataFrame：类似于电子表格，其数据为排好序的数据列的集合，每一列都可以是不同的数据类型，它类似于一个二维数据结构，支持行和列的索引。</li></ul><h2 id="建议-43：一般情况使用-ElementTree-解析-XML"><a href="#建议-43：一般情况使用-ElementTree-解析-XML" class="headerlink" title="建议 43：一般情况使用 ElementTree 解析 XML"></a>建议 43：一般情况使用 ElementTree 解析 XML</h2><ul><li>使用简单</li><li>内存上消耗明显低于 DOM 解析。</li><li>支持 XPath 查询</li></ul><h2 id="建议-44：理解模块-pickle-优劣"><a href="#建议-44：理解模块-pickle-优劣" class="headerlink" title="建议 44：理解模块 pickle 优劣"></a>建议 44：理解模块 pickle 优劣</h2><p>pickle 估计是最通用的序列化模块了，它还有个 C 语言的实现 cPickle，相比 pickle 来说具有较好的性能，其速度大概是 pickle 的 1000 倍，除了不能被继承之外，它们两者的使用基本上区别不大</p><p>pickle 中最主要的两个函数对儿为 dump() 和 load()，分别来进行对象的序列化和反序列化：</p><ul><li>pickle.dump(obj, file[, protocol])：序列化数据到一个文件描述符。</li><li>pickle.load(file)：表示把文件中的对象恢复为原来的对象。</li></ul><p>pickle 模块的优点：</p><ol><li>接口简单，容易使用</li><li>pickle 的存储格式具有通用性，能够被不同平台的 Python 解析器共享</li><li>支持的数据类型广泛</li><li>pickle 模块是可扩展的</li><li>能够自动维护对象间的引用，如果一个对象上存在多个引用，pickle 后不会改变对象间的引用</li></ol><p>pickle 模块的限制：</p><ol><li>pickle 不能保证操作的原子性</li><li>pickle 存在安全性问题</li><li>pickle 协议是 Python 特性的，不同语言之间的兼容性难以保证</li></ol><h2 id="建议-45：序列化的另一个不错的选择——JSON"><a href="#建议-45：序列化的另一个不错的选择——JSON" class="headerlink" title="建议 45：序列化的另一个不错的选择——JSON"></a>建议 45：序列化的另一个不错的选择——JSON</h2><p>相比 pickle，JSON 具有以下优势：</p><ol><li>使用简单，支持多种数据类型，仅存在以下两大数据结构：<ul><li>名称 / 值 对儿的集合 （dict）</li><li>值的有序列表 （list）</li></ul></li><li>存储格式可读性更为友好，容易修改。</li><li>JSON 支持跨平台跨语言</li><li>具有较强的扩展性，JSON 模块还提供了编码（JSONEncoder）和解码类（JSONDecoder），以便用户对其默认不支持的序列化类型进行扩展</li></ol><h2 id="建议-46：使用-traceback-获取栈信息"><a href="#建议-46：使用-traceback-获取栈信息" class="headerlink" title="建议 46：使用 traceback 获取栈信息"></a>建议 46：使用 traceback 获取栈信息</h2><p>常用方法：</p><ol><li>traceback.print_exception(type, value, traceback[, limit[, file]])，根据 limit 的设置打印栈信息，file 为 None 的情况下定位到 sys.stderr，否则写入到文件；<br>其中 type、value、traceback 这3个参数对应的值可以从 sys.exc_info() 中获取</li><li>traceback.print_exc(limit[, file])，为 print_exception 函数的缩写，不需要传入 type、value、traceback 这三个参数</li><li>traceback.format_exc([limit])，与 print_exc() 类似，区别在于返回形式为字符串</li><li>traceback.extract_stack([file[, limit]])，从当前栈帧中提取 trace 信息。</li></ol><h2 id="建议-47：使用-logging-记录日志信息"><a href="#建议-47：使用-logging-记录日志信息" class="headerlink" title="建议 47：使用 logging 记录日志信息"></a>建议 47：使用 logging 记录日志信息</h2><p>使用见 <span class="exturl" data-url="aHR0cDovL2hnb2xkZmlzaC5jb20vYmxvZ3MvYXJ0aWNsZS83Lw==" title="http://hgoldfish.com/blogs/article/7/">Python的日志系统<i class="fa fa-external-link"></i></span></p><h2 id="建议-48：使用-threading-模块编写多线程程序"><a href="#建议-48：使用-threading-模块编写多线程程序" class="headerlink" title="建议 48：使用 threading 模块编写多线程程序"></a>建议 48：使用 threading 模块编写多线程程序</h2><p>实际应用中推荐使用 threading 模块而不是 thread 模块：</p><ol><li>threading 模块对同步原语的支持更为完善和丰富</li><li>threading 模块在主线程和子线程交互上更为友好</li><li>thread 模块不支持守护线程</li><li>python3 中已经不存在 thread 模块</li></ol><p>使用见 <span class="exturl" data-url="aHR0cDovL2hnb2xkZmlzaC5jb20vYmxvZ3MvYXJ0aWNsZS84MC8=" title="http://hgoldfish.com/blogs/article/80/">Python中使用线程的技巧<i class="fa fa-external-link"></i></span></p><h2 id="建议-49：使用-Queue-使多线程编程更安全"><a href="#建议-49：使用-Queue-使多线程编程更安全" class="headerlink" title="建议 49：使用 Queue 使多线程编程更安全"></a>建议 49：使用 Queue 使多线程编程更安全</h2><h2 id="建议-50：利用模块实现单例模式"><a href="#建议-50：利用模块实现单例模式" class="headerlink" title="建议 50：利用模块实现单例模式"></a>建议 50：利用模块实现单例模式</h2><h2 id="建议-51：用-mixin-模式让程序更加灵活"><a href="#建议-51：用-mixin-模式让程序更加灵活" class="headerlink" title="建议 51：用 mixin 模式让程序更加灵活"></a>建议 51：用 mixin 模式让程序更加灵活</h2><h2 id="建议-52：用发布订阅模式实现松耦合"><a href="#建议-52：用发布订阅模式实现松耦合" class="headerlink" title="建议 52：用发布订阅模式实现松耦合"></a>建议 52：用发布订阅模式实现松耦合</h2><h2 id="建议-53：用状态模式美化代码"><a href="#建议-53：用状态模式美化代码" class="headerlink" title="建议 53：用状态模式美化代码"></a>建议 53：用状态模式美化代码</h2><h2 id="建议-54：理解-built-in-objects"><a href="#建议-54：理解-built-in-objects" class="headerlink" title="建议 54：理解 built-in objects"></a>建议 54：理解 built-in objects</h2><p>Python 一切皆对象。<br>自 Python2.2 之后，为了弥补内建类型和古典类之间的鸿沟，引入了新式类。<br>新式类中，object 是所有内建类型的积累，用户定义的类可以继承自 object 也可继承自内建类型。</p><blockquote><p>这里的鸿沟指的是：在 2.2 版本之前，类和类型并不统一，如 a 是古典类 ClassA 的一个实例，那么 <code>a.__class__</code> 返回 <code>&#39;class__main__ClassA&#39;</code>，<code>type(a)</code> 返回 <code>&lt;type&#39;instalce&#39;&gt;</code>。当引入新类后，比如 ClassB 是个新类，b 是 ClassB 的实例，b.<strong>class</strong> 和 type(b) 都是返回 <code>&#39;class__main__.ClassB&#39;</code></p></blockquote><p>新式类相对于古典类来说有很多优势：能够基于内建类型构建新的用户类型，支持 property 和描述符特性等。</p><h2 id="建议-55：-init-不是构造方法"><a href="#建议-55：-init-不是构造方法" class="headerlink" title="建议 55：__init__() 不是构造方法"></a>建议 55：<code>__init__()</code> 不是构造方法</h2><p>实际上 <code>__init__()</code> 并不是真正意义上的构造方法，<code>__init__()</code>方法所做的工作是在类的对象创建好之后进行变量的初始化。<code>__new__()</code>方法才会真正创建实例，是类的构方法。</p><p>两个方法之间的不同点，总结如下：</p><ul><li><code>object.__new__(cls[, args...])</code>：其中 cls 代表类，args 为参数列表</li><li><code>object.__init__(self[, args...])</code>：其中 self 代表实例对象，args 为参数列表</li><li><code>__new__()</code> 方法是静态方法，<code>__init__()</code> 为实例方法</li><li><code>__new__()</code> 方法一般需要返回类的对象，当返回类的对象时将会自动调用 <code>__init__()</code> 方法进行初始化，如果没有对象返回，则 <code>__init__()</code> 方法不会被调用。 <code>__init__()</code> 方法不需要显式返回，默认为 None，否则会在运行时抛出 TypeError</li><li>当需要控制实例创建的时候可使用 <code>__new__()</code> 方法，而控制实例初始化的时候用 <code>__init__()</code> 方法</li><li>一般情况下不需要覆盖 <code>__new__()</code> 方法，但当子类继承自不可变类型，如 str、int、unicode 或者 tuple 的时候，往往需要覆盖该方法。</li><li>当需要覆盖 <code>__new__()</code> 和 <code>__init__()</code> 方法的时候这两个方法的参数必须保持一致，如果不一致将会导致异常。</li></ul><p>什么特殊情况下需要覆盖 <code>__new__()</code> 方法呢？</p><ol><li>当类继承不可变类型且默认的 <code>__new__()</code> 方法不能满足需求的时候。</li><li>用来实现工厂模式或者单例模式或者进行元类便哼的时候</li><li>作为用来初始化的 <code>__init__()</code> 方法在多继承的情况下，子类的 <code>__init__()</code> 方法如果不显式调用父类的 <code>__init__()</code> 方法，则父类的 <code>__init__()</code> 方法不会被调用。</li></ol><h2 id="建议-56：理解名字查找机制"><a href="#建议-56：理解名字查找机制" class="headerlink" title="建议 56：理解名字查找机制"></a>建议 56：理解名字查找机制</h2><p>在 Python 中，所有所谓的变量其实都是名字，这些名字指向一个或者多个 Python 对象。</p><p>Python 中有 4 中作用域：</p><ul><li><strong>局部作用域</strong>：一般来说函数的每次调用都会创建一个新的本地作用于，拥有新的命名空间。</li><li><strong>全局作用域</strong>：定义在Python模块文件中的变量名拥有全局作用域，需要注意的是这里的全局仅限单个文件，即在一个文件的顶层的变量名仅在这个文件内可见，并非所有的文件，其他文件中想使用这些变量必须先导入文件对应的模块</li><li><strong>嵌套作用域</strong>：一般在多重函数嵌套的情况下才会考虑到，在嵌套作用域的情况下，如果想在嵌套的函数内修改外层函数中定义的变量，即使使用 global 进行声明也不能达到目的，其结果最终是在嵌套的函数所在的命名空间中创建了一个新的变量。</li><li><strong>内置作用域</strong>：通过一个标准库名为 <code>__builtin__</code> 的模块来实现的。</li></ul><p>Python 的名字查找机制如下：</p><ol><li>在最内层范围内查找，一般而言就是函数内部，即在 locals() 里面查找</li><li>在模块内查找，即在 globals() 里面查找</li><li>在外层查找，即在内置模块中查找，也就是在 <code>__builtin__</code> 中查找</li></ol><p>若要修改全局变量，在 Python3 中可以使用 nonlocal 来声明变量</p><h2 id="建议-57：为什么需要-self-参数"><a href="#建议-57：为什么需要-self-参数" class="headerlink" title="建议 57：为什么需要 self 参数"></a>建议 57：为什么需要 self 参数</h2><ol><li>Python 在当初设计的时候借鉴了其他语言的一些特征，如 Moudla-3 中方法会显示的在参数列表中传入 self。</li><li>Python 语言本身的动态性决定了使用 self 能够带来一定便利。</li><li>在存在同名的局部变量以及实例变量的情况下使用 self 使得实例变量更容易被区分</li></ol><h2 id="建议-58：理解-MRO-与多继承"><a href="#建议-58：理解-MRO-与多继承" class="headerlink" title="建议 58：理解 MRO 与多继承"></a>建议 58：理解 MRO 与多继承</h2><h2 id="建议-59：理解描述符机制"><a href="#建议-59：理解描述符机制" class="headerlink" title="建议 59：理解描述符机制"></a>建议 59：理解描述符机制</h2><h2 id="建议-60：区别-getattr-和-getattribute-方法"><a href="#建议-60：区别-getattr-和-getattribute-方法" class="headerlink" title="建议 60：区别 __getattr__() 和 __getattribute__() 方法"></a>建议 60：区别 <code>__getattr__()</code> 和 <code>__getattribute__()</code> 方法</h2><p><code>__getattr__()</code> 和 <code>__getattribute__()</code> 都可以用作实例属性的获取和拦截（仅对实例属性）<br><code>__getattr__()</code> 适用于未定义的属性，即该属性在实例中以及对应的类的基类以及祖先类中都不存在<br><code>__getattribute__()</code> 对于所有属性的访问都会调用该方法，仅应用于新式类</p><p>覆盖这些方法时，几点注意事项：</p><ol><li>避免无穷递归。例如：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__dict__[attr]</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'default'</span></span><br></pre></td></tr></table></figure></div></li></ol><p>属性的访问调用的是覆盖的 <code>__getattribute__()</code> 方法，而该方法中 <code>self.__dict__[attr]</code> 又要调用 <code>__getattribute__(self, attr)</code>，于是产生了无穷递归。正确方法是使用 <code>super(obj, self).__getattribute__(attr)</code>。</p><ol start="2"><li>访问未定义的属性。如果在 <code>__getattribute__()</code> 方法中不抛出 AttributeError 异常或者显示返回一个值，则会返回 None，此时可能会影响到程序的实际运行预期</li><li>覆盖了 <code>__getattribute__()</code> 方法之后，任何属性的访问都会调用用户定义的 <code>__getattribute__()</code> 方法，性能上会有损耗</li><li>覆盖的 <code>__getattr__()</code> 方法如果能够动态处理事先未定义的属性，可以更好的实现数据隐藏。</li></ol><blockquote><p><code>__getattribute__()</code> 总是会被调用，而 <code>__getattr__()</code> 只有在 <code>__getattribute__()</code> 中引发异常的情况下才会被调用。</p></blockquote><h2 id="建议-61：使用更为安全的-property"><a href="#建议-61：使用更为安全的-property" class="headerlink" title="建议 61：使用更为安全的 property"></a>建议 61：使用更为安全的 property</h2><p>property 是用来实现属性可管理性的 built-in 数据类型，其实质是一种特殊的数据描述符。<br>它和普通描述符的区别在于：普通描述符提供的是一种较为低级的控制属性访问的机制，而 property 是它的高级应用，它以标准库的形式提供描述符的实现，其签名形式为：<br><code>property(fget=None, fset=None, fdel=None, doc=None) -&gt; property attribute</code></p><p>property 的优势可以简单概括为以下几点：</p><ol><li>代码更简洁，可读性更强。</li><li>更好的管理属性的访问</li><li>代码可维护性更好</li><li>控制属性访问权限，提高数据安全性</li></ol><h2 id="建议-62：掌握-metaclass"><a href="#建议-62：掌握-metaclass" class="headerlink" title="建议 62：掌握 metaclass"></a>建议 62：掌握 metaclass</h2><p>什么是元类？</p><ul><li>元类是关于类的类，是类的模板</li><li>元类是用来控制如何创建类的，正如类是创建对象的模板一样</li><li>元类的实例为类，正如类的实例为对象</li></ul><p>元类需要注意的几点：</p><ol><li>区别类方法与元方法</li><li>多继承需要严格限制，否则会产生冲突</li></ol><blockquote><p>元类用来指导类的生成，元方法可以从元类或者类中调用，不能从类的实例中调用，而类方法既可以从类中调用，也可以从类的实例中调用。</p></blockquote><h2 id="建议-63：-熟悉-Python-对象协议"><a href="#建议-63：-熟悉-Python-对象协议" class="headerlink" title="建议 63： 熟悉 Python 对象协议"></a>建议 63： 熟悉 Python 对象协议</h2><ol><li><p>用以比较大小的协议，这个协议依赖于 <code>__cmp__()</code> 方法，相等返回0，小于返回负值，大于返回正值。<br>还有其他诸如 <code>__eq__()</code>、<code>__ne__()</code>、<code>__lt__()</code>、<code>__gt__()</code> 等方法来实现相等、不等、小于和大于的判定。这也就是 Python 对 ==、!=、&lt; 和 &gt; 等操作符的进行重载的支撑机制</p></li><li><p>数值类型相关的协议</p></li></ol><table><thead><tr><th align="left">分类</th><th align="left">方法</th><th align="center">操作符 / 函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">数值运算符</td><td align="left"><code>__add__</code></td><td align="center">+</td><td align="left">加</td></tr><tr><td align="left"></td><td align="left"><code>__sub__</code></td><td align="center">-</td><td align="left">减</td></tr><tr><td align="left"></td><td align="left"><code>__mul__</code></td><td align="center">*</td><td align="left">乘</td></tr><tr><td align="left"></td><td align="left"><code>__div__</code></td><td align="center">/</td><td align="left">除</td></tr><tr><td align="left"></td><td align="left"><code>__floordiv__</code></td><td align="center">//</td><td align="left">整除</td></tr><tr><td align="left"></td><td align="left"><code>__truediv__</code></td><td align="center">/</td><td align="left">真除法，当 <code>__future__.division</code> 起作用时调用，否则调用 <code>__div__</code></td></tr><tr><td align="left"></td><td align="left"><code>__pow__</code></td><td align="center">**</td><td align="left">幂运算</td></tr><tr><td align="left"></td><td align="left"><code>__mod__</code></td><td align="center">%</td><td align="left">模运算</td></tr><tr><td align="left"></td><td align="left"><code>__divmod__</code></td><td align="center">divmod()</td><td align="left">余、除</td></tr><tr><td align="left">位运算符</td><td align="left"><code>__lshift__</code></td><td align="center">&lt;&lt;</td><td align="left">向左移位</td></tr><tr><td align="left"></td><td align="left"><code>__rshift__</code></td><td align="center">&gt;&gt;</td><td align="left">向右移位</td></tr><tr><td align="left"></td><td align="left"><code>__and__</code></td><td align="center">&amp;</td><td align="left">与</td></tr><tr><td align="left"></td><td align="left"><code>__or__</code></td><td align="center">or 那个符号</td><td align="left">或</td></tr><tr><td align="left"></td><td align="left"><code>__xor__</code></td><td align="center">^</td><td align="left">异或</td></tr><tr><td align="left"></td><td align="left"><code>__invert__</code></td><td align="center">~</td><td align="left">非</td></tr><tr><td align="left">运算赋值符</td><td align="left"><code>__iadd__</code></td><td align="center">+=</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>__isub__</code></td><td align="center">-=</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>__imul__</code></td><td align="center">*=</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>__idiv__</code></td><td align="center">/=</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>__ifloordiv__</code></td><td align="center">//=</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>__itruediv__</code></td><td align="center">/=</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>__ipow__</code></td><td align="center">**=</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>__imod__</code></td><td align="center">%=</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>__ilshift__</code></td><td align="center">&lt;&lt;=</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>__irshift__</code></td><td align="center">&gt;&gt;=</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>__iand__</code></td><td align="center">&amp;=</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>__ior__</code></td><td align="center">|=</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"><code>__ixor__</code></td><td align="center">^=</td><td align="left"></td></tr><tr><td align="left">其他</td><td align="left"><code>__pos__</code></td><td align="center">+</td><td align="left">正</td></tr><tr><td align="left"></td><td align="left"><code>__neg__</code></td><td align="center">-</td><td align="left">负</td></tr><tr><td align="left"></td><td align="left"><code>__abs__</code></td><td align="center">abs()</td><td align="left">绝对值</td></tr></tbody></table><ol start="3"><li><p>容器类型协议。<br><code>__len__()</code> 支持内置函数 len()<br><code>__getitem__()</code>、<code>__setitem__()</code>、<code>__delitem__()</code> 对应读、写、删除<br><code>__iter__()</code> 对应迭代器<br><code>__reversed__()</code> 支持内置函数 reversed()<br><code>__contains__()</code> 支持使用 in 和 not in 运算符</p></li><li><p>可调用对象协议 <code>__call__()</code></p></li><li><p>与可调用对象差不多的，还有一个可哈希对象，他是用过 <code>__hash__()</code> 方法来支持 hash() 这个内置函数的</p></li><li><p>描述符协议和属性交互协议（<code>__getattr__()</code>、<code>__setattr__()</code>、<code>__delattr__()</code>）</p></li><li><p>上下文管理器协议<br>这个协议通过 <code>__enter__()</code> 和 <code>__exit__()</code> 这两个方法来实现对资源的清理。</p></li></ol><h2 id="建议-64：利用操作符重载实现中缀语法"><a href="#建议-64：利用操作符重载实现中缀语法" class="headerlink" title="建议 64：利用操作符重载实现中缀语法"></a>建议 64：利用操作符重载实现中缀语法</h2><p>可以安装 pipe 来实现 <code>pip install pipe</code></p><h2 id="建议-65：熟悉-Python-的迭代器协议"><a href="#建议-65：熟悉-Python-的迭代器协议" class="headerlink" title="建议 65：熟悉 Python 的迭代器协议"></a>建议 65：熟悉 Python 的迭代器协议</h2><p>迭代器协议归纳：</p><ol><li>实现 <code>__iter__()</code> 方法，返回一个迭代器</li><li>实现 next() 方法，返回当前的元素，并指向下一个元素的为止，如果当前为止已无元素，则抛出 StopIteration 异常</li></ol><h2 id="建议-66：熟悉-Python-的生成器"><a href="#建议-66：熟悉-Python-的生成器" class="headerlink" title="建议 66：熟悉 Python 的生成器"></a>建议 66：熟悉 Python 的生成器</h2><p>如果一个函数使用了 yield 语句，那么它就是一个生成器函数。<br>每一个生成器函数调用之后，它的函数体并不执行，而是到第一次调用 next() 的时候才开始执行，执行到 yield 表达式为止。</p><h2 id="建议-67：基于生成器的协程及-greenlet"><a href="#建议-67：基于生成器的协程及-greenlet" class="headerlink" title="建议 67：基于生成器的协程及 greenlet"></a>建议 67：基于生成器的协程及 greenlet</h2><h2 id="建议-68：理解-GIL-的局限性"><a href="#建议-68：理解-GIL-的局限性" class="headerlink" title="建议 68：理解 GIL 的局限性"></a>建议 68：理解 GIL 的局限性</h2><p>针对这种，不建议高密集的计算使用多线程，建议堵塞I/O的使用..</p><h2 id="建议-69：对象的管理与垃圾回收"><a href="#建议-69：对象的管理与垃圾回收" class="headerlink" title="建议 69：对象的管理与垃圾回收"></a>建议 69：对象的管理与垃圾回收</h2><p>Python 使用引用计数器的方法来管理内存中的对象，即针对每一个对象维护一个引用计数值来表示该对象当前有多少个引用。<br>引用计数算法最明显的缺点是无法解决循环引用的问题，即两个对象相互引用。</p><p>我们可以使用自带的 gc 模块来跟踪对象的 “入引用” 和 “出引用”。</p><h2 id="建议-70：从-PyPi-安装包"><a href="#建议-70：从-PyPi-安装包" class="headerlink" title="建议 70：从 PyPi 安装包"></a>建议 70：从 PyPi 安装包</h2><p>PyPi 全称 Python Package Index，直译过来就是 Python包索引，它是Python编程语言的软件仓库。</p><h2 id="建议-71：使用-pip-和-yolk-安装、管理包"><a href="#建议-71：使用-pip-和-yolk-安装、管理包" class="headerlink" title="建议 71：使用 pip 和 yolk 安装、管理包"></a>建议 71：使用 pip 和 yolk 安装、管理包</h2><h2 id="建议-72：做-paster-创建包"><a href="#建议-72：做-paster-创建包" class="headerlink" title="建议 72：做 paster 创建包"></a>建议 72：做 paster 创建包</h2><h2 id="建议-73：理解单元测试概念"><a href="#建议-73：理解单元测试概念" class="headerlink" title="建议 73：理解单元测试概念"></a>建议 73：理解单元测试概念</h2><p>单元测试带来以下好处：</p><ul><li>减少了潜在 bug，提高了代码的质量。</li><li>大大缩减软件修复的成本。</li><li>为集成测试提供基本保障</li></ul><p>有效的单元测试应该从以下几个方面考虑：</p><ol><li>测试先行，遵循单元测试步骤。</li></ol><ul><li>创建测试计划</li><li>编写测试用例，准备测试数据</li><li>编写测试脚本</li><li>边界被测试代码，在代码完成之后执行测试脚本</li><li>修正代码缺陷，重新测试直到代码可接受为止。</li></ul><ol start="2"><li>遵循单元测试基本原则</li></ol><ul><li>一致性</li><li>原子性</li><li>单一职责</li><li>隔离性</li></ul><ol start="3"><li>使用单元测试框架 unittest。<br>unittest 相关的概念主要有以下四个：</li></ol><ul><li>测试固件。测试相关的准备工作和清理工作，基于类 TestCase 差个内奸测试固件的时候通常需要重新实现 setUp() 和 tearDown() 方法。</li><li>测试用例。最小的测试单元，通常基于 TestCase 构建</li><li>测试用例集，测试用例的集合，使用 TestSuite 类来实现</li><li>测试运行器，控制和驱动整个单元测试过程，一般使用 TestRunner 类作为测试用例的基本执行环境，常用的运行器为 TextTestRunner，它是 TestRunner 的子类，以文字方式运行测试并报告结果。</li></ul><h2 id="建议-74：为包编写单元测试-nose"><a href="#建议-74：为包编写单元测试-nose" class="headerlink" title="建议 74：为包编写单元测试 nose"></a>建议 74：为包编写单元测试 nose</h2><h2 id="建议-75：利用测试驱动开发提高代码的可测性"><a href="#建议-75：利用测试驱动开发提高代码的可测性" class="headerlink" title="建议 75：利用测试驱动开发提高代码的可测性"></a>建议 75：利用测试驱动开发提高代码的可测性</h2><p>测试驱动开发流程：</p><ol><li>编写部分测试用例，并运行测试</li><li>如果测试用过，则回到测试用例编写的步骤，继续添加新的测试用例</li><li>如果测试失败，则修改代码直到测试通过</li><li>当所有测试用例编写完成并通过测试之后，再来考虑对代码进行重构</li></ol><p>关于测试驱动开发和提高代码可测性方面有几点说明：</p><ul><li>TDD 只是手段而不是目的，因此在实践中尽量只验证正确的事情，并且每次仅仅验证一件事儿。</li><li>测试驱动开发本身就是一门学问，不要指望通过一个简单的例子就掌握其精髓。</li><li>代码的不可测性可以从以下几个方面考量：<br>实践 TDD 困难；外部依赖太多；<br>需要写很多模拟代码才能完成测试；<br>职责太多导致功能模糊；<br>内部状态过多且没有办法去操作和维护这些状态；<br>函数没有明显返回或者参数过多；<br>低内聚高耦合等等</li></ul><h2 id="建议-76：使用-Pylint-检查代码风格"><a href="#建议-76：使用-Pylint-检查代码风格" class="headerlink" title="建议 76：使用 Pylint 检查代码风格"></a>建议 76：使用 Pylint 检查代码风格</h2><p>我使用 PyChrame 貌似内置..严格遵循 PEP8 标准</p><h2 id="建议-77：进行高效的代码审查"><a href="#建议-77：进行高效的代码审查" class="headerlink" title="建议 77：进行高效的代码审查"></a>建议 77：进行高效的代码审查</h2><h2 id="建议-78：将包发布到-PyPI"><a href="#建议-78：将包发布到-PyPI" class="headerlink" title="建议 78：将包发布到 PyPI"></a>建议 78：将包发布到 PyPI</h2><h2 id="建议-79：了解代码优化的基本原则"><a href="#建议-79：了解代码优化的基本原则" class="headerlink" title="建议 79：了解代码优化的基本原则"></a>建议 79：了解代码优化的基本原则</h2><ol><li>优先保证代码是可工作的</li><li>权衡优化的代价</li><li>定义性能指标，集中力量解决首要问题</li><li>不要忽略可读性</li></ol><h2 id="建议-80：借助性能优化工具"><a href="#建议-80：借助性能优化工具" class="headerlink" title="建议 80：借助性能优化工具"></a>建议 80：借助性能优化工具</h2><p>例如 Pypy</p><h2 id="建议-81：利用-cProfile-定位性能瓶颈"><a href="#建议-81：利用-cProfile-定位性能瓶颈" class="headerlink" title="建议 81：利用 cProfile 定位性能瓶颈"></a>建议 81：利用 cProfile 定位性能瓶颈</h2><p>cProfile 的统计结果及其各项意义</p><table><thead><tr><th align="left">统计项</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">ncalls</td><td align="left">函数的被调用次数</td></tr><tr><td align="left">tottime</td><td align="left">函数总计运行时间，不含调用的函数运行时间</td></tr><tr><td align="left">percall</td><td align="left">函数运行一次的平均时间，等于 tottime/ncalls</td></tr><tr><td align="left">cumtime</td><td align="left">函数总计运行时间，含调用的函数运行时间</td></tr><tr><td align="left">percall</td><td align="left">函数一次运行的平均时间，等于 cumtime/ncalls</td></tr><tr><td align="left">filename:lineno(function)</td><td align="left">函数所在的文件名、函数行号、函数名</td></tr></tbody></table><p>Stats 提供了对 cProfile 输出结果进行排序、输出控制等功能。</p><p>Stats 函数以及对应作用</p><table><thead><tr><th align="left">函数</th><th align="left">函数的作用</th></tr></thead><tbody><tr><td align="left">strip_dirs()</td><td align="left">用以除去文件名前面的路径信息</td></tr><tr><td align="left">add(filename[,…])</td><td align="left">把 profile 的输出文件加入 Stats 实例中统计</td></tr><tr><td align="left">dump_stats(filename)</td><td align="left">把 Stats 的统计结果保存到文件</td></tr><tr><td align="left">sort_stats(key[,…])</td><td align="left">用以排序 Profile 的输出</td></tr><tr><td align="left">reverse_order()</td><td align="left">把 Stats 实例里的数据反序重排</td></tr><tr><td align="left">print_stats([restriction, …])</td><td align="left">把 Stats 报表输出到 stdout</td></tr><tr><td align="left">print_callers([restriction, …])</td><td align="left">输出调用了指定的函数的相关信息</td></tr><tr><td align="left">print_callees([restriction, …])</td><td align="left">输出指定的函数调用过的函数的相关信息</td></tr></tbody></table><p>sort_stats 可接受参数列表</p><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">ncalls</td><td align="left">被调用次数</td></tr><tr><td align="left">cumulative</td><td align="left">函数运行的总时间</td></tr><tr><td align="left">file</td><td align="left">文件名</td></tr><tr><td align="left">module</td><td align="left">模块名</td></tr><tr><td align="left">pcalls</td><td align="left">简单的调用统计</td></tr><tr><td align="left">line</td><td align="left">行号</td></tr><tr><td align="left">name</td><td align="left">函数名</td></tr><tr><td align="left">nfl</td><td align="left">Name、file、line</td></tr><tr><td align="left">stdname</td><td align="left">标准函数名</td></tr><tr><td align="left">time</td><td align="left">函数内部运行时间，不计调用子函数的时间</td></tr></tbody></table><h2 id="建议-82：使用-memory-profiler-和-objgraph-剖析内存使用"><a href="#建议-82：使用-memory-profiler-和-objgraph-剖析内存使用" class="headerlink" title="建议 82：使用 memory_profiler 和 objgraph 剖析内存使用"></a>建议 82：使用 memory_profiler 和 objgraph 剖析内存使用</h2><h2 id="建议-83：努力降低算法复杂度"><a href="#建议-83：努力降低算法复杂度" class="headerlink" title="建议 83：努力降低算法复杂度"></a>建议 83：努力降低算法复杂度</h2><p>常见数据结构基本操作的时间复杂度</p><table><thead><tr><th align="left">数据结构</th><th align="left">操作</th><th align="left">平均时间复杂度</th><th align="left">最差时间复杂度</th></tr></thead><tbody><tr><td align="left">list</td><td align="left">复制</td><td align="left">O(<em>n</em>)</td><td align="left">O(<em>n</em>)</td></tr><tr><td align="left"></td><td align="left">追加、取元素的值，给某个元素赋值</td><td align="left">O(<em>1</em>)</td><td align="left">O(<em>1</em>)</td></tr><tr><td align="left"></td><td align="left">插入、删除某个元素，迭代操作</td><td align="left">O(<em>n</em>)</td><td align="left">O(<em>n</em>)</td></tr><tr><td align="left"></td><td align="left">切片操作</td><td align="left">O(<em>k</em>)</td><td align="left">O(<em>k</em>)</td></tr><tr><td align="left">set</td><td align="left">x in s</td><td align="left">O(<em>1</em>)</td><td align="left">O(<em>n</em>)</td></tr><tr><td align="left"></td><td align="left">并 s or t</td><td align="left">O(len(<em>s</em>)+len(<em>t</em>))</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">交 s&amp;t</td><td align="left">O(min(len(<em>s</em>), len(<em>t</em>)))</td><td align="left">O(len(<em>s</em>) * len(<em>t</em>))</td></tr><tr><td align="left"></td><td align="left">差 s-t</td><td align="left">O(len(<em>s</em>))</td><td align="left"></td></tr><tr><td align="left">dict</td><td align="left">获取修改元素的值，删除</td><td align="left">O(<em>1</em>)</td><td align="left">O(<em>n</em>)</td></tr><tr><td align="left"></td><td align="left">迭代操作</td><td align="left">O(<em>n</em>)</td><td align="left">O(<em>n</em>)</td></tr><tr><td align="left">collections.deque</td><td align="left">入列、出列、（包括左边出入列）</td><td align="left">O(<em>1</em>)</td><td align="left">O(<em>n</em>)</td></tr><tr><td align="left"></td><td align="left">扩大队列</td><td align="left">O(<em>k</em>)</td><td align="left">O(<em>k</em>)</td></tr><tr><td align="left"></td><td align="left">删除元素</td><td align="left">O(<em>n</em>)</td><td align="left">O(<em>n</em>)</td></tr></tbody></table><h2 id="建议-84：掌握循环优化的基本技巧"><a href="#建议-84：掌握循环优化的基本技巧" class="headerlink" title="建议 84：掌握循环优化的基本技巧"></a>建议 84：掌握循环优化的基本技巧</h2><ol><li>减少循环内部的计算</li><li>将显式循环改为隐式循环</li><li>在循环中尽量引用局部变量</li><li>关注内层嵌套循环</li></ol><h2 id="建议-85：使用生成器提高效率"><a href="#建议-85：使用生成器提高效率" class="headerlink" title="建议 85：使用生成器提高效率"></a>建议 85：使用生成器提高效率</h2><p>生成器的优点有如下几条：</p><ul><li>生成器提供了一种更为便利的产生迭代器的方式，用户一般不需要自己实现 <code>__iter__</code> 和 <code>next</code> 方法，它默认返回一个迭代器</li><li>代码更为简洁、优雅</li><li>充分利用了延迟评估的特性，仅在需要的时候才产生对应的元素，而不是一次生成所有的元素，从而节省了内存空间，提高效率</li><li>使得协程更为容易实现。（Python3.5 中引入了 async 和 wait 关键字）</li></ul><h2 id="建议-86：使用不同的数据结构优化性能"><a href="#建议-86：使用不同的数据结构优化性能" class="headerlink" title="建议 86：使用不同的数据结构优化性能"></a>建议 86：使用不同的数据结构优化性能</h2><h2 id="建议-87：充分利用-set-的优势"><a href="#建议-87：充分利用-set-的优势" class="headerlink" title="建议 87：充分利用 set 的优势"></a>建议 87：充分利用 set 的优势</h2><h2 id="建议-88：使用-multiprocessing-克服-GIL-的缺陷"><a href="#建议-88：使用-multiprocessing-克服-GIL-的缺陷" class="headerlink" title="建议 88：使用 multiprocessing 克服 GIL 的缺陷"></a>建议 88：使用 multiprocessing 克服 GIL 的缺陷</h2><p>Multiprocessing 模块在使用上需要注意以下几个要点：</p><ol><li>进程之间的通信优先考虑 Pipe 和 Queue，而不是 Lock、Event、Condition、Semaphore 等同步原语</li><li>尽量避免资源共享。如果不可避免，可以通过 multiprocessing.Value 和 multiprocessing.Array 或者 multiprocessing.sharedctype 来实现内存共享。<br>也可以通过服务器进程管理器 Manager() 来实现数据和状态的共享。</li><li>注意平台之间的差异。</li><li>尽量避免使用 terminate() 方式终止进程，并且确保 pool.map 中传入的参数是可以序列化的</li></ol><h2 id="建议-89：使用线程池提高效率"><a href="#建议-89：使用线程池提高效率" class="headerlink" title="建议 89：使用线程池提高效率"></a>建议 89：使用线程池提高效率</h2><h2 id="建议-90：使用-C-C-模块扩展提高性能"><a href="#建议-90：使用-C-C-模块扩展提高性能" class="headerlink" title="建议 90：使用 C/C++ 模块扩展提高性能"></a>建议 90：使用 C/C++ 模块扩展提高性能</h2><h2 id="建议-91：使用-Cython-编写扩展模块"><a href="#建议-91：使用-Cython-编写扩展模块" class="headerlink" title="建议 91：使用 Cython 编写扩展模块"></a>建议 91：使用 Cython 编写扩展模块</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《编写高质量代码：改善-Python-程序的-91-个建议》-学习笔记&quot;&gt;&lt;a href=&quot;#《编写高质量代码：改善-Python-程序的-91-个建议》-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;《编写高质量代码：改善 Python 程序的 91 个建议》 学习笔记&quot;&gt;&lt;/a&gt;《编写高质量代码：改善 Python 程序的 91 个建议》 学习笔记&lt;/h1&gt;&lt;p&gt;之前自己学了很多次 Python，由于用不到，所以总是学完就忘掉了。&lt;br&gt;刚好最近工作需要用到 Python，就借此机会好好学习了一番。&lt;br&gt;Pyhton 的各种特性和风格让我甚是喜欢。不过我总是感觉自己写的代码不是那么漂亮，不够 Pythonic。&lt;br&gt;所以我想通过学习一些经典建议来让我有个思路。&lt;/p&gt;
    
    </summary>
    
      <category term="Language" scheme="https://mirokaku.github.io/Blog/categories/Language/"/>
    
    
      <category term="Python" scheme="https://mirokaku.github.io/Blog/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>http &amp; http2  学习</title>
    <link href="https://mirokaku.github.io/Blog/2016/http-http2-learn/"/>
    <id>https://mirokaku.github.io/Blog/2016/http-http2-learn/</id>
    <published>2016-07-31T03:42:35.000Z</published>
    <updated>2017-05-12T03:58:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1"></a>HTTP 1.1</h1><p>Web 使用一种名为 HTTP(HyperText Transfer Protocol, 超文本传输协议/超文本转移协议)的协议作为规范，完成从客户端到服务端等一系列运作流程。</p><a id="more"></a><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVENQL0lQJUU1JThEJThGJUU4JUFFJUFFJUU2JTk3JThG" title="https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F">TCP/IP 协议族<i class="fa fa-external-link"></i></span> 里重要的一点就是分层。TCP/IP 协议族按层次分别分为以下4层：应用层、传输层、网络层和数据链路层。</p><p>TCP/IP 协议族各层的作用如下：</p><p><strong>应用层</strong></p><p>应用层决定了向用户提供应用服务时通信的活动。<br>TCP/IP 协议族内预存了各类通用的应用服务，比如，FTP(File Transfer Protocol, 文件传输协议) 和 DNS(Domain Name System, 域名系统) 服务就是其中两类。</p><p><strong>传输层</strong></p><p>传输层对上层应用层提供处于网络连接中的两台计算机之间的数据传输。<br>在传输层有两个性质不同的协议：TCP(Transmission Control Protocol, 传输控制协议) 和 UDP(User ata Protocol) 用户数据报协议。</p><p><strong>网络层 (又名网络互连层)</strong></p><p>网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径 (所谓的传输路线) 到达对方计算机，并把数据包传送给对方。<br>与对方计算机之间通过多台计算机或万灵果设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。</p><p><strong>链路层 (又名数据链路层，网络接口层)</strong></p><p>用来处理链接网络的硬件部分。包括控制操作系统、硬件的设备驱动，NIC(Network Interface Card, 网络适配器，即网卡)，及光纤等物理可见部分 (还包括连接器等一切传输媒介)。硬件上的范畴均在链路层的作用范围之内。</p><p><img src="TCPIP.png" alt></p><p>发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。<br>这种把信息包装起来的做法称为封装 (encapsulate)。</p><p>详细学习见《TCP/IP 详解》</p><p><strong>HTTP/1.0 和 HTTP/1.1 支持的方法</strong></p><table><thead><tr><th align="left">方法</th><th align="left">说明</th><th align="left">支持的 HTTP 协议版本</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">获取资源</td><td align="left">1.0、1.1</td></tr><tr><td align="left">POST</td><td align="left">传输实体主体</td><td align="left">1.0、1.1</td></tr><tr><td align="left">PUT</td><td align="left">传输文件</td><td align="left">1.0、1.1</td></tr><tr><td align="left">HEAD</td><td align="left">获得报文头部</td><td align="left">1.0、1.1</td></tr><tr><td align="left">DELETE</td><td align="left">删除文件</td><td align="left">1.0、1.1</td></tr><tr><td align="left">OPTIONS</td><td align="left">询问支持的方法</td><td align="left">1.1</td></tr><tr><td align="left">TRACE</td><td align="left">追踪路径</td><td align="left">1.1</td></tr><tr><td align="left">CONNECT</td><td align="left">要求用隧道协议连接代理</td><td align="left">1.1</td></tr><tr><td align="left">LINK</td><td align="left">建立和资源之间的联系</td><td align="left">1.0</td></tr><tr><td align="left">UNLINK</td><td align="left">断开连接关系</td><td align="left">1.0</td></tr></tbody></table><p><strong>持久连接</strong></p><p>HTTP 协议的初始版本中，每进行一次 HTTP 通信就要断开一次 TCP 连接。<br>每次的请求都会造成无谓的 TCP 连接建立和断开，增加通信量的开销。<br>为了解决持久连接的问题，HTTP/1.1 和 一部分的 HTTP/1.0 相处了持久连接 (HTTP Persistent Connections, 也称为 HTTP keep-alive 或 HTTP connection reuse) 的方法。<br>持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。</p><h2 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h2><p>用于HTTP协议交互的信息被称为 HTTP 报文。请求端 (客户端) 的 HTTP 报文叫做请求报文，响应端 (服务器端) 的叫做响应报文。HTTP 报文本身是由多行 (用 CR+LF 作换行符) 数据构成的字符串文本。<br>HTTP 报文大致可分为报文首部和报文主体两块。两个由最初出现的空行来划分。通常并不一定有报文主体。</p><p><img src="%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%841.png" alt><br><img src="%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%842.png" alt></p><p><strong>报文主体和实体主体</strong></p><ul><li>报文 (message)<br>是 HTTP 通信中的基本单位，由 8 位组字节流 (octet sequence, 其中 octet 为 8 个bit) 组成，通过 HTTP 通信传输。</li><li>实体 (entity)<br>作为请求或响应的有效载荷数据 (补充项) 被传输，其内容由实体首部和实体主体组成。</li></ul><p>HTTP 报文的主体用于传输请求或响应的实体主体。</p><p><strong>压缩传输的内容编码</strong></p><p>常用的内容编码有以下几种：</p><ul><li>gzip (GNU zip)</li><li>compress (UNIX 系统的标准压缩)</li><li>deflate (zlib)</li><li>identity (不进行编码)</li></ul><h2 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h2><table><thead><tr><th align="left">状态码</th><th align="left">类别</th><th align="left">原因短语</th></tr></thead><tbody><tr><td align="left">1XX</td><td align="left">Informational (信息性状态码)</td><td align="left">接受的请求正在处理</td></tr><tr><td align="left">2XX</td><td align="left">Success (成功状态码)</td><td align="left">请求正常处理完毕</td></tr><tr><td align="left">3XX</td><td align="left">Redirection (重定向状态码)</td><td align="left">需要进行附加操作以完成请求</td></tr><tr><td align="left">4XX</td><td align="left">Client Error (客户端错误状态码)</td><td align="left">服务器无法处理请求</td></tr><tr><td align="left">5XX</td><td align="left">Server Error (服务器错误状态码)</td><td align="left">服务器处理请求出错</td></tr></tbody></table><p><strong>2XX 成功</strong></p><ul><li>200 OK</li><li>204 No Content</li><li>206 Partial Content</li></ul><p><strong>3XX 重定向</strong></p><ul><li>301 Moved Permanently</li><li>302 Found</li><li>303 See Other</li><li>304 Not Modified<br>虽然 304 被分在 3XX 类别中，但是和重定向没有关系。</li></ul><p><strong>4XX 客户端错误</strong></p><ul><li>400 Bad Request</li><li>401 Unauthorized</li><li>403 Forbidden</li><li>404 Not Found</li></ul><p><strong>5XX 服务器错误</strong></p><ul><li>500 Internal Server Error</li><li>503 Service Unavailable</li></ul><p><strong>状态码和状况的不一致</strong></p><p>不少返回的状态码响应都是错误的，但是用户可能察觉不到这点。比如 Web 应用程序内部发生错误，状态码依然返回 200 OK，这种情况也经常遇到。</p><h2 id="HTTP-首部"><a href="#HTTP-首部" class="headerlink" title="HTTP 首部"></a>HTTP 首部</h2><p>在请求中，HTTP 报文由方法、URL、HTTP 版本、HTTP 首部字段等部分构成。<br><img src="%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png" alt></p><p>在响应中，HTTP 报文由 HTTP 版本、状态码 (数字和原因短语)、HTTP 首部字段 3 部分构成。<br><img src="%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.png" alt></p><p><strong>HTTP 首部字段</strong></p><p>HTTP 首部字段根据实际用途被分为以下4种类型：</p><ul><li>通用首部字段 (General Header Fields)<br>请求报文和响应报文两方都会使用的首部</li><li>请求首部字段 (Request Header Fields)<br>从客户端向服务端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。</li><li>响应首部字段 (Response Header Fields)<br>从服务端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。</li><li>实体首部字段 (Entity Header Fields)<br>针对请求报文和响应报文的额实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息。</li></ul><h3 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h3><ul><li>Cache-Control<br>通过制定首部字段 Cache-Control 的指令，就能操作缓存的工作机制。</li></ul><p>Cache-Control 指令一览：</p><p><strong>缓存请求指令</strong></p><table><thead><tr><th align="left">指令</th><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">no-cache</td><td align="left">无</td><td align="left">强制向源服务器再次验证</td></tr><tr><td align="left">no-store</td><td align="left">无</td><td align="left">不缓存请求或响应的任何内容</td></tr><tr><td align="left">max-age = [秒]</td><td align="left">必须</td><td align="left">响应最大的 Age 值</td></tr><tr><td align="left">max-stale( = [秒])</td><td align="left">可省略</td><td align="left">接收已过期的响应</td></tr><tr><td align="left">min-fresh = [秒]</td><td align="left">必需</td><td align="left">期望在指定时间内的响应仍有效</td></tr><tr><td align="left">no-transform</td><td align="left">无</td><td align="left">代理不可更改媒体类型</td></tr><tr><td align="left">only-if-cached</td><td align="left">无</td><td align="left">从缓存获取资源</td></tr><tr><td align="left">cache-extension</td><td align="left">-</td><td align="left">新指令标记 (token)</td></tr></tbody></table><p><strong>缓存响应指令</strong></p><table><thead><tr><th align="left">指令</th><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">public</td><td align="left">无</td><td align="left">可向任意方提供响应的缓存</td></tr><tr><td align="left">private</td><td align="left">可省略</td><td align="left">仅向特定用户返回响应</td></tr><tr><td align="left">no-cache</td><td align="left">可省略</td><td align="left">缓存前必须先确认其有效性</td></tr><tr><td align="left">no-store</td><td align="left">无</td><td align="left">不缓存请求或响应的任何内容</td></tr><tr><td align="left">no-transform</td><td align="left">无</td><td align="left">代理不可更改媒体类型</td></tr><tr><td align="left">must-revalidate</td><td align="left">无</td><td align="left">可缓存但必须再向源服务器进行确认</td></tr><tr><td align="left">proxy-revalidate</td><td align="left">无</td><td align="left">要求中间缓存服务器缓存的响应有效性再进行确认</td></tr><tr><td align="left">max-age = [秒]</td><td align="left">必须</td><td align="left">响应最大的 Age 值</td></tr><tr><td align="left">s-maxage = [秒]</td><td align="left">必须</td><td align="left">公共缓存服务器响应的最大 Age 值</td></tr><tr><td align="left">cache-extension</td><td align="left">-</td><td align="left">新指令标记 (token)</td></tr></tbody></table><ul><li>Connection<br>Connection 首部字段具备如下两个作用：</li></ul><ol><li>控制不再转发给代理的首部字段</li><li>管理持久连接</li></ol><p><code>Connection: Upgrade</code><br><code>Connection: Keep-Alive</code><br><code>Connection: close</code></p><ul><li><p>Date<br>首部字段 Date 表明创建 HTTP 报文的日期和时间<br>HTTP/1.1 协议使用在 RFC1123 中规定的日期时间的格式<br><code>Date: Tue, 03 Jul 2012 04:40:59 GMT</code></p></li><li><p>Pragma<br>Pragma 是 HTTP/1.1 之前版本的历史遗留字段，仅作为与 HTTP/1.0 的向后兼容而定义。<br>规范定义的形式唯一：<code>Pragma: no-cache</code></p></li><li><p>Trailer<br>首部字段 Trailer 会事先说明在报文主体后记录了哪些首部字段，该字段可应用在 HTTP/1.1 版本分块传输编码时。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTTP"><figure class="iseeu highlight /http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="attribute">Trailer</span>: Expires</span><br><span class="line">...(报文主体)...</span><br><span class="line"><span class="attribute">Expires</span>: Tue, 28 Sep 2004 23:59:59 GMT</span><br></pre></td></tr></table></figure></div></li><li><p>Transfer-Encoding<br>首部字段 Transfer-Encoding 规定了传输报文主体时采用的编码方式。</p></li><li><p>Upgrade<br>首部字段 Upgrade 用于检测 HTTP 协议及其他协议是否可使用更高的版本进行通信，其参数可以用来指定一个完全不同的通信协议<br>使用首部字段 Upgrade 时，需要额外指定 <code>Connection: Upgrade</code><br>对于富有首部字段 Upgrade 的请求，服务器可用 101 Switching Protocols 状态码作为响应返回。</p></li><li><p>Via<br>使用首部字段 Via 是为了追踪客户端与服务器之间的请求和响应报文的传输路径。</p></li><li><p>Warning<br>HTTP/1.1 的 Warning 首部是从 HTTP/1.0 的响应首部 (Retry-After) 演变过来的，该首部通常会告知用户一些与缓存相关的问题的警告。</p></li></ul><p>Warning 首部的格式如下：<br><code>Warning: [警告码] [警告的主机:端口号] &quot;[警告内容]&quot; ([日期时间])</code></p><p>HTTP/1.1 警告码</p><table><thead><tr><th align="left">警告码</th><th align="left">警告内容</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">110</td><td align="left">Response is stale (响应已过期)</td><td align="left">代理返回已过期的资源</td></tr><tr><td align="left">111</td><td align="left">Revalidation failed (再次验证失败)</td><td align="left">代理再验证资源有效性时失败 (服务器无法到达等原因)</td></tr><tr><td align="left">112</td><td align="left">Disconnection operation (断开连接操作)</td><td align="left">代理与互联网连接被故意切断</td></tr><tr><td align="left">113</td><td align="left">Heuristic expiration (试探性过期)</td><td align="left">响应的使用期超过24小时 (有效缓存设定时间大于24小时的情况下)</td></tr><tr><td align="left">199</td><td align="left">Miscellaneous warning (杂项警告)</td><td align="left">任意的警告内容</td></tr><tr><td align="left">214</td><td align="left">Transformation applied (使用了转换)</td><td align="left">代理对内容编码或媒体类型等执行了某些处理时</td></tr><tr><td align="left">299</td><td align="left">Miscellaneous persistent warning (持久杂项警告)</td><td align="left">任意的警告内容</td></tr></tbody></table><h3 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h3><ul><li><p>Accept<br>Accept 首部字段可通知服务器，用户代理能够处理的媒体类型及媒体类型的相对优先级。可使用 <code>type/subtype</code> 这种形式，一次指定多种媒体类型。<br>若想给显示的媒体类型增加优先级，则使用 <code>q=</code> 来额外表示权重值，用分号进行分割。权重值 q 的范围是 0~1 可精确到小数点后3位，且1为最大值。不指定权重 q 值时，默认权重为 q=1.0。<br><code>Accept: text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8</code></p></li><li><p>Accept-Charset<br>Accept-Charset 首部字段可用来通知服务器用户代理支持的字符集，及字符集的相对优先顺序。另外可一次性指定多种字符集，与首部字段 Accept 相同的是可用权重 q 值来表示相对优先级。<br><code>Accept-Charset: utf-8</code></p></li><li><p>Accept-Encoding<br>Accept-Encoding 首部字段用来告知服务器用户代理支持的内容编码及内容编码的优先级顺序。可一次性指定多种内容编码。<br><code>Accept-Encoding: gzip, deflate</code></p></li><li><p>Accept-Language<br>首部字段 Accept-Language 用来告知服务器用户代理能够处理的自然语言集，以及自然语言集的相对优先级，可一次指定多种自然语言集。<br><code>Accept-Language: zh-cn,zh;q=0.7,en-us,en;q=0.3</code></p></li><li><p>Authorization<br>首部字段 Authorization 是用来告知服务器，用户代理的认证信息 (证书值)。</p></li><li><p>Expect<br>客户端使用首部字段 Expect 来告知服务器，期望出现的某种特定行为。<br>因服务器无法理解客户端的期望做出回应而发生错误时，会返回状态码 417 Expectation Failed。<br><code>Expect: 100-continue</code></p></li><li><p>From<br>首部字段 From 用来告知服务器使用用户代理的用户的电子邮件地址。</p></li><li><p>Host<br>首部字段 Host 会告知服务器，请求的资源所处的互联网主机名和端口号。<br>Host 首部字段在 HTTP/1.1 规范内是唯一一个必须包含在请求内的首部字段。<br><code>Host: github.com</code></p></li><li><p>If-Match<br>形如 If-xxx 这种样式的请求首部字段，都可称为条件请求。服务器接收到附带条件的请求后，只有判断指定条件为真时，才会执行请求。</p></li></ul><p>首部字段 If-Match，属附带条件之一，它会告知服务器匹配资源所用的实体标记 (ETag) 值。</p><ul><li><p>If-Modified-Since<br>首部字段 If-Modified-Since，属附带条件之一，它会告知服务器若 If-Modified-Since 字段值早于资源的更新时间，则希望能处理该请求。</p></li><li><p>If-None-Match<br>首部字段 If-None-Match，属附带条件之一，它和 If-Match 相反。</p></li><li><p>If-Range<br>首部字段 If-Range，属附带条件之一，它告知服务器若指定的 If-Range 字段值 (ETag 值或者时间) 和请求资源的 ETag 值或时间相一致时，则作为范围请求处理，反之则返回全体资源。</p></li><li><p>If-Unmodified-Since<br>和 If-Modified-Since 相反</p></li><li><p>Max-Forwards<br>通过 TRACE 方法或 OPTIONS 方法，发送包含首部字段 Max-Forwards 的请求时，该字段以10进制整数形式指定可经过的服务器最大数目。</p></li><li><p>Proxy-Authorization<br>接收到从代理服务器发送来的认证质询时，客户端会发送包含首部字段Proxy-Authorization的请求，以便告知服务器认证所需的信息。</p></li><li><p>Range<br><code>Range: bytes=5001-10000</code><br>对于只需获取部分资源的范围请求，包含首部字段 Range 即可告知服务器资源的指定范围。</p></li><li><p>Referer<br><code>Referer: http://github.com/</code><br>首部字段 Referer 会告知服务器请求的原始资源的URL<br>会被用来爬虫和反爬虫…</p></li></ul><p>Referer的正确英语拼法是referrer。由于早期HTTP规范的拼写错误，为了保持向下兼容就将错就错了。其它网络技术的规范企图修正此问题，使用正确拼法，所以目前拼法不统一。</p><ul><li>TE<br>首部字段 TE 会告知服务器客户端能够处理响应的传输编码方式及相对优先级。<br>它和首部字段 Accept-Encoding 的功能很像，但是用于传输编码<br><code>TE: gzip</code></li></ul><p>除了指定传输编码之外，还可以指定伴随 trailer 字段的分块传输编码方式。只需把 trailers 赋值给该字段值。<br><code>TE: trailers</code></p><ul><li>User-Agent<br>首部字段 User-Agent 会将创建请求的浏览器和用户代理名称等信息传达给服务器。<br>爬虫要模拟浏览器就要添加该字段。</li></ul><h3 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h3><p>响应首部字段是由服务器向客户端返回相应报文中所使用的字段，用于补充相应的附加信息、服务器信息，以及客户端的附加要求等信息。</p><ul><li><p>Accept-Ranges<br>用来告知客户端，服务器是否能处理范围请求，以指定获取服务器端某个部分的资源。<br>可指定的字段值有两种，可处理范围请求时指定其为 bytes，反之则指定其为 none</p></li><li><p>Age<br>首部字段 Age 能告知客户端，源服务器在多久前创建了响应。字段值的单位为秒。</p></li><li><p>ETag<br>能够告知客户端实体标识</p></li><li><p>Location<br>可以讲响应接收方引导至某个与请求URL位置不同的资源。</p></li><li><p>Proxy-Authenticate<br>首部字段 Proxy-Authenticate 会把由代理服务器所要求的认证信息发送给客户端。</p></li><li><p>Retry-After<br>告知客户端应该在多久之后再次发送请求。</p></li><li><p>Server<br>告知客户端当前服务器上安装的 HTTP 服务器应用程序的信息。不单单会标出服务器上的软件应用名称，还可能包括版本号和安装时启动的可选项。</p></li><li><p>Vary<br>源服务器会向代理服务器传达关于本地缓存使用方法的命令。</p></li><li><p>WWW-Authenticate<br>用于 HTTP 访问认证。它会告知客户端用于访问请求 URL 所制定资源的认证方案 (Basic 或是 Digest) 和带参数提示的质询 (challenge)。<br>状态码 401 Unauthorized 响应中，肯定带有首部字段 WWW-Authenticate。</p></li></ul><h3 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h3><p>实体首部字段是包含在请求报文和响应报文中的实体部分所使用的首部，用于不中内容的更新时间等与实体相关的信息。</p><ul><li><p>Allow<br>用于通知客户端能够支持 Request-URL 指定资源的所有 HTTP 方法。<br>当服务器接收到不支持的 HTTP 方法是，会以状态码 405 Method Not Allowed 作为响应返回，与此同时，还会把所有能支持的 HTTP 方法写入首部字段 Allow 后返回。</p></li><li><p>Content-Encoding<br>告知客户端服务器对实体的主体部分选用的内容编码方式。</p></li><li><p>Content-Language<br>告知客户端，实体主体使用的自然语言。</p></li><li><p>Content-Length<br>告知客户端，实体主体的大小，单位字节。</p></li><li><p>Content-Location<br>给出与报文主体部分相对应的URL</p></li><li><p>Content-MD5<br>对报文主体执行 MD5 算法获得的 128 位二进制数，再通过 Base64 编码后将结果写入 Content-MD5 字段值。</p></li><li><p>Content-Range<br>告知客户端作为响应返回的实体的哪个部分符合范围请求。字段值以字节为单位，表示当前发送部分及整个实体大小。</p></li><li><p>Content-Type<br>说明了实体主体内对象的媒体类型。和首部字段 Accept 一样，字段值用 type/subtype 形式赋值。</p></li><li><p>Expires<br>将资源失效的日期告知客户端。</p></li><li><p>Last-Modified<br>知名资源最终修改的时间</p></li></ul><h3 id="为-Cookie-服务的首部字段"><a href="#为-Cookie-服务的首部字段" class="headerlink" title="为 Cookie 服务的首部字段"></a>为 Cookie 服务的首部字段</h3><p>Cookie 的工作机制是用户识别及状态管理。Web网站为了管理用户的状态会通过Web浏览器，把一些数据临时写入用户的计算机内。接着当用户访问该Web网站时，可通过通信方式取回之前发放的 Cookie。</p><ul><li>Set-Cookie<br>Set-Cookie 字段的属性</li></ul><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">NAME=VALUE</td><td align="left">赋予 Cookie 的名称和其值 (必需项)</td></tr><tr><td align="left">expires=DATE</td><td align="left">Cookie 的有效期 (若不明确指定则默认为浏览器关闭前为止)</td></tr><tr><td align="left">path=PATH</td><td align="left">将服务器上的文件目录作为Cookie的适用对象 (若不指定则默认为文档所在的文件目录)</td></tr><tr><td align="left">domain=域名</td><td align="left">作为Cookie适用对象的域名 (若不指定则默认为创建Cookie的服务器的域名)</td></tr><tr><td align="left">Secure</td><td align="left">仅在HTTPS安全通信时才会发送Cookie</td></tr><tr><td align="left">HttpOnly</td><td align="left">加以限制，使Cookie不能被JavaScript脚本访问</td></tr></tbody></table><ul><li>Cookie<br><code>Cookie: status=enable</code><br>Cookie 会告知服务器，当客户端想获得HTTP状态管理支持时，就会在请求中包含从服务器接收到的Cookie。接收到多个Cookie时，同样可以以多个Cookie形式发送。</li></ul><h3 id="其他首部字段"><a href="#其他首部字段" class="headerlink" title="其他首部字段"></a>其他首部字段</h3><p>HTTP 首部字段是可以自行扩展的。所以在Web服务器和浏览器应用上，会出现各种非标准的首部字段。</p><ul><li><p>X-Frame-Options<br>首部字段 X-Frame-Options 属于HTTP响应首部，用于控制网站内容在其他Web网站的Frame标签内的显示问题。其主要目的是为了防止点击劫持攻击。<br><code>DENY: 拒绝</code><br><code>SAMEORIGIN: 仅同源域名下的页面 (Top-level-browsing-context) 匹配时许可。</code></p></li><li><p>X-XSS-Protection<br>首部字段 X-XSS-Protection 属于HTTP响应首部，它是针对跨站脚本攻击的一种对策，用于控制浏览器XSS防护机制的开关。<br><code>0: 将XSS过滤设置成无效状态</code><br><code>1: 将XSS过滤设置成有效状态</code></p></li><li><p>DNT<br>首部字段 DNT 属于 HTTP 请求首部，其中 DNT 是 Do Not Track 的简称，意为拒绝个人信息被手机，是表示拒绝被精准广告追踪的一种方法。<br><code>0: 同意被追踪</code><br><code>1: 拒绝被追踪</code></p></li><li><p>P3P<br>首部字段 P3P 属于 HTTP 相应首部，通过利用 P3P (The Platform for Privacy Preferences, 在线隐私偏好平台) 技术，可以让Web网站上的个人隐私变成一种仅供程序可理解的形式，以达到保护用户隐私的目的。</p></li></ul><h1 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP/2.0"></a>HTTP/2.0</h1><p><strong>HTTP2 的基本概念</strong><br>HTTP2 是基于SPDY的..<br>HTTP2 有着分厂明确的职责限定：</p><ul><li>它必须维持 HTTP 的范式。毕竟它只是一个让客户端发送请求到服务器的基于TCP的协议。</li><li>不能盖面 http:// 和 https:// 这样的 URL，也不能对其添加新的结构。使用这类URL的网站太多了，没发指望他们全部改变。</li><li>HTTP1的服务器和客户端依然会存在很久，所以我们必须提供HTTP1到HTTP2服务器的代理。</li><li>我们也要让这种代理能够将HTTP2的功能一对一的映射到HTTP1.1的客户端</li><li>删除或者减少协议里面那些可选的部分。虽然这并不算的上是一个需求，但是SPDY和Google的团队都非常喜欢这样。通过让协议里的所有内容都成为强制性需求，可以防止人们在实现的时候偷懒，从而规避一些将来可能发生的问题。</li><li>不再使用小版本号。服务器和客户端都必须确定自己是否完整兼容HTTP2或者彻底不兼容。如果将来协议需要被扩充或者变更，那么新的协议将会是HTTP3，而不是HTTP2.X</li></ul><p><strong>HTTP2和现有的URI结构</strong><br>HTTP 1.1本身就制定过“升级”的方案：提供一个首部字段， 表示允许服务器在收到旧协议请求的同时， 可以向客户端发送新协议的响应。 但这一方案往往需要多花费一次往返通信来作为升级的代价。<br>而这一代价是SPDY团队不想接受的。 因为他们只实现了基于TLS的SPDY， 所以他们开发了一个TLS的扩展去简化协议的协商。 这个扩展被称作NPN（ Next Protocol Negotiation） ， 借助于此， 服务器会通知客户端所有它支持的协议， 让客户端从中选择一个合适的来进行通讯。</p><p>HTTP2将TLS标记成了可选。 然而， 全球两大浏览器领导者 —— Firefox和Chrome都明确地表示， 他们只会实现基于TLS的HTTP2<br>规范中指定了TLS最低版本为1.2， 并且会有加密组的限制。</p><p>对于纯文本的HTTP1.1来说， 协商http2的方法就是通过给服务器发送一个带升级头部的报文。 如果服务器支持http2， 它将以“101 Switching”作为回复的状态码， 并从此开始在该连接上使用http2。 也许你很容易就发现这样一个升级的流程会需要消耗掉一整个的往返时延， 但好处是http2连接相比HTTP1可以被更大限度地重用和保持。<br>虽然有些浏览器厂商的发言人宣称他们不会实现这样的http2会话方式， 但IE团队已公开表示他们会实现， 与此同时， curl也已经支持了这种方式</p><p><strong>基于TLS之上的HTTP2协商</strong><br>Next Protocol Negotiation (NPN)是一个用来在TLS服务器上协商SPDY的协议。 IETF将这个非正式标准进行规范化， 从而演变成了ALPN（ Application Layer Protocol Negotiation）。ALPN会随着http2的应用被推广， 而SPDY的客户端与服务器则会继续使用NPN。<br>ALPN和NPN的主要区别在于：谁来决定该次会话所使用的协议。 在ALPN的描述中， 是让客户端先发送一个协议优先级列表给服务器， 由服务器最终选择一个合适的。 而NPN则正好相反， 客户端有着最终的决定权。</p><h2 id="HTTP2-协议"><a href="#HTTP2-协议" class="headerlink" title="HTTP2 协议"></a>HTTP2 协议</h2><p>HTTP2 是一个二进制协议。<br>http2会发送有着不同类型的二进制帧， 但他们都有如下的公共字段：Type, Length, Flags, StreamIdentifier和frame payload<br>规范中一共定义了10种不同的帧，其中最基础的两种分别对应于HTTP1.1的DATA和HEADERS。 </p><p>http2连接上传输的每个帧都关联到一个“流”。 流是一个逻辑上的联合， 一个独立的， 双向的帧序列可以通过一个http2的连接在服务端与客户端之间不断的交换数据。</p><p>每个单独的http2连接都可以包含多个并发的流， 这些流中交错的包含着来自两端的帧。 流既可以被客户端/服务器端单方面的建立和使用， 也可以被双方共享， 或者被任意一边关闭。 在流里面， 每一帧发送的顺序非常关键。 接收方会按照收到帧的顺序来进行处理。</p><p>每个流都包含一个优先级（ 也就是“权重”） ， 它被用来告诉对端哪个流更重要。 当资源有限的时候， 服务器会根据优先级来选择应该先发送哪些流。<br>借助于PRIORITY帧， 客户端同样可以告知服务器当前的流依赖于其他哪个流。 该功能让客户端能建立一个优先级“树”， 所有“子流”会依赖于“父流”的传输完成情况。</p><p>HTTP2 也是一种无状态的协议。</p><p>HPACK， HTTP/2头部压缩， 顾名思义它是一个专为http2头部设计的压缩格式。 确切的讲，它甚至被制定写入在另外一个单独的草案里。 新的格式同时引入了一些其他对策让破解压缩变得困难， 例如采用帧的可选填充和用一个bit作为标记， 来让中间人不压缩指定的头部。</p><p>在http2里面， 我们可以通过发送RST_STREAM帧来实现重置， 从而避免浪费带宽和中断已有的连接。</p><p>服务器推送，这个功能通常被称作“缓存推送”。 主要的思想是：当一个客户端请求资源X， 而服务器知道它很可能也需要资源Z的情况下， 服务器可以在客户端发送请求前， 主动将资源Z推送给客户端。 这个功能帮助客户端将Z放进缓存以备将来之需。<br>如果不需要的话， 客户端可以通过发送一个RST_STREAM帧来中止。</p><p>http2上面每个流都拥有自己的公示的流量窗口， 它可以限制另一端发送数据。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>协议强制规定了接收方必须读取并忽略掉所有未知帧类型的帧。 双方可以在逐跳原则（ hopby-hop basis） 基础上协商使用新的帧， 这些帧的状态无法被改变， 而且也不受流控制。</p><p><strong>备选服务（ Alternative Services）</strong></p><p>服务器将会通过发送Alt-Svc头（ 或者http2的ALTSVC帧） 来告知客户端另一个备选服务。 即另外一条指向不同的服务源、 主机或端口， 但却能获取同样内容的路由。<br>藉此， 客户端可以尝试异步的连接并使用该服务， 如果它切实可用的话。</p><p><strong>阻塞（ Blocked）</strong></p><p>这个类型的帧意味着：当服务端存在需要发送的内容， 但流控制却禁止发送任何数据时， 那么此类型的帧将会被发送且仅发送一次。 这种帧设计的目的在于， 如果你接收到了此帧， 那么连接中必然有错误发生或者是得到了低于期望的传输速度。<br>有可能移除..</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>HTTP2的学习不详细，后续资料齐全再补充…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTP-1-1&quot;&gt;&lt;a href=&quot;#HTTP-1-1&quot; class=&quot;headerlink&quot; title=&quot;HTTP 1.1&quot;&gt;&lt;/a&gt;HTTP 1.1&lt;/h1&gt;&lt;p&gt;Web 使用一种名为 HTTP(HyperText Transfer Protocol, 超文本传输协议/超文本转移协议)的协议作为规范，完成从客户端到服务端等一系列运作流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Network" scheme="https://mirokaku.github.io/Blog/categories/Network/"/>
    
    
      <category term="HTTP" scheme="https://mirokaku.github.io/Blog/tags/HTTP/"/>
    
      <category term="Network" scheme="https://mirokaku.github.io/Blog/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>ArchLinux 安装笔记</title>
    <link href="https://mirokaku.github.io/Blog/2016/ArchLinux-install-notes/"/>
    <id>https://mirokaku.github.io/Blog/2016/ArchLinux-install-notes/</id>
    <published>2016-07-17T08:01:18.000Z</published>
    <updated>2017-05-12T03:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h1><p>建议优先选择官方文档为参考，内容随时更新且非常详细。这里记录是包含一些自己遇到的坑。且只针对自己安装需求的情况。</p><h1 id="引用参考"><a href="#引用参考" class="headerlink" title="引用参考"></a>引用参考</h1><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0JlZ2lubmVycyUyN19ndWlkZV8lMjglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODclMjk=" title="https://wiki.archlinux.org/index.php/Beginners%27_guide_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">Beginners’guide (简体中文)<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0luc3RhbGxhdGlvbl9ndWlkZV8lMjglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODclMjk=" title="https://wiki.archlinux.org/index.php/Installation_guide_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">Installation guide (简体中文)<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9iaWdlYWdsZS5tZS8yMDE0LzA2L2FyY2hsaW51eC1pbnN0YWxsLWZvci1iZWdpbm5lcnMv" title="https://bigeagle.me/2014/06/archlinux-install-for-beginners/">给妹子看的 Arch Linux 桌面日常安装<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmlra2UubW9lL3Bvc3RzL2FyY2hsaW51eC1pbnN0YWxsYXRpb24tbm90ZXMv" title="https://blog.ikke.moe/posts/archlinux-installation-notes/">ArchLinux 安装笔记<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTE1MjYyNy9hcnRpY2xlL2RldGFpbHMvMTg5MjUxMjE=" title="http://blog.csdn.net/u011152627/article/details/18925121">寒假折腾Archlinux的一些经验（新手向）–桌面配置篇<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTE1MjYyNy9hcnRpY2xlL2RldGFpbHMvMzgxNDUxMjU=" title="http://blog.csdn.net/u011152627/article/details/38145125">ArchLinux使用中常见问题集锦<i class="fa fa-external-link"></i></span></p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>机器: DELL<br>BOOT: UEFI<br>SSD: 256G<br>内存: 8G<br>CPU: i7-6500U<br>安装需求：本机安装单系统<br>ArchLinux: Release 2016.06.01</p><a id="more"></a><h1 id="LiveUSB"><a href="#LiveUSB" class="headerlink" title="LiveUSB"></a>LiveUSB</h1><p>参考 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1VTQl9mbGFzaF9pbnN0YWxsYXRpb25fbWVkaWFfJTI4JUU3JUFFJTgwJUU0JUJEJTkzJUU0JUI4JUFEJUU2JTk2JTg3JTI5" title="https://wiki.archlinux.org/index.php/USB_flash_installation_media_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">USB flash installation media (简体中文)<i class="fa fa-external-link"></i></span><br>推荐使用里面的手动方法，这样制作的LiveUSB可以使用剩余空间来存储其他东西。</p><h1 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h1><p>镜像中不包含软件包，安装的软件是通过服务器上的源下载，所以安装的时候必须要有网络连接。</p><ul><li>联网<br>有线：</li></ul><ol><li>用<code>ip addr</code> 查看网卡接口型号，比如 enp2s0</li><li>启用网卡DHCP功能，<code>systemctl enable dhcpcd@enp2s0.service</code><br>无线：</li><li><code>wifi-menu</code></li><li>选择自己的 wifi 并输入密码连接网络</li></ol><p>最后 <code>ping</code> 一下，确认网络无误</p><ul><li><p>更新系统时间<br><code>timedatectl set-ntp true</code></p></li><li><p>准备磁盘</p></li></ul><ol><li>lsblk 查看自己的硬盘所在，比如我的就是 /dev/sda</li><li>使用parted 分区<br>注意：我是要全盘安装的，所以重新建立分区表了。<br>a. <code>parted /dev/sda</code><br>b. <code>(parted) mktable gpt</code> 重建 GPT 分区表<br>c. <code>(parted) mkpart ESP fat32 1M 513M</code> 分配 ESP 分区，前1M是分区表，ESP大小为512M<br>d. <code>(parted) set 1 boot on</code> 设置为ESP分区<br>e. <code>(parted) mkpart primary linux-swap 513M 8705M</code> 分配swap分区，这里使用了与我内存同样大小的8G<br>f. <code>(parted) mkpart primary ext4 8705M 100%</code> 分配root分区，使用剩余所有空间</li><li>格式化分区<br>a. <code>mkfs.vfat –F32 /dev/sda1</code> ESP分区需要格式化成fat32，否则无法启动<br>b. <code>mkswap /dev/sda2 &amp; swapon /dev/sda2</code> 格式化交换分区，并设置<br>c. <code>mkfs.ext4 –b 4096 /dev/sda3</code> 格式化root分区，并4K对齐</li><li>挂载分区<br>a. <code>mount –t ext4 –o discard,noatime /dev/sda3 /mnt</code><br>b. <code>mkdir –p /mnt/boot/EFI</code><br>c. <code>mount /dev/sda1 /mnt/boot/EFI</code></li></ol><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li><p>配置安装源<br>默认镜像是美国的，在中国速度慢，所以全改中国了..<br><code>sed -i &#39;/Score/{/China/!{n;s/^/#/}}&#39; /etc/pacman.d/mirrorlist</code></p></li><li><p>安装基本系统<br>安装之前先确认是否连网<br><code>pacstrap /mnt base base-devel vim</code></p></li><li><p>生成 fstab<br><code>genfstab –U –p /mnt &gt;&gt; /mnt/etc/fstab</code></p></li><li><p>chroot<br><code>arch-chroot /mnt /bin/bash</code></p></li><li><p>Locale<br><code>vim /etc/locale.gen</code><br>取消下面这些注释<br>en_US.UTF-8 UTF-8<br>zh_CN.UTF-8 UTF-8<br>zh_TW.UTF-8 UTF-8</p></li></ul><p>生成locale信息<br><code>locale-gen</code><br><code>echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</code></p><ul><li>时间<br>选择时区（Shanghai）<br><code>tzselect</code></li></ul><p>将 <code>/etc/localtime</code> 软连接到 <code>/usr/share/zoneinfo/Zone/SubZone</code><br><code>ln –s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p><p>设置时间标准为 UTC 并调整时间偏移<br><code>hwclock –systohc –utc</code></p><ul><li><p>创建初始 ramdisk 环境<br><code>mkinitcpio –p linux</code></p></li><li><p>设置 root 密码<br><code>passwd</code></p></li><li><p>安装 grub<br>先df命令确认一下有木有挂载ESP分区<br>应该是这样的…</p></li></ul><table><thead><tr><th align="left">File system</th><th align="left">Mounted On</th></tr></thead><tbody><tr><td align="left">/dev/sda3</td><td align="left">/</td></tr><tr><td align="left">/dev/sda1</td><td align="left">/boot/EFI</td></tr><tr><td align="left">…</td><td align="left">…</td></tr></tbody></table><p><code>pacman –S grub efibootmgr</code><br><code>grub-install –target=x86_64-efi –efi-directory=/boot/EFI –bootloader-id=arch_grub –recheck</code><br><code>grub-mkconfig –o /boot/grub/grub.cfg</code><br><strong>注意:</strong>有些BIOS需要自己设置EFI文件位置才能找到efi文件。比如我的DELL</p><ul><li>配置网络<br><code>echo myhostname &gt; /etc/hostname</code><br>并在 /etc/hosts 添加同样主机名<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&lt;ip-address&gt;    &lt;hostname.domain.org&gt;        &lt;hostname&gt;</span></span><br><span class="line">127.0.0.1        localhost.localdomain        localhost        myhostname</span><br><span class="line">::1              localhost.localdomain        localhost        myhostname</span><br></pre></td></tr></table></figure></div></li></ul><p>有线网络<br>Interface 是您的网络接口名，见连网<br><code>systemctl enable dhcpcd@interface.service</code></p><p>无线网络<br><code>pacman –S iw wpa_supplicant dialog</code></p><ul><li>卸载分区并重启系统<br><code>exit</code><br><code>umount -R /mnt</code><br><code>reboot</code></li></ul><h1 id="折腾新大陆"><a href="#折腾新大陆" class="headerlink" title="折腾新大陆"></a>折腾新大陆</h1><p>重启之后就阔以以root进入到archlinux系统了，首先我们要进行<a href="#安装准备">联网</a>。</p><ul><li><p>添加用户<br><code>useradd –m –g users –G wheel –s /bin/bash username</code><br><code>passwd username</code></p></li><li><p>sudo<br><code>pacman –S sudo</code><br><code>vim /etc/sudoers</code><br>找到 root ALL=(ALL) ALL<br>照着这个，在下面添加一个 username ALL=(ALL) ALL</p></li><li><p>安装 yaourt<br><code>vim /etc/pacman.conf</code><br>加入下面的内容:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line"><span class="comment"># The Chinese Arch Linux communities packages.</span></span><br><span class="line">SigLevel = Optional TrustAll</span><br><span class="line">Server = http://mirrors.163.com/archlinux-cn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure></div></li></ul><p>更新并安装yaourt</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman –Syu</span><br><span class="line">pacman –S yaourt</span><br><span class="line">pacman –S archlinuxcn-keyring</span><br></pre></td></tr></table></figure></div><ul><li><p>安装 SSH、GIT、wget<br><code>pacman –S git openssh wget</code></p></li><li><p>安装 zsh</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman –S zsh</span><br><span class="line">chsh /bin/zsh</span><br><span class="line">sh –c “$(curl –fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)”</span><br></pre></td></tr></table></figure></div></li><li><p>安装 screenfetch<br><code>pacman –S screenfetch</code></p></li><li><p>NTFS 读写<br><code>pacman –S ntfs-3g</code></p></li><li><p>安装解压缩软件<br><code>pacman –S file-roller unrar unzip p7zip</code></p></li><li><p>Shadowsocks-qt5<br><code>pacman –S shadowsocks-qt5</code></p></li><li><p>ProxyChains<br><code>pacman –S proxychains</code></p></li><li><p>RP-PPPOE<br>拨号的，按需安装<br><code>pacman –S rp-pppoe</code><br><code>nm-connection-editor</code></p></li><li><p>安装 xorg 桌面管理器<br><code>pacman –S xorg-xinit xorg-server xorg-twm xterm</code></p></li><li><p>安装 gnome 桌面环境<br>按需，个人安装的gnome，觉得新版3.20挺好看的<br><code>pacman –S gnome</code><br><code>pacman –S gnome-tweak-tool</code></p></li><li><p>VPN 扩展</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman –S networkmanager-pptp</span><br><span class="line">yaourt networkmanager-l2tp</span><br><span class="line">systemctl restart NetworkManager</span><br></pre></td></tr></table></figure></div></li><li><p>启动服务<br>显示管理器gnome默认是用的GDM<br><code>systemctl enable gdm.service</code></p></li></ul><p>网络管理<br><code>systemctl enable NetworkManager.service</code></p><p>更新<br><code>pacman –Syu</code></p><ul><li><p>安装 chromium<br><code>pacman –S chromium</code></p></li><li><p>安装输入法<br>依赖<br><code>pacman –S fcitx-im fcitx-configtool fcitx-gtk3 fcitx-gtk2 fcitx-qt4 fcitx-qt5</code></p></li></ul><p>自行选择安装的拼音，我选择的sun<br><code>pacman –S sunpinyin</code></p><p>配置.xprofile文件<br><code>vim ~/.xprofile</code></p><p>添加如下内容</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LC_CTYPE=zh_CN.UTF-8</span><br><span class="line"><span class="built_in">export</span> XIM=fcitx</span><br><span class="line"><span class="built_in">export</span> XIM_PROGRAM=fcitx</span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">"@im=fcitx"</span></span><br><span class="line"><span class="built_in">eval</span> `dbus-launch --sh-syntax --<span class="built_in">exit</span>-with-session`</span><br><span class="line"><span class="built_in">exec</span> fcitx &amp;</span><br></pre></td></tr></table></figure></div><p>注意，即使这样，你会发现还是调用不出输入法…<br>等下重启之后告诉你如何解决~</p><ul><li><p>安装网易云音乐<br><code>pacman –S netease-cloud-music</code></p></li><li><p>重启<br><code>reboot</code></p></li></ul><h1 id="来到新的世界"><a href="#来到新的世界" class="headerlink" title="来到新的世界"></a>来到新的世界</h1><p>重启你会发现有了界面~</p><ul><li><p>配置输入法<br>前面说即使安装完那些东西也调不出来，是有个地方需要配置一下<br>左下角可以有个后台程序栏。右键输入法，选择配置。发现输入法里面并没有拼音，我们添加进安装的 sunpinyin 就好了。<br>注意:切换输入法与 gnome 显示的不一致。<br>默认切换输入法是 <code>ctrl+space</code></p></li><li><p>中文化<br>安装中文字体，推荐<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlLWZvbnRzL3NvdXJjZS1oYW4tc2Fucw==" title="https://github.com/adobe-fonts/source-han-sans">思源黑体<i class="fa fa-external-link"></i></span>，安装方法见 Github 上的安装过程。<br>安装等宽字体，推荐 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlLWZvbnRzL3NvdXJjZS1jb2RlLXByby8=" title="https://github.com/adobe-fonts/source-code-pro/">Source Code Pro<i class="fa fa-external-link"></i></span><br>打开 Gnome Tweak Tool，切换到字体栏，<br>将窗口、界面、文档的字体改为 Source Han Sans Normal<br>将等宽字体设置为 Source Code Pro</p></li><li><p>VMWare<br>我这里环境：<br>VMWare: VMware-Workstation-Full-12.1.1-3770994.x86_64.bundle<br>Linux: Linux 4.6.2-1-ARCH</p></li></ul><p>首先从VMWare官网下载个 VMWare二进制包<br>安装部分详见 VMware_(简体中文)</p><p>安装依赖<br><code>mkdir /etc/init.d</code></p><p>添加VMWare服务配置文件<br><code>yaourt vmware-systemd-services</code><br><code>systemctl enable vmware.service</code><br><code>systemctl start vmware.service</code></p><p>有一个地方我要说明一下。<br>在启动提示有个服务跟新的时候，更新会失败，导致不能启动VMWare<br>注意：下面的方法不一定在你的版本适用，请注意备份。<br>解决方法是：</p><ol><li>进入 <code>/usr/lib/vmware/modules/source</code></li><li>解包 <code>vmnet.tar vmmon.tar</code></li><li><code>Replace function &quot;get_user_pages()&quot; with &quot;get_user_pages_remote()&quot; in vmmon-only/linux/hostif.c and vmnet-only/userif.c files.</code></li><li>重新打包回去</li></ol><p>具体如下：<br><code>cd /usr/lib/vmware/modules/source</code></p><p>解包<br><code>sudo tar –xvf vmnet.tar</code><br><code>sudo tar –xvf vmmon.tar</code></p><p>把下面两个文件里面的 <code>get_user_pages</code> 函数替换成 <code>get_user_pages_remote</code><br><code>sudo vim vmnet-only/driver.c</code><br><code>sudo vim vmmon-only/linux/hostif.c</code></p><p>打包<br><code>sudo tar -uvf vmnet.tar vmnet-only</code><br><code>sudo tar -uvf vmmon.tar vmmon-only</code></p><p>然后删除那解包的文件夹<br><code>sudo rm -r vmnet-only</code><br><code>sudo rm -r vmmon-only</code></p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前提说明&quot;&gt;&lt;a href=&quot;#前提说明&quot; class=&quot;headerlink&quot; title=&quot;前提说明&quot;&gt;&lt;/a&gt;前提说明&lt;/h1&gt;&lt;p&gt;建议优先选择官方文档为参考，内容随时更新且非常详细。这里记录是包含一些自己遇到的坑。且只针对自己安装需求的情况。&lt;/p&gt;
&lt;h1 id=&quot;引用参考&quot;&gt;&lt;a href=&quot;#引用参考&quot; class=&quot;headerlink&quot; title=&quot;引用参考&quot;&gt;&lt;/a&gt;引用参考&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0JlZ2lubmVycyUyN19ndWlkZV8lMjglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODclMjk=&quot; title=&quot;https://wiki.archlinux.org/index.php/Beginners%27_guide_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29&quot;&gt;Beginners’guide (简体中文)&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL0luc3RhbGxhdGlvbl9ndWlkZV8lMjglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODclMjk=&quot; title=&quot;https://wiki.archlinux.org/index.php/Installation_guide_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29&quot;&gt;Installation guide (简体中文)&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9iaWdlYWdsZS5tZS8yMDE0LzA2L2FyY2hsaW51eC1pbnN0YWxsLWZvci1iZWdpbm5lcnMv&quot; title=&quot;https://bigeagle.me/2014/06/archlinux-install-for-beginners/&quot;&gt;给妹子看的 Arch Linux 桌面日常安装&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9ibG9nLmlra2UubW9lL3Bvc3RzL2FyY2hsaW51eC1pbnN0YWxsYXRpb24tbm90ZXMv&quot; title=&quot;https://blog.ikke.moe/posts/archlinux-installation-notes/&quot;&gt;ArchLinux 安装笔记&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTE1MjYyNy9hcnRpY2xlL2RldGFpbHMvMTg5MjUxMjE=&quot; title=&quot;http://blog.csdn.net/u011152627/article/details/18925121&quot;&gt;寒假折腾Archlinux的一些经验（新手向）–桌面配置篇&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTE1MjYyNy9hcnRpY2xlL2RldGFpbHMvMzgxNDUxMjU=&quot; title=&quot;http://blog.csdn.net/u011152627/article/details/38145125&quot;&gt;ArchLinux使用中常见问题集锦&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;机器: DELL&lt;br&gt;BOOT: UEFI&lt;br&gt;SSD: 256G&lt;br&gt;内存: 8G&lt;br&gt;CPU: i7-6500U&lt;br&gt;安装需求：本机安装单系统&lt;br&gt;ArchLinux: Release 2016.06.01&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://mirokaku.github.io/Blog/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://mirokaku.github.io/Blog/tags/Linux/"/>
    
      <category term="Arch" scheme="https://mirokaku.github.io/Blog/tags/Arch/"/>
    
  </entry>
  
  <entry>
    <title>XP 兼容系列：神奇的静态对象 (magic statics)</title>
    <link href="https://mirokaku.github.io/Blog/2016/XP-Compatible-magic-statics/"/>
    <id>https://mirokaku.github.io/Blog/2016/XP-Compatible-magic-statics/</id>
    <published>2016-01-13T00:25:01.000Z</published>
    <updated>2017-05-12T04:00:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="神奇的静态对象-magic-statics"><a href="#神奇的静态对象-magic-statics" class="headerlink" title="神奇的静态对象 (magic statics)"></a>神奇的静态对象 (magic statics)</h2><p>前置声明：文章可能有错误的地方，希望各位童鞋能够提出~</p><p>事故缘由…<br>为了使用很爽的C++11 特性，我司最新项目是用的VS2015进行开发的。<br>但是同时又要对XP做兼容（讲真，我个人是不支持对Win7之前的系统做兼容的，我觉得影响发展）。</p><p>我们写了个COM组件作为插件，和驱动进行通讯。<br>在我们进行单元测试的时候，一切正常。但是出了测试安装包之后，发现加载插件会崩溃。<br>然后我们挂载了Windbg神器来定位崩溃点。<br>崩溃点是一个读取TLS，这个值为空<br>(外部静态对象才会有TLS)</p><a id="more"></a><p>想到单元测试程序也是通过VS2015编译的。我们就比较两个进程有啥不一样。<br>如图:<br><img src="1.jpg" alt><br><img src="2.jpg" alt></p><p>然后我们看一下 nt!_TEB 结构，发现 Tls Storage 就是 _TEB::ThreadLocalStoragePointer 字段。如图：<br><img src="3.jpg" alt></p><p>于是我们查了一下 ReactOS 0.3.15 看下这个字段到底是啥，找到了这个分配Tls的函数</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">NTSTATUS</span><br><span class="line">NTAPI</span><br><span class="line">LdrpAllocateTls(VOID)</span><br><span class="line">&#123;</span><br><span class="line">    PTEB Teb = NtCurrentTeb();</span><br><span class="line">    PLIST_ENTRY NextEntry, ListHead;</span><br><span class="line">    PLDRP_TLS_DATA TlsData;</span><br><span class="line">    SIZE_T TlsDataSize;</span><br><span class="line">    PVOID *TlsVector;</span><br><span class="line"></span><br><span class="line">    /* Check if we have any entries */</span><br><span class="line">    if (!LdrpNumberOfTlsEntries)</span><br><span class="line">        return STATUS_SUCCESS;</span><br><span class="line"></span><br><span class="line">    /* Allocate the vector array */</span><br><span class="line">    TlsVector = RtlAllocateHeap(RtlGetProcessHeap(),</span><br><span class="line">                                    0,</span><br><span class="line">                                    LdrpNumberOfTlsEntries * sizeof(PVOID));</span><br><span class="line">    if (!TlsVector) return STATUS_NO_MEMORY;</span><br><span class="line">    Teb-&gt;ThreadLocalStoragePointer = TlsVector;</span><br><span class="line"></span><br><span class="line">    /* Loop the TLS Array */</span><br><span class="line">    ListHead = &amp;LdrpTlsList;</span><br><span class="line">    NextEntry = ListHead-&gt;Flink;</span><br><span class="line">    while (NextEntry != ListHead)</span><br><span class="line">    &#123;</span><br><span class="line">        /* Get the entry */</span><br><span class="line">        TlsData = CONTAINING_RECORD(NextEntry, LDRP_TLS_DATA, TlsLinks);</span><br><span class="line">        NextEntry = NextEntry-&gt;Flink;</span><br><span class="line"></span><br><span class="line">        /* Allocate this vector */</span><br><span class="line">        TlsDataSize = TlsData-&gt;TlsDirectory.EndAddressOfRawData -</span><br><span class="line">                      TlsData-&gt;TlsDirectory.StartAddressOfRawData;</span><br><span class="line">        TlsVector[TlsData-&gt;TlsDirectory.Characteristics] = RtlAllocateHeap(RtlGetProcessHeap(),</span><br><span class="line">                                                                           0,</span><br><span class="line">                                                                           TlsDataSize);</span><br><span class="line">        if (!TlsVector[TlsData-&gt;TlsDirectory.Characteristics])</span><br><span class="line">        &#123;</span><br><span class="line">            /* Out of memory */</span><br><span class="line">            return STATUS_NO_MEMORY;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* Show debug message */</span><br><span class="line">        if (ShowSnaps)</span><br><span class="line">        &#123;</span><br><span class="line">            DPRINT1(&quot;LDR: TlsVector %x Index %d = %x copied from %x to %x\n&quot;,</span><br><span class="line">                    TlsVector,</span><br><span class="line">                    TlsData-&gt;TlsDirectory.Characteristics,</span><br><span class="line">                    &amp;TlsVector[TlsData-&gt;TlsDirectory.Characteristics],</span><br><span class="line">                    TlsData-&gt;TlsDirectory.StartAddressOfRawData,</span><br><span class="line">                    TlsVector[TlsData-&gt;TlsDirectory.Characteristics]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* Copy the data */</span><br><span class="line">        RtlCopyMemory(TlsVector[TlsData-&gt;TlsDirectory.Characteristics],</span><br><span class="line">                      (PVOID)TlsData-&gt;TlsDirectory.StartAddressOfRawData,</span><br><span class="line">                      TlsDataSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Done */</span><br><span class="line">    return STATUS_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>但是这个函数并不能得到太多有用信息。我们又看了下谁调用了它，得到了 LdrpInitializeTls 这个函数，从这个函数里面，我们就知道，实际上 _TEB::ThreadLocalStoragePointer 这个字段就是 初始化好的PE文件里面的 Tls 表。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">NTSTATUS</span><br><span class="line">NTAPI</span><br><span class="line">LdrpInitializeTls(VOID)</span><br><span class="line">&#123;</span><br><span class="line">    PLIST_ENTRY NextEntry, ListHead;</span><br><span class="line">    PLDR_DATA_TABLE_ENTRY LdrEntry;</span><br><span class="line">    PIMAGE_TLS_DIRECTORY TlsDirectory;</span><br><span class="line">    PLDRP_TLS_DATA TlsData;</span><br><span class="line">    ULONG Size;</span><br><span class="line"></span><br><span class="line">    /* Initialize the TLS List */</span><br><span class="line">    InitializeListHead(&amp;LdrpTlsList);</span><br><span class="line"></span><br><span class="line">    /* Loop all the modules */</span><br><span class="line">    ListHead = &amp;NtCurrentPeb()-&gt;Ldr-&gt;InLoadOrderModuleList;</span><br><span class="line">    NextEntry = ListHead-&gt;Flink;</span><br><span class="line">    while (ListHead != NextEntry)</span><br><span class="line">    &#123;</span><br><span class="line">        /* Get the entry */</span><br><span class="line">        LdrEntry = CONTAINING_RECORD(NextEntry, LDR_DATA_TABLE_ENTRY, InLoadOrderLinks);</span><br><span class="line">        NextEntry = NextEntry-&gt;Flink;</span><br><span class="line"></span><br><span class="line">        /* Get the TLS directory */</span><br><span class="line">        TlsDirectory = RtlImageDirectoryEntryToData(LdrEntry-&gt;DllBase,</span><br><span class="line">                                                    TRUE,</span><br><span class="line">                                                    IMAGE_DIRECTORY_ENTRY_TLS,</span><br><span class="line">                                                    &amp;Size);</span><br><span class="line"></span><br><span class="line">        /* Check if we have a directory */</span><br><span class="line">        if (!TlsDirectory) continue;</span><br><span class="line"></span><br><span class="line">        /* Check if the image has TLS */</span><br><span class="line">        if (!LdrpImageHasTls) LdrpImageHasTls = TRUE;</span><br><span class="line"></span><br><span class="line">        /* Show debug message */</span><br><span class="line">        if (ShowSnaps)</span><br><span class="line">        &#123;</span><br><span class="line">            DPRINT1(&quot;LDR: Tls Found in %wZ at %p\n&quot;,</span><br><span class="line">                    &amp;LdrEntry-&gt;BaseDllName,</span><br><span class="line">                    TlsDirectory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* Allocate an entry */</span><br><span class="line">        TlsData = RtlAllocateHeap(RtlGetProcessHeap(), 0, sizeof(LDRP_TLS_DATA));</span><br><span class="line">        if (!TlsData) return STATUS_NO_MEMORY;</span><br><span class="line"></span><br><span class="line">        /* Lock the DLL and mark it for TLS Usage */</span><br><span class="line">        LdrEntry-&gt;LoadCount = -1;</span><br><span class="line">        LdrEntry-&gt;TlsIndex = -1;</span><br><span class="line"></span><br><span class="line">        /* Save the cached TLS data */</span><br><span class="line">        TlsData-&gt;TlsDirectory = *TlsDirectory;</span><br><span class="line">        InsertTailList(&amp;LdrpTlsList, &amp;TlsData-&gt;TlsLinks);</span><br><span class="line"></span><br><span class="line">        /* Update the index */</span><br><span class="line">        *(PLONG)TlsData-&gt;TlsDirectory.AddressOfIndex = LdrpNumberOfTlsEntries;</span><br><span class="line">        TlsData-&gt;TlsDirectory.Characteristics = LdrpNumberOfTlsEntries++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Done setting up TLS, allocate entries */</span><br><span class="line">    return LdrpAllocateTls();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>到了这步，我们以为可以很容易的解决问题，既然需要Tls目录，那我们给它一个不就行了？<br>所以我们给测试代码添加了一个Tls目录..</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#pragma comment(linker, &quot;/INCLUDE:__tls_used&quot;)</span><br><span class="line"></span><br><span class="line">#pragma data_seg(&quot;.CRT$XLB&quot;)</span><br><span class="line"></span><br><span class="line">PIMAGE_TLS_CALLBACK TlsCallBackArray[] = &#123; TlsCallBackFunction &#125;;</span><br><span class="line"></span><br><span class="line">#pragma data_seg()</span><br></pre></td></tr></table></figure></div><p>不过我们还是太天真了..我们的Tls的回调啥也没做，所以在程序执行的时候，执行到并没有初始化的对象直接崩溃了..（对，VS2015生成的Tls表（回调）就是用来初始化静态对象的。）</p><p>后来…<br>我们在 MSDN 发现一个相关的说明</p><blockquote><p>Starting in C++11, a static local variable initialization is guaranteed to be thread-safe.This feature is sometimes called magic statics.However, in a multithreaded application all subsequent assignments must be synchronized.The thread-safe statics feature can be disabled by using the /Zc:threadSafeInit- flag to avoid taking a dependency on the CRT.</p></blockquote><p>大致意思是，由于在C++11开始可以保证静态本地变量初始化时是线程安全的，即“神奇的静态对象”<br>但是这个特性是默认需要CRT支持的，所以要关闭则需要增加一条编译选项</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Zc:threadSafeInit-</span><br></pre></td></tr></table></figure></div><p>这样在XP上运行就不会出现问题了。</p><p>好了，结束~以此记录，来避免自己再遇到同样的坑 (●ˇ∀ˇ●)</p><blockquote><p><strong>引用链接：</strong><br><span class="exturl" data-url="aHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vemgtY24vbGlicmFyeS95NWY2dzU3OS5hc3B4" title="https://msdn.microsoft.com/zh-cn/library/y5f6w579.aspx">Storage class (C++)<i class="fa fa-external-link"></i></span></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;神奇的静态对象-magic-statics&quot;&gt;&lt;a href=&quot;#神奇的静态对象-magic-statics&quot; class=&quot;headerlink&quot; title=&quot;神奇的静态对象 (magic statics)&quot;&gt;&lt;/a&gt;神奇的静态对象 (magic statics)&lt;/h2&gt;&lt;p&gt;前置声明：文章可能有错误的地方，希望各位童鞋能够提出~&lt;/p&gt;
&lt;p&gt;事故缘由…&lt;br&gt;为了使用很爽的C++11 特性，我司最新项目是用的VS2015进行开发的。&lt;br&gt;但是同时又要对XP做兼容（讲真，我个人是不支持对Win7之前的系统做兼容的，我觉得影响发展）。&lt;/p&gt;
&lt;p&gt;我们写了个COM组件作为插件，和驱动进行通讯。&lt;br&gt;在我们进行单元测试的时候，一切正常。但是出了测试安装包之后，发现加载插件会崩溃。&lt;br&gt;然后我们挂载了Windbg神器来定位崩溃点。&lt;br&gt;崩溃点是一个读取TLS，这个值为空&lt;br&gt;(外部静态对象才会有TLS)&lt;/p&gt;
    
    </summary>
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://mirokaku.github.io/Blog/tags/Windows/"/>
    
      <category term="XP Compatible" scheme="https://mirokaku.github.io/Blog/tags/XP-Compatible/"/>
    
  </entry>
  
</feed>
